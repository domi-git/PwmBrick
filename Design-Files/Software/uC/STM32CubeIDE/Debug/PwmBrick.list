
PwmBrick.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003290  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  08003350  08003350  00013350  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003380  08003380  000200a4  2**0
                  CONTENTS
  4 .ARM          00000000  08003380  08003380  000200a4  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003380  08003380  000200a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003380  08003380  00013380  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003384  08003384  00013384  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000a4  20000000  08003388  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003e8  200000a4  0800342c  000200a4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000048c  0800342c  0002048c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY
 12 .debug_info   000087a6  00000000  00000000  000200cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001730  00000000  00000000  00028872  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000a20  00000000  00000000  00029fa8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000948  00000000  00000000  0002a9c8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0000c076  00000000  00000000  0002b310  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00007e27  00000000  00000000  00037386  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00045a59  00000000  00000000  0003f1ad  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00084c06  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000023a0  00000000  00000000  00084c84  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200000a4 	.word	0x200000a4
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08003338 	.word	0x08003338

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200000a8 	.word	0x200000a8
 8000104:	08003338 	.word	0x08003338

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000224:	f000 fec6 	bl	8000fb4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000228:	f000 f8a0 	bl	800036c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800022c:	f000 fa04 	bl	8000638 <MX_GPIO_Init>
  MX_TIM1_Init();
 8000230:	f000 f940 	bl	80004b4 <MX_TIM1_Init>
  MX_ADC_Init();
 8000234:	f000 f8e2 	bl	80003fc <MX_ADC_Init>

  /* Initialize ADC-Periphal -> Channel 5 */
  //InitAdc();

  /* Additional Init-Code for the PWM with Deadtime */
  InitPWM();
 8000238:	f000 faa2 	bl	8000780 <InitPWM>

  /* Start 10V-Regulator (For Mosfet Driver) */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 800023c:	2380      	movs	r3, #128	; 0x80
 800023e:	00d9      	lsls	r1, r3, #3
 8000240:	2390      	movs	r3, #144	; 0x90
 8000242:	05db      	lsls	r3, r3, #23
 8000244:	2201      	movs	r2, #1
 8000246:	0018      	movs	r0, r3
 8000248:	f001 fded 	bl	8001e26 <HAL_GPIO_WritePin>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

  	/*  Loop every 100ms */
  	if (HAL_GetTick() > tickTmp + 100u)
 800024c:	f000 ff0c 	bl	8001068 <HAL_GetTick>
 8000250:	0002      	movs	r2, r0
 8000252:	4b3e      	ldr	r3, [pc, #248]	; (800034c <main+0x12c>)
 8000254:	681b      	ldr	r3, [r3, #0]
 8000256:	3364      	adds	r3, #100	; 0x64
 8000258:	429a      	cmp	r2, r3
 800025a:	d9f7      	bls.n	800024c <main+0x2c>
		{
			tickTmp = HAL_GetTick();
 800025c:	f000 ff04 	bl	8001068 <HAL_GetTick>
 8000260:	0002      	movs	r2, r0
 8000262:	4b3a      	ldr	r3, [pc, #232]	; (800034c <main+0x12c>)
 8000264:	601a      	str	r2, [r3, #0]

			/* Up-Button Handling */
			CycleUpBtn();
 8000266:	f000 fad1 	bl	800080c <CycleUpBtn>

			/* Down-Button handling */
			CycleDownBtn();
 800026a:	f000 fb27 	bl	80008bc <CycleDownBtn>

			/* ADC-Handling (Get Battery-Voltage) */
			CycleAdc();
 800026e:	f000 fb95 	bl	800099c <CycleAdc>

			/* Handle State-Changes for Battery-Undervoltage */
			if (batVolt > 0u)  /* Only check, if there has been a battery Voltage Measurement */
 8000272:	4b37      	ldr	r3, [pc, #220]	; (8000350 <main+0x130>)
 8000274:	681b      	ldr	r3, [r3, #0]
 8000276:	2b00      	cmp	r3, #0
 8000278:	d01d      	beq.n	80002b6 <main+0x96>
			{
				/* Voltage too low? => recharge state */
				if (recharge == 0u && batVolt < 340)
 800027a:	4b36      	ldr	r3, [pc, #216]	; (8000354 <main+0x134>)
 800027c:	681b      	ldr	r3, [r3, #0]
 800027e:	2b00      	cmp	r3, #0
 8000280:	d109      	bne.n	8000296 <main+0x76>
 8000282:	4b33      	ldr	r3, [pc, #204]	; (8000350 <main+0x130>)
 8000284:	681a      	ldr	r2, [r3, #0]
 8000286:	2354      	movs	r3, #84	; 0x54
 8000288:	33ff      	adds	r3, #255	; 0xff
 800028a:	429a      	cmp	r2, r3
 800028c:	d803      	bhi.n	8000296 <main+0x76>
				{
					recharge = 1u;
 800028e:	4b31      	ldr	r3, [pc, #196]	; (8000354 <main+0x134>)
 8000290:	2201      	movs	r2, #1
 8000292:	601a      	str	r2, [r3, #0]
 8000294:	e00f      	b.n	80002b6 <main+0x96>
				}
				/* If recharge state and battery voltage high enough => quit recharge state */
				else if (recharge == 1u && batVolt > 370)
 8000296:	4b2f      	ldr	r3, [pc, #188]	; (8000354 <main+0x134>)
 8000298:	681b      	ldr	r3, [r3, #0]
 800029a:	2b01      	cmp	r3, #1
 800029c:	d10b      	bne.n	80002b6 <main+0x96>
 800029e:	4b2c      	ldr	r3, [pc, #176]	; (8000350 <main+0x130>)
 80002a0:	681a      	ldr	r2, [r3, #0]
 80002a2:	23b9      	movs	r3, #185	; 0xb9
 80002a4:	005b      	lsls	r3, r3, #1
 80002a6:	429a      	cmp	r2, r3
 80002a8:	d905      	bls.n	80002b6 <main+0x96>
				{
					recharge = 0u;
 80002aa:	4b2a      	ldr	r3, [pc, #168]	; (8000354 <main+0x134>)
 80002ac:	2200      	movs	r2, #0
 80002ae:	601a      	str	r2, [r3, #0]
					state = 0u;
 80002b0:	4b29      	ldr	r3, [pc, #164]	; (8000358 <main+0x138>)
 80002b2:	2200      	movs	r2, #0
 80002b4:	601a      	str	r2, [r3, #0]
				}
			}

			/* No PWM in recharge state and 10x-Blink-Code */
			if (recharge == 0u)
 80002b6:	4b27      	ldr	r3, [pc, #156]	; (8000354 <main+0x134>)
 80002b8:	681b      	ldr	r3, [r3, #0]
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d116      	bne.n	80002ec <main+0xcc>
			{
				/* Handle PWM-Duty */
				TIM1->CCR2 = state*595u;
 80002be:	4b26      	ldr	r3, [pc, #152]	; (8000358 <main+0x138>)
 80002c0:	681a      	ldr	r2, [r3, #0]
 80002c2:	4926      	ldr	r1, [pc, #152]	; (800035c <main+0x13c>)
 80002c4:	0013      	movs	r3, r2
 80002c6:	009b      	lsls	r3, r3, #2
 80002c8:	189b      	adds	r3, r3, r2
 80002ca:	00da      	lsls	r2, r3, #3
 80002cc:	1ad2      	subs	r2, r2, r3
 80002ce:	0113      	lsls	r3, r2, #4
 80002d0:	18d3      	adds	r3, r2, r3
 80002d2:	638b      	str	r3, [r1, #56]	; 0x38
				TIM1->CCR3 = state*595u;
 80002d4:	4b20      	ldr	r3, [pc, #128]	; (8000358 <main+0x138>)
 80002d6:	681a      	ldr	r2, [r3, #0]
 80002d8:	4920      	ldr	r1, [pc, #128]	; (800035c <main+0x13c>)
 80002da:	0013      	movs	r3, r2
 80002dc:	009b      	lsls	r3, r3, #2
 80002de:	189b      	adds	r3, r3, r2
 80002e0:	00da      	lsls	r2, r3, #3
 80002e2:	1ad2      	subs	r2, r2, r3
 80002e4:	0113      	lsls	r3, r2, #4
 80002e6:	18d3      	adds	r3, r2, r3
 80002e8:	63cb      	str	r3, [r1, #60]	; 0x3c
 80002ea:	e008      	b.n	80002fe <main+0xde>
			}
			else
			{
				TIM1->CCR2 = 0u;
 80002ec:	4b1b      	ldr	r3, [pc, #108]	; (800035c <main+0x13c>)
 80002ee:	2200      	movs	r2, #0
 80002f0:	639a      	str	r2, [r3, #56]	; 0x38
				TIM1->CCR3 = 0u;
 80002f2:	4b1a      	ldr	r3, [pc, #104]	; (800035c <main+0x13c>)
 80002f4:	2200      	movs	r2, #0
 80002f6:	63da      	str	r2, [r3, #60]	; 0x3c
				state = 10u;
 80002f8:	4b17      	ldr	r3, [pc, #92]	; (8000358 <main+0x138>)
 80002fa:	220a      	movs	r2, #10
 80002fc:	601a      	str	r2, [r3, #0]
			}

			/* Enable USART after 10 seconds (no more programming possible, because SWCLK-Pin is used!) */
			if (usartEnable == 0u)
 80002fe:	4b18      	ldr	r3, [pc, #96]	; (8000360 <main+0x140>)
 8000300:	681b      	ldr	r3, [r3, #0]
 8000302:	2b00      	cmp	r3, #0
 8000304:	d111      	bne.n	800032a <main+0x10a>
			{
				if (usartDelay < 100u)
 8000306:	4b17      	ldr	r3, [pc, #92]	; (8000364 <main+0x144>)
 8000308:	681b      	ldr	r3, [r3, #0]
 800030a:	2b63      	cmp	r3, #99	; 0x63
 800030c:	d805      	bhi.n	800031a <main+0xfa>
				{
					usartDelay++;
 800030e:	4b15      	ldr	r3, [pc, #84]	; (8000364 <main+0x144>)
 8000310:	681b      	ldr	r3, [r3, #0]
 8000312:	1c5a      	adds	r2, r3, #1
 8000314:	4b13      	ldr	r3, [pc, #76]	; (8000364 <main+0x144>)
 8000316:	601a      	str	r2, [r3, #0]
 8000318:	e015      	b.n	8000346 <main+0x126>
				}
				else
				{
					usartEnable = 1u;
 800031a:	4b11      	ldr	r3, [pc, #68]	; (8000360 <main+0x140>)
 800031c:	2201      	movs	r2, #1
 800031e:	601a      	str	r2, [r3, #0]
					InitUsart1Tx();
 8000320:	f000 fa08 	bl	8000734 <InitUsart1Tx>
					InitUart();
 8000324:	f000 fd90 	bl	8000e48 <InitUart>
 8000328:	e00d      	b.n	8000346 <main+0x126>
				}
			}
			else
			{
				termTick++;
 800032a:	4b0f      	ldr	r3, [pc, #60]	; (8000368 <main+0x148>)
 800032c:	681b      	ldr	r3, [r3, #0]
 800032e:	1c5a      	adds	r2, r3, #1
 8000330:	4b0d      	ldr	r3, [pc, #52]	; (8000368 <main+0x148>)
 8000332:	601a      	str	r2, [r3, #0]
				if (termTick >= 2u)
 8000334:	4b0c      	ldr	r3, [pc, #48]	; (8000368 <main+0x148>)
 8000336:	681b      	ldr	r3, [r3, #0]
 8000338:	2b01      	cmp	r3, #1
 800033a:	d904      	bls.n	8000346 <main+0x126>
				{
					termTick = 0u;
 800033c:	4b0a      	ldr	r3, [pc, #40]	; (8000368 <main+0x148>)
 800033e:	2200      	movs	r2, #0
 8000340:	601a      	str	r2, [r3, #0]
					CycleTerm();
 8000342:	f000 fc71 	bl	8000c28 <CycleTerm>
				}
			}

	  	/* Display state as LED-blinking code */
			CycleLedDisplay();
 8000346:	f000 faeb 	bl	8000920 <CycleLedDisplay>
  	if (HAL_GetTick() > tickTmp + 100u)
 800034a:	e77f      	b.n	800024c <main+0x2c>
 800034c:	200000c4 	.word	0x200000c4
 8000350:	200000ec 	.word	0x200000ec
 8000354:	200000f0 	.word	0x200000f0
 8000358:	200000c0 	.word	0x200000c0
 800035c:	40012c00 	.word	0x40012c00
 8000360:	200000e0 	.word	0x200000e0
 8000364:	200000e4 	.word	0x200000e4
 8000368:	200000c8 	.word	0x200000c8

0800036c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800036c:	b590      	push	{r4, r7, lr}
 800036e:	b091      	sub	sp, #68	; 0x44
 8000370:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000372:	2410      	movs	r4, #16
 8000374:	193b      	adds	r3, r7, r4
 8000376:	0018      	movs	r0, r3
 8000378:	2330      	movs	r3, #48	; 0x30
 800037a:	001a      	movs	r2, r3
 800037c:	2100      	movs	r1, #0
 800037e:	f002 ffd3 	bl	8003328 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000382:	003b      	movs	r3, r7
 8000384:	0018      	movs	r0, r3
 8000386:	2310      	movs	r3, #16
 8000388:	001a      	movs	r2, r3
 800038a:	2100      	movs	r1, #0
 800038c:	f002 ffcc 	bl	8003328 <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000390:	0021      	movs	r1, r4
 8000392:	187b      	adds	r3, r7, r1
 8000394:	2201      	movs	r2, #1
 8000396:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000398:	187b      	adds	r3, r7, r1
 800039a:	2201      	movs	r2, #1
 800039c:	605a      	str	r2, [r3, #4]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800039e:	187b      	adds	r3, r7, r1
 80003a0:	2202      	movs	r2, #2
 80003a2:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80003a4:	187b      	adds	r3, r7, r1
 80003a6:	2280      	movs	r2, #128	; 0x80
 80003a8:	0252      	lsls	r2, r2, #9
 80003aa:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL4;
 80003ac:	187b      	adds	r3, r7, r1
 80003ae:	2280      	movs	r2, #128	; 0x80
 80003b0:	0312      	lsls	r2, r2, #12
 80003b2:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 80003b4:	187b      	adds	r3, r7, r1
 80003b6:	2200      	movs	r2, #0
 80003b8:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80003ba:	187b      	adds	r3, r7, r1
 80003bc:	0018      	movs	r0, r3
 80003be:	f001 fd6b 	bl	8001e98 <HAL_RCC_OscConfig>
 80003c2:	1e03      	subs	r3, r0, #0
 80003c4:	d001      	beq.n	80003ca <SystemClock_Config+0x5e>
  {
    Error_Handler();
 80003c6:	f000 fb1b 	bl	8000a00 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80003ca:	003b      	movs	r3, r7
 80003cc:	2207      	movs	r2, #7
 80003ce:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80003d0:	003b      	movs	r3, r7
 80003d2:	2202      	movs	r2, #2
 80003d4:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80003d6:	003b      	movs	r3, r7
 80003d8:	2200      	movs	r2, #0
 80003da:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80003dc:	003b      	movs	r3, r7
 80003de:	2200      	movs	r2, #0
 80003e0:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80003e2:	003b      	movs	r3, r7
 80003e4:	2101      	movs	r1, #1
 80003e6:	0018      	movs	r0, r3
 80003e8:	f002 f872 	bl	80024d0 <HAL_RCC_ClockConfig>
 80003ec:	1e03      	subs	r3, r0, #0
 80003ee:	d001      	beq.n	80003f4 <SystemClock_Config+0x88>
  {
    Error_Handler();
 80003f0:	f000 fb06 	bl	8000a00 <Error_Handler>
  }
}
 80003f4:	46c0      	nop			; (mov r8, r8)
 80003f6:	46bd      	mov	sp, r7
 80003f8:	b011      	add	sp, #68	; 0x44
 80003fa:	bd90      	pop	{r4, r7, pc}

080003fc <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 80003fc:	b580      	push	{r7, lr}
 80003fe:	b084      	sub	sp, #16
 8000400:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000402:	1d3b      	adds	r3, r7, #4
 8000404:	0018      	movs	r0, r3
 8000406:	230c      	movs	r3, #12
 8000408:	001a      	movs	r2, r3
 800040a:	2100      	movs	r1, #0
 800040c:	f002 ff8c 	bl	8003328 <memset>
  /* USER CODE BEGIN ADC_Init 1 */

  /* USER CODE END ADC_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc.Instance = ADC1;
 8000410:	4b26      	ldr	r3, [pc, #152]	; (80004ac <MX_ADC_Init+0xb0>)
 8000412:	4a27      	ldr	r2, [pc, #156]	; (80004b0 <MX_ADC_Init+0xb4>)
 8000414:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000416:	4b25      	ldr	r3, [pc, #148]	; (80004ac <MX_ADC_Init+0xb0>)
 8000418:	2280      	movs	r2, #128	; 0x80
 800041a:	0612      	lsls	r2, r2, #24
 800041c:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 800041e:	4b23      	ldr	r3, [pc, #140]	; (80004ac <MX_ADC_Init+0xb0>)
 8000420:	2200      	movs	r2, #0
 8000422:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000424:	4b21      	ldr	r3, [pc, #132]	; (80004ac <MX_ADC_Init+0xb0>)
 8000426:	2200      	movs	r2, #0
 8000428:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 800042a:	4b20      	ldr	r3, [pc, #128]	; (80004ac <MX_ADC_Init+0xb0>)
 800042c:	2201      	movs	r2, #1
 800042e:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000430:	4b1e      	ldr	r3, [pc, #120]	; (80004ac <MX_ADC_Init+0xb0>)
 8000432:	2204      	movs	r2, #4
 8000434:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 8000436:	4b1d      	ldr	r3, [pc, #116]	; (80004ac <MX_ADC_Init+0xb0>)
 8000438:	2200      	movs	r2, #0
 800043a:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 800043c:	4b1b      	ldr	r3, [pc, #108]	; (80004ac <MX_ADC_Init+0xb0>)
 800043e:	2200      	movs	r2, #0
 8000440:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = DISABLE;
 8000442:	4b1a      	ldr	r3, [pc, #104]	; (80004ac <MX_ADC_Init+0xb0>)
 8000444:	2200      	movs	r2, #0
 8000446:	769a      	strb	r2, [r3, #26]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8000448:	4b18      	ldr	r3, [pc, #96]	; (80004ac <MX_ADC_Init+0xb0>)
 800044a:	2200      	movs	r2, #0
 800044c:	76da      	strb	r2, [r3, #27]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800044e:	4b17      	ldr	r3, [pc, #92]	; (80004ac <MX_ADC_Init+0xb0>)
 8000450:	22c2      	movs	r2, #194	; 0xc2
 8000452:	32ff      	adds	r2, #255	; 0xff
 8000454:	61da      	str	r2, [r3, #28]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000456:	4b15      	ldr	r3, [pc, #84]	; (80004ac <MX_ADC_Init+0xb0>)
 8000458:	2200      	movs	r2, #0
 800045a:	621a      	str	r2, [r3, #32]
  hadc.Init.DMAContinuousRequests = DISABLE;
 800045c:	4b13      	ldr	r3, [pc, #76]	; (80004ac <MX_ADC_Init+0xb0>)
 800045e:	2224      	movs	r2, #36	; 0x24
 8000460:	2100      	movs	r1, #0
 8000462:	5499      	strb	r1, [r3, r2]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000464:	4b11      	ldr	r3, [pc, #68]	; (80004ac <MX_ADC_Init+0xb0>)
 8000466:	2201      	movs	r2, #1
 8000468:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 800046a:	4b10      	ldr	r3, [pc, #64]	; (80004ac <MX_ADC_Init+0xb0>)
 800046c:	0018      	movs	r0, r3
 800046e:	f000 fe05 	bl	800107c <HAL_ADC_Init>
 8000472:	1e03      	subs	r3, r0, #0
 8000474:	d001      	beq.n	800047a <MX_ADC_Init+0x7e>
  {
    Error_Handler();
 8000476:	f000 fac3 	bl	8000a00 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted. 
  */
  sConfig.Channel = ADC_CHANNEL_5;
 800047a:	1d3b      	adds	r3, r7, #4
 800047c:	2205      	movs	r2, #5
 800047e:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8000480:	1d3b      	adds	r3, r7, #4
 8000482:	2280      	movs	r2, #128	; 0x80
 8000484:	0152      	lsls	r2, r2, #5
 8000486:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 8000488:	1d3b      	adds	r3, r7, #4
 800048a:	2207      	movs	r2, #7
 800048c:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800048e:	1d3a      	adds	r2, r7, #4
 8000490:	4b06      	ldr	r3, [pc, #24]	; (80004ac <MX_ADC_Init+0xb0>)
 8000492:	0011      	movs	r1, r2
 8000494:	0018      	movs	r0, r3
 8000496:	f001 f863 	bl	8001560 <HAL_ADC_ConfigChannel>
 800049a:	1e03      	subs	r3, r0, #0
 800049c:	d001      	beq.n	80004a2 <MX_ADC_Init+0xa6>
  {
    Error_Handler();
 800049e:	f000 faaf 	bl	8000a00 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 80004a2:	46c0      	nop			; (mov r8, r8)
 80004a4:	46bd      	mov	sp, r7
 80004a6:	b004      	add	sp, #16
 80004a8:	bd80      	pop	{r7, pc}
 80004aa:	46c0      	nop			; (mov r8, r8)
 80004ac:	20000148 	.word	0x20000148
 80004b0:	40012400 	.word	0x40012400

080004b4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80004b4:	b580      	push	{r7, lr}
 80004b6:	b096      	sub	sp, #88	; 0x58
 80004b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80004ba:	2348      	movs	r3, #72	; 0x48
 80004bc:	18fb      	adds	r3, r7, r3
 80004be:	0018      	movs	r0, r3
 80004c0:	2310      	movs	r3, #16
 80004c2:	001a      	movs	r2, r3
 80004c4:	2100      	movs	r1, #0
 80004c6:	f002 ff2f 	bl	8003328 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80004ca:	2340      	movs	r3, #64	; 0x40
 80004cc:	18fb      	adds	r3, r7, r3
 80004ce:	0018      	movs	r0, r3
 80004d0:	2308      	movs	r3, #8
 80004d2:	001a      	movs	r2, r3
 80004d4:	2100      	movs	r1, #0
 80004d6:	f002 ff27 	bl	8003328 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 80004da:	2324      	movs	r3, #36	; 0x24
 80004dc:	18fb      	adds	r3, r7, r3
 80004de:	0018      	movs	r0, r3
 80004e0:	231c      	movs	r3, #28
 80004e2:	001a      	movs	r2, r3
 80004e4:	2100      	movs	r1, #0
 80004e6:	f002 ff1f 	bl	8003328 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80004ea:	1d3b      	adds	r3, r7, #4
 80004ec:	0018      	movs	r0, r3
 80004ee:	2320      	movs	r3, #32
 80004f0:	001a      	movs	r2, r3
 80004f2:	2100      	movs	r1, #0
 80004f4:	f002 ff18 	bl	8003328 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80004f8:	4b4d      	ldr	r3, [pc, #308]	; (8000630 <MX_TIM1_Init+0x17c>)
 80004fa:	4a4e      	ldr	r2, [pc, #312]	; (8000634 <MX_TIM1_Init+0x180>)
 80004fc:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80004fe:	4b4c      	ldr	r3, [pc, #304]	; (8000630 <MX_TIM1_Init+0x17c>)
 8000500:	2200      	movs	r2, #0
 8000502:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000504:	4b4a      	ldr	r3, [pc, #296]	; (8000630 <MX_TIM1_Init+0x17c>)
 8000506:	2200      	movs	r2, #0
 8000508:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 4000;
 800050a:	4b49      	ldr	r3, [pc, #292]	; (8000630 <MX_TIM1_Init+0x17c>)
 800050c:	22fa      	movs	r2, #250	; 0xfa
 800050e:	0112      	lsls	r2, r2, #4
 8000510:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000512:	4b47      	ldr	r3, [pc, #284]	; (8000630 <MX_TIM1_Init+0x17c>)
 8000514:	2200      	movs	r2, #0
 8000516:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000518:	4b45      	ldr	r3, [pc, #276]	; (8000630 <MX_TIM1_Init+0x17c>)
 800051a:	2200      	movs	r2, #0
 800051c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800051e:	4b44      	ldr	r3, [pc, #272]	; (8000630 <MX_TIM1_Init+0x17c>)
 8000520:	2200      	movs	r2, #0
 8000522:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000524:	4b42      	ldr	r3, [pc, #264]	; (8000630 <MX_TIM1_Init+0x17c>)
 8000526:	0018      	movs	r0, r3
 8000528:	f002 f904 	bl	8002734 <HAL_TIM_Base_Init>
 800052c:	1e03      	subs	r3, r0, #0
 800052e:	d001      	beq.n	8000534 <MX_TIM1_Init+0x80>
  {
    Error_Handler();
 8000530:	f000 fa66 	bl	8000a00 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000534:	2148      	movs	r1, #72	; 0x48
 8000536:	187b      	adds	r3, r7, r1
 8000538:	2280      	movs	r2, #128	; 0x80
 800053a:	0152      	lsls	r2, r2, #5
 800053c:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800053e:	187a      	adds	r2, r7, r1
 8000540:	4b3b      	ldr	r3, [pc, #236]	; (8000630 <MX_TIM1_Init+0x17c>)
 8000542:	0011      	movs	r1, r2
 8000544:	0018      	movs	r0, r3
 8000546:	f002 fa53 	bl	80029f0 <HAL_TIM_ConfigClockSource>
 800054a:	1e03      	subs	r3, r0, #0
 800054c:	d001      	beq.n	8000552 <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 800054e:	f000 fa57 	bl	8000a00 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000552:	4b37      	ldr	r3, [pc, #220]	; (8000630 <MX_TIM1_Init+0x17c>)
 8000554:	0018      	movs	r0, r3
 8000556:	f002 f919 	bl	800278c <HAL_TIM_PWM_Init>
 800055a:	1e03      	subs	r3, r0, #0
 800055c:	d001      	beq.n	8000562 <MX_TIM1_Init+0xae>
  {
    Error_Handler();
 800055e:	f000 fa4f 	bl	8000a00 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000562:	2140      	movs	r1, #64	; 0x40
 8000564:	187b      	adds	r3, r7, r1
 8000566:	2200      	movs	r2, #0
 8000568:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800056a:	187b      	adds	r3, r7, r1
 800056c:	2200      	movs	r2, #0
 800056e:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000570:	187a      	adds	r2, r7, r1
 8000572:	4b2f      	ldr	r3, [pc, #188]	; (8000630 <MX_TIM1_Init+0x17c>)
 8000574:	0011      	movs	r1, r2
 8000576:	0018      	movs	r0, r3
 8000578:	f002 fe02 	bl	8003180 <HAL_TIMEx_MasterConfigSynchronization>
 800057c:	1e03      	subs	r3, r0, #0
 800057e:	d001      	beq.n	8000584 <MX_TIM1_Init+0xd0>
  {
    Error_Handler();
 8000580:	f000 fa3e 	bl	8000a00 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000584:	2124      	movs	r1, #36	; 0x24
 8000586:	187b      	adds	r3, r7, r1
 8000588:	2260      	movs	r2, #96	; 0x60
 800058a:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 800058c:	187b      	adds	r3, r7, r1
 800058e:	2200      	movs	r2, #0
 8000590:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000592:	187b      	adds	r3, r7, r1
 8000594:	2200      	movs	r2, #0
 8000596:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000598:	187b      	adds	r3, r7, r1
 800059a:	2200      	movs	r2, #0
 800059c:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800059e:	187b      	adds	r3, r7, r1
 80005a0:	2200      	movs	r2, #0
 80005a2:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80005a4:	187b      	adds	r3, r7, r1
 80005a6:	2200      	movs	r2, #0
 80005a8:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80005aa:	187b      	adds	r3, r7, r1
 80005ac:	2200      	movs	r2, #0
 80005ae:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80005b0:	1879      	adds	r1, r7, r1
 80005b2:	4b1f      	ldr	r3, [pc, #124]	; (8000630 <MX_TIM1_Init+0x17c>)
 80005b4:	2204      	movs	r2, #4
 80005b6:	0018      	movs	r0, r3
 80005b8:	f002 f962 	bl	8002880 <HAL_TIM_PWM_ConfigChannel>
 80005bc:	1e03      	subs	r3, r0, #0
 80005be:	d001      	beq.n	80005c4 <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 80005c0:	f000 fa1e 	bl	8000a00 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80005c4:	2324      	movs	r3, #36	; 0x24
 80005c6:	18f9      	adds	r1, r7, r3
 80005c8:	4b19      	ldr	r3, [pc, #100]	; (8000630 <MX_TIM1_Init+0x17c>)
 80005ca:	2208      	movs	r2, #8
 80005cc:	0018      	movs	r0, r3
 80005ce:	f002 f957 	bl	8002880 <HAL_TIM_PWM_ConfigChannel>
 80005d2:	1e03      	subs	r3, r0, #0
 80005d4:	d001      	beq.n	80005da <MX_TIM1_Init+0x126>
  {
    Error_Handler();
 80005d6:	f000 fa13 	bl	8000a00 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80005da:	1d3b      	adds	r3, r7, #4
 80005dc:	2200      	movs	r2, #0
 80005de:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80005e0:	1d3b      	adds	r3, r7, #4
 80005e2:	2200      	movs	r2, #0
 80005e4:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80005e6:	1d3b      	adds	r3, r7, #4
 80005e8:	2200      	movs	r2, #0
 80005ea:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 80005ec:	1d3b      	adds	r3, r7, #4
 80005ee:	2200      	movs	r2, #0
 80005f0:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_ENABLE;
 80005f2:	1d3b      	adds	r3, r7, #4
 80005f4:	2280      	movs	r2, #128	; 0x80
 80005f6:	0152      	lsls	r2, r2, #5
 80005f8:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80005fa:	1d3b      	adds	r3, r7, #4
 80005fc:	2280      	movs	r2, #128	; 0x80
 80005fe:	0192      	lsls	r2, r2, #6
 8000600:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_ENABLE;
 8000602:	1d3b      	adds	r3, r7, #4
 8000604:	2280      	movs	r2, #128	; 0x80
 8000606:	01d2      	lsls	r2, r2, #7
 8000608:	61da      	str	r2, [r3, #28]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800060a:	1d3a      	adds	r2, r7, #4
 800060c:	4b08      	ldr	r3, [pc, #32]	; (8000630 <MX_TIM1_Init+0x17c>)
 800060e:	0011      	movs	r1, r2
 8000610:	0018      	movs	r0, r3
 8000612:	f002 fe07 	bl	8003224 <HAL_TIMEx_ConfigBreakDeadTime>
 8000616:	1e03      	subs	r3, r0, #0
 8000618:	d001      	beq.n	800061e <MX_TIM1_Init+0x16a>
  {
    Error_Handler();
 800061a:	f000 f9f1 	bl	8000a00 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800061e:	4b04      	ldr	r3, [pc, #16]	; (8000630 <MX_TIM1_Init+0x17c>)
 8000620:	0018      	movs	r0, r3
 8000622:	f000 fa7d 	bl	8000b20 <HAL_TIM_MspPostInit>

}
 8000626:	46c0      	nop			; (mov r8, r8)
 8000628:	46bd      	mov	sp, r7
 800062a:	b016      	add	sp, #88	; 0x58
 800062c:	bd80      	pop	{r7, pc}
 800062e:	46c0      	nop			; (mov r8, r8)
 8000630:	20000108 	.word	0x20000108
 8000634:	40012c00 	.word	0x40012c00

08000638 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000638:	b590      	push	{r4, r7, lr}
 800063a:	b089      	sub	sp, #36	; 0x24
 800063c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800063e:	240c      	movs	r4, #12
 8000640:	193b      	adds	r3, r7, r4
 8000642:	0018      	movs	r0, r3
 8000644:	2314      	movs	r3, #20
 8000646:	001a      	movs	r2, r3
 8000648:	2100      	movs	r1, #0
 800064a:	f002 fe6d 	bl	8003328 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800064e:	4b37      	ldr	r3, [pc, #220]	; (800072c <MX_GPIO_Init+0xf4>)
 8000650:	695a      	ldr	r2, [r3, #20]
 8000652:	4b36      	ldr	r3, [pc, #216]	; (800072c <MX_GPIO_Init+0xf4>)
 8000654:	2180      	movs	r1, #128	; 0x80
 8000656:	03c9      	lsls	r1, r1, #15
 8000658:	430a      	orrs	r2, r1
 800065a:	615a      	str	r2, [r3, #20]
 800065c:	4b33      	ldr	r3, [pc, #204]	; (800072c <MX_GPIO_Init+0xf4>)
 800065e:	695a      	ldr	r2, [r3, #20]
 8000660:	2380      	movs	r3, #128	; 0x80
 8000662:	03db      	lsls	r3, r3, #15
 8000664:	4013      	ands	r3, r2
 8000666:	60bb      	str	r3, [r7, #8]
 8000668:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800066a:	4b30      	ldr	r3, [pc, #192]	; (800072c <MX_GPIO_Init+0xf4>)
 800066c:	695a      	ldr	r2, [r3, #20]
 800066e:	4b2f      	ldr	r3, [pc, #188]	; (800072c <MX_GPIO_Init+0xf4>)
 8000670:	2180      	movs	r1, #128	; 0x80
 8000672:	0289      	lsls	r1, r1, #10
 8000674:	430a      	orrs	r2, r1
 8000676:	615a      	str	r2, [r3, #20]
 8000678:	4b2c      	ldr	r3, [pc, #176]	; (800072c <MX_GPIO_Init+0xf4>)
 800067a:	695a      	ldr	r2, [r3, #20]
 800067c:	2380      	movs	r3, #128	; 0x80
 800067e:	029b      	lsls	r3, r3, #10
 8000680:	4013      	ands	r3, r2
 8000682:	607b      	str	r3, [r7, #4]
 8000684:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000686:	4b29      	ldr	r3, [pc, #164]	; (800072c <MX_GPIO_Init+0xf4>)
 8000688:	695a      	ldr	r2, [r3, #20]
 800068a:	4b28      	ldr	r3, [pc, #160]	; (800072c <MX_GPIO_Init+0xf4>)
 800068c:	2180      	movs	r1, #128	; 0x80
 800068e:	02c9      	lsls	r1, r1, #11
 8000690:	430a      	orrs	r2, r1
 8000692:	615a      	str	r2, [r3, #20]
 8000694:	4b25      	ldr	r3, [pc, #148]	; (800072c <MX_GPIO_Init+0xf4>)
 8000696:	695a      	ldr	r2, [r3, #20]
 8000698:	2380      	movs	r3, #128	; 0x80
 800069a:	02db      	lsls	r3, r3, #11
 800069c:	4013      	ands	r3, r2
 800069e:	603b      	str	r3, [r7, #0]
 80006a0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_Green_Pin|Charge_Enable_Pin|Start_10V_Pin, GPIO_PIN_RESET);
 80006a2:	4923      	ldr	r1, [pc, #140]	; (8000730 <MX_GPIO_Init+0xf8>)
 80006a4:	2390      	movs	r3, #144	; 0x90
 80006a6:	05db      	lsls	r3, r3, #23
 80006a8:	2200      	movs	r2, #0
 80006aa:	0018      	movs	r0, r3
 80006ac:	f001 fbbb 	bl	8001e26 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED_Green_Pin Charge_Enable_Pin Start_10V_Pin */
  GPIO_InitStruct.Pin = LED_Green_Pin|Charge_Enable_Pin|Start_10V_Pin;
 80006b0:	193b      	adds	r3, r7, r4
 80006b2:	4a1f      	ldr	r2, [pc, #124]	; (8000730 <MX_GPIO_Init+0xf8>)
 80006b4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006b6:	193b      	adds	r3, r7, r4
 80006b8:	2201      	movs	r2, #1
 80006ba:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006bc:	193b      	adds	r3, r7, r4
 80006be:	2200      	movs	r2, #0
 80006c0:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006c2:	193b      	adds	r3, r7, r4
 80006c4:	2200      	movs	r2, #0
 80006c6:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006c8:	193a      	adds	r2, r7, r4
 80006ca:	2390      	movs	r3, #144	; 0x90
 80006cc:	05db      	lsls	r3, r3, #23
 80006ce:	0011      	movs	r1, r2
 80006d0:	0018      	movs	r0, r3
 80006d2:	f001 fa1b 	bl	8001b0c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 80006d6:	193b      	adds	r3, r7, r4
 80006d8:	2208      	movs	r2, #8
 80006da:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006dc:	193b      	adds	r3, r7, r4
 80006de:	2202      	movs	r2, #2
 80006e0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006e2:	193b      	adds	r3, r7, r4
 80006e4:	2200      	movs	r2, #0
 80006e6:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80006e8:	193b      	adds	r3, r7, r4
 80006ea:	2203      	movs	r2, #3
 80006ec:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 80006ee:	193b      	adds	r3, r7, r4
 80006f0:	2201      	movs	r2, #1
 80006f2:	611a      	str	r2, [r3, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006f4:	193a      	adds	r2, r7, r4
 80006f6:	2390      	movs	r3, #144	; 0x90
 80006f8:	05db      	lsls	r3, r3, #23
 80006fa:	0011      	movs	r1, r2
 80006fc:	0018      	movs	r0, r3
 80006fe:	f001 fa05 	bl	8001b0c <HAL_GPIO_Init>

  /*Configure GPIO pins : Switch_Plus_Pin Switch_Minus_Pin */
  GPIO_InitStruct.Pin = Switch_Plus_Pin|Switch_Minus_Pin;
 8000702:	193b      	adds	r3, r7, r4
 8000704:	22c0      	movs	r2, #192	; 0xc0
 8000706:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000708:	193b      	adds	r3, r7, r4
 800070a:	2200      	movs	r2, #0
 800070c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800070e:	193b      	adds	r3, r7, r4
 8000710:	2200      	movs	r2, #0
 8000712:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000714:	193a      	adds	r2, r7, r4
 8000716:	2390      	movs	r3, #144	; 0x90
 8000718:	05db      	lsls	r3, r3, #23
 800071a:	0011      	movs	r1, r2
 800071c:	0018      	movs	r0, r3
 800071e:	f001 f9f5 	bl	8001b0c <HAL_GPIO_Init>

}
 8000722:	46c0      	nop			; (mov r8, r8)
 8000724:	46bd      	mov	sp, r7
 8000726:	b009      	add	sp, #36	; 0x24
 8000728:	bd90      	pop	{r4, r7, pc}
 800072a:	46c0      	nop			; (mov r8, r8)
 800072c:	40021000 	.word	0x40021000
 8000730:	00000414 	.word	0x00000414

08000734 <InitUsart1Tx>:

/* USER CODE BEGIN 4 */

/*----------------------------------------------------------------------------*/
static void InitUsart1Tx(void)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	b086      	sub	sp, #24
 8000738:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800073a:	1d3b      	adds	r3, r7, #4
 800073c:	0018      	movs	r0, r3
 800073e:	2314      	movs	r3, #20
 8000740:	001a      	movs	r2, r3
 8000742:	2100      	movs	r1, #0
 8000744:	f002 fdf0 	bl	8003328 <memset>

  /*Configure GPIO pin : PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 8000748:	1d3b      	adds	r3, r7, #4
 800074a:	2280      	movs	r2, #128	; 0x80
 800074c:	01d2      	lsls	r2, r2, #7
 800074e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000750:	1d3b      	adds	r3, r7, #4
 8000752:	2202      	movs	r2, #2
 8000754:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000756:	1d3b      	adds	r3, r7, #4
 8000758:	2200      	movs	r2, #0
 800075a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800075c:	1d3b      	adds	r3, r7, #4
 800075e:	2203      	movs	r2, #3
 8000760:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8000762:	1d3b      	adds	r3, r7, #4
 8000764:	2201      	movs	r2, #1
 8000766:	611a      	str	r2, [r3, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000768:	1d3a      	adds	r2, r7, #4
 800076a:	2390      	movs	r3, #144	; 0x90
 800076c:	05db      	lsls	r3, r3, #23
 800076e:	0011      	movs	r1, r2
 8000770:	0018      	movs	r0, r3
 8000772:	f001 f9cb 	bl	8001b0c <HAL_GPIO_Init>

}
 8000776:	46c0      	nop			; (mov r8, r8)
 8000778:	46bd      	mov	sp, r7
 800077a:	b006      	add	sp, #24
 800077c:	bd80      	pop	{r7, pc}
	...

08000780 <InitPWM>:

/*----------------------------------------------------------------------------*/
static void InitPWM(void)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	b088      	sub	sp, #32
 8000784:	af00      	add	r7, sp, #0
  /* Komplementären Ausgang von Channel 3 und Channel 2 aktivieren, wird von der Library nicht gemacht! */
  /* Der negative Ausgang von Channel 2 muss auch aktiviert werden, damit die Totzeit dort wirksam wird */
  TIM_CCxChannelCmd(TIM1, TIM_CHANNEL_3, TIM_CCxN_ENABLE);
 8000786:	4b1f      	ldr	r3, [pc, #124]	; (8000804 <InitPWM+0x84>)
 8000788:	2204      	movs	r2, #4
 800078a:	2108      	movs	r1, #8
 800078c:	0018      	movs	r0, r3
 800078e:	f002 fcd3 	bl	8003138 <TIM_CCxChannelCmd>
  TIM_CCxChannelCmd(TIM1, TIM_CHANNEL_2, TIM_CCxN_ENABLE);
 8000792:	4b1c      	ldr	r3, [pc, #112]	; (8000804 <InitPWM+0x84>)
 8000794:	2204      	movs	r2, #4
 8000796:	2104      	movs	r1, #4
 8000798:	0018      	movs	r0, r3
 800079a:	f002 fccd 	bl	8003138 <TIM_CCxChannelCmd>

  /* Konfiguration der Verriegelungszeit nochmal durchführen. Code-Generierung kann nur Deadtime = 0 generieren... */
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800079e:	003b      	movs	r3, r7
 80007a0:	0018      	movs	r0, r3
 80007a2:	2320      	movs	r3, #32
 80007a4:	001a      	movs	r2, r3
 80007a6:	2100      	movs	r1, #0
 80007a8:	f002 fdbe 	bl	8003328 <memset>
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80007ac:	003b      	movs	r3, r7
 80007ae:	2200      	movs	r2, #0
 80007b0:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80007b2:	003b      	movs	r3, r7
 80007b4:	2200      	movs	r2, #0
 80007b6:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80007b8:	003b      	movs	r3, r7
 80007ba:	2200      	movs	r2, #0
 80007bc:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 5;
 80007be:	003b      	movs	r3, r7
 80007c0:	2205      	movs	r2, #5
 80007c2:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_ENABLE;
 80007c4:	003b      	movs	r3, r7
 80007c6:	2280      	movs	r2, #128	; 0x80
 80007c8:	0152      	lsls	r2, r2, #5
 80007ca:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80007cc:	003b      	movs	r3, r7
 80007ce:	2280      	movs	r2, #128	; 0x80
 80007d0:	0192      	lsls	r2, r2, #6
 80007d2:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_ENABLE;
 80007d4:	003b      	movs	r3, r7
 80007d6:	2280      	movs	r2, #128	; 0x80
 80007d8:	01d2      	lsls	r2, r2, #7
 80007da:	61da      	str	r2, [r3, #28]
  HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig);
 80007dc:	003a      	movs	r2, r7
 80007de:	4b0a      	ldr	r3, [pc, #40]	; (8000808 <InitPWM+0x88>)
 80007e0:	0011      	movs	r1, r2
 80007e2:	0018      	movs	r0, r3
 80007e4:	f002 fd1e 	bl	8003224 <HAL_TIMEx_ConfigBreakDeadTime>

  /* Start PWM */
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 80007e8:	4b07      	ldr	r3, [pc, #28]	; (8000808 <InitPWM+0x88>)
 80007ea:	2104      	movs	r1, #4
 80007ec:	0018      	movs	r0, r3
 80007ee:	f002 f801 	bl	80027f4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 80007f2:	4b05      	ldr	r3, [pc, #20]	; (8000808 <InitPWM+0x88>)
 80007f4:	2108      	movs	r1, #8
 80007f6:	0018      	movs	r0, r3
 80007f8:	f001 fffc 	bl	80027f4 <HAL_TIM_PWM_Start>
}
 80007fc:	46c0      	nop			; (mov r8, r8)
 80007fe:	46bd      	mov	sp, r7
 8000800:	b008      	add	sp, #32
 8000802:	bd80      	pop	{r7, pc}
 8000804:	40012c00 	.word	0x40012c00
 8000808:	20000108 	.word	0x20000108

0800080c <CycleUpBtn>:

/*----------------------------------------------------------------------------*/
static void CycleUpBtn (void)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	af00      	add	r7, sp, #0
	// Up-Button handling
	if (upTmp == 0u)
 8000810:	4b26      	ldr	r3, [pc, #152]	; (80008ac <CycleUpBtn+0xa0>)
 8000812:	681b      	ldr	r3, [r3, #0]
 8000814:	2b00      	cmp	r3, #0
 8000816:	d10b      	bne.n	8000830 <CycleUpBtn+0x24>
	{
		// If Up-Button wasn't pressed before and is pressed now => change upTmp
		if (HAL_GPIO_ReadPin(GPIOA, Switch_Plus_Pin) == GPIO_PIN_RESET)
 8000818:	2390      	movs	r3, #144	; 0x90
 800081a:	05db      	lsls	r3, r3, #23
 800081c:	2140      	movs	r1, #64	; 0x40
 800081e:	0018      	movs	r0, r3
 8000820:	f001 fae4 	bl	8001dec <HAL_GPIO_ReadPin>
 8000824:	1e03      	subs	r3, r0, #0
 8000826:	d13d      	bne.n	80008a4 <CycleUpBtn+0x98>
		{
			upTmp = 1u;
 8000828:	4b20      	ldr	r3, [pc, #128]	; (80008ac <CycleUpBtn+0xa0>)
 800082a:	2201      	movs	r2, #1
 800082c:	601a      	str	r2, [r3, #0]
				chgModeChange = 1u;
				HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_4);
			}
		}
	}
}
 800082e:	e039      	b.n	80008a4 <CycleUpBtn+0x98>
		if (HAL_GPIO_ReadPin(GPIOA, Switch_Plus_Pin) == GPIO_PIN_SET)
 8000830:	2390      	movs	r3, #144	; 0x90
 8000832:	05db      	lsls	r3, r3, #23
 8000834:	2140      	movs	r1, #64	; 0x40
 8000836:	0018      	movs	r0, r3
 8000838:	f001 fad8 	bl	8001dec <HAL_GPIO_ReadPin>
 800083c:	0003      	movs	r3, r0
 800083e:	2b01      	cmp	r3, #1
 8000840:	d11b      	bne.n	800087a <CycleUpBtn+0x6e>
			if (chgModeChange == 0u)  // Only handle state changes when charge mode is not changed
 8000842:	4b1b      	ldr	r3, [pc, #108]	; (80008b0 <CycleUpBtn+0xa4>)
 8000844:	681b      	ldr	r3, [r3, #0]
 8000846:	2b00      	cmp	r3, #0
 8000848:	d110      	bne.n	800086c <CycleUpBtn+0x60>
				upTmp = 0u;
 800084a:	4b18      	ldr	r3, [pc, #96]	; (80008ac <CycleUpBtn+0xa0>)
 800084c:	2200      	movs	r2, #0
 800084e:	601a      	str	r2, [r3, #0]
				if (state <= 3u)
 8000850:	4b18      	ldr	r3, [pc, #96]	; (80008b4 <CycleUpBtn+0xa8>)
 8000852:	681b      	ldr	r3, [r3, #0]
 8000854:	2b03      	cmp	r3, #3
 8000856:	d805      	bhi.n	8000864 <CycleUpBtn+0x58>
					state++;
 8000858:	4b16      	ldr	r3, [pc, #88]	; (80008b4 <CycleUpBtn+0xa8>)
 800085a:	681b      	ldr	r3, [r3, #0]
 800085c:	1c5a      	adds	r2, r3, #1
 800085e:	4b15      	ldr	r3, [pc, #84]	; (80008b4 <CycleUpBtn+0xa8>)
 8000860:	601a      	str	r2, [r3, #0]
}
 8000862:	e01f      	b.n	80008a4 <CycleUpBtn+0x98>
					state = 4u;
 8000864:	4b13      	ldr	r3, [pc, #76]	; (80008b4 <CycleUpBtn+0xa8>)
 8000866:	2204      	movs	r2, #4
 8000868:	601a      	str	r2, [r3, #0]
}
 800086a:	e01b      	b.n	80008a4 <CycleUpBtn+0x98>
				upTmp = 0u;
 800086c:	4b0f      	ldr	r3, [pc, #60]	; (80008ac <CycleUpBtn+0xa0>)
 800086e:	2200      	movs	r2, #0
 8000870:	601a      	str	r2, [r3, #0]
				chgModeChange = 0u;
 8000872:	4b0f      	ldr	r3, [pc, #60]	; (80008b0 <CycleUpBtn+0xa4>)
 8000874:	2200      	movs	r2, #0
 8000876:	601a      	str	r2, [r3, #0]
}
 8000878:	e014      	b.n	80008a4 <CycleUpBtn+0x98>
			chgTick++;
 800087a:	4b0f      	ldr	r3, [pc, #60]	; (80008b8 <CycleUpBtn+0xac>)
 800087c:	681b      	ldr	r3, [r3, #0]
 800087e:	1c5a      	adds	r2, r3, #1
 8000880:	4b0d      	ldr	r3, [pc, #52]	; (80008b8 <CycleUpBtn+0xac>)
 8000882:	601a      	str	r2, [r3, #0]
			if (chgTick > 20u)
 8000884:	4b0c      	ldr	r3, [pc, #48]	; (80008b8 <CycleUpBtn+0xac>)
 8000886:	681b      	ldr	r3, [r3, #0]
 8000888:	2b14      	cmp	r3, #20
 800088a:	d90b      	bls.n	80008a4 <CycleUpBtn+0x98>
				chgTick = 0u;
 800088c:	4b0a      	ldr	r3, [pc, #40]	; (80008b8 <CycleUpBtn+0xac>)
 800088e:	2200      	movs	r2, #0
 8000890:	601a      	str	r2, [r3, #0]
				chgModeChange = 1u;
 8000892:	4b07      	ldr	r3, [pc, #28]	; (80008b0 <CycleUpBtn+0xa4>)
 8000894:	2201      	movs	r2, #1
 8000896:	601a      	str	r2, [r3, #0]
				HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_4);
 8000898:	2390      	movs	r3, #144	; 0x90
 800089a:	05db      	lsls	r3, r3, #23
 800089c:	2110      	movs	r1, #16
 800089e:	0018      	movs	r0, r3
 80008a0:	f001 fade 	bl	8001e60 <HAL_GPIO_TogglePin>
}
 80008a4:	46c0      	nop			; (mov r8, r8)
 80008a6:	46bd      	mov	sp, r7
 80008a8:	bd80      	pop	{r7, pc}
 80008aa:	46c0      	nop			; (mov r8, r8)
 80008ac:	200000d4 	.word	0x200000d4
 80008b0:	200000d0 	.word	0x200000d0
 80008b4:	200000c0 	.word	0x200000c0
 80008b8:	200000cc 	.word	0x200000cc

080008bc <CycleDownBtn>:

/*----------------------------------------------------------------------------*/
static void CycleDownBtn (void)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	af00      	add	r7, sp, #0
	if (downTmp == 0u)
 80008c0:	4b15      	ldr	r3, [pc, #84]	; (8000918 <CycleDownBtn+0x5c>)
 80008c2:	681b      	ldr	r3, [r3, #0]
 80008c4:	2b00      	cmp	r3, #0
 80008c6:	d118      	bne.n	80008fa <CycleDownBtn+0x3e>
	{
		// If Down-Button is now pressed and wasn't pressed before => next state and remember it is pressed
		if (HAL_GPIO_ReadPin(GPIOA, Switch_Minus_Pin) == GPIO_PIN_RESET)
 80008c8:	2390      	movs	r3, #144	; 0x90
 80008ca:	05db      	lsls	r3, r3, #23
 80008cc:	2180      	movs	r1, #128	; 0x80
 80008ce:	0018      	movs	r0, r3
 80008d0:	f001 fa8c 	bl	8001dec <HAL_GPIO_ReadPin>
 80008d4:	1e03      	subs	r3, r0, #0
 80008d6:	d11c      	bne.n	8000912 <CycleDownBtn+0x56>
		{
			downTmp = 1u;
 80008d8:	4b0f      	ldr	r3, [pc, #60]	; (8000918 <CycleDownBtn+0x5c>)
 80008da:	2201      	movs	r2, #1
 80008dc:	601a      	str	r2, [r3, #0]
			// Next state and overflow handling
			if (state >= 1u)
 80008de:	4b0f      	ldr	r3, [pc, #60]	; (800091c <CycleDownBtn+0x60>)
 80008e0:	681b      	ldr	r3, [r3, #0]
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	d005      	beq.n	80008f2 <CycleDownBtn+0x36>
			{
				state--;
 80008e6:	4b0d      	ldr	r3, [pc, #52]	; (800091c <CycleDownBtn+0x60>)
 80008e8:	681b      	ldr	r3, [r3, #0]
 80008ea:	1e5a      	subs	r2, r3, #1
 80008ec:	4b0b      	ldr	r3, [pc, #44]	; (800091c <CycleDownBtn+0x60>)
 80008ee:	601a      	str	r2, [r3, #0]
		if (HAL_GPIO_ReadPin(GPIOA, Switch_Plus_Pin) == GPIO_PIN_SET)
		{
			downTmp = 0u;
		}
	}
}
 80008f0:	e00f      	b.n	8000912 <CycleDownBtn+0x56>
				state = 0u;
 80008f2:	4b0a      	ldr	r3, [pc, #40]	; (800091c <CycleDownBtn+0x60>)
 80008f4:	2200      	movs	r2, #0
 80008f6:	601a      	str	r2, [r3, #0]
}
 80008f8:	e00b      	b.n	8000912 <CycleDownBtn+0x56>
		if (HAL_GPIO_ReadPin(GPIOA, Switch_Plus_Pin) == GPIO_PIN_SET)
 80008fa:	2390      	movs	r3, #144	; 0x90
 80008fc:	05db      	lsls	r3, r3, #23
 80008fe:	2140      	movs	r1, #64	; 0x40
 8000900:	0018      	movs	r0, r3
 8000902:	f001 fa73 	bl	8001dec <HAL_GPIO_ReadPin>
 8000906:	0003      	movs	r3, r0
 8000908:	2b01      	cmp	r3, #1
 800090a:	d102      	bne.n	8000912 <CycleDownBtn+0x56>
			downTmp = 0u;
 800090c:	4b02      	ldr	r3, [pc, #8]	; (8000918 <CycleDownBtn+0x5c>)
 800090e:	2200      	movs	r2, #0
 8000910:	601a      	str	r2, [r3, #0]
}
 8000912:	46c0      	nop			; (mov r8, r8)
 8000914:	46bd      	mov	sp, r7
 8000916:	bd80      	pop	{r7, pc}
 8000918:	200000d8 	.word	0x200000d8
 800091c:	200000c0 	.word	0x200000c0

08000920 <CycleLedDisplay>:

/*----------------------------------------------------------------------------*/
static void CycleLedDisplay (void)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	af00      	add	r7, sp, #0
	if (state == 0u)
 8000924:	4b1b      	ldr	r3, [pc, #108]	; (8000994 <CycleLedDisplay+0x74>)
 8000926:	681b      	ldr	r3, [r3, #0]
 8000928:	2b00      	cmp	r3, #0
 800092a:	d10a      	bne.n	8000942 <CycleLedDisplay+0x22>
	{
		flashCnt = 0u;
 800092c:	4b1a      	ldr	r3, [pc, #104]	; (8000998 <CycleLedDisplay+0x78>)
 800092e:	2200      	movs	r2, #0
 8000930:	601a      	str	r2, [r3, #0]
		HAL_GPIO_WritePin(GPIOA, LED_Green_Pin, GPIO_PIN_RESET);
 8000932:	2390      	movs	r3, #144	; 0x90
 8000934:	05db      	lsls	r3, r3, #23
 8000936:	2200      	movs	r2, #0
 8000938:	2104      	movs	r1, #4
 800093a:	0018      	movs	r0, r3
 800093c:	f001 fa73 	bl	8001e26 <HAL_GPIO_WritePin>
			{
				flashCnt = 100u;  // Start long off-interval
			}
		}
	} // LED-blinking code
}
 8000940:	e025      	b.n	800098e <CycleLedDisplay+0x6e>
		if (flashCnt >= 100u)  // long off-interval
 8000942:	4b15      	ldr	r3, [pc, #84]	; (8000998 <CycleLedDisplay+0x78>)
 8000944:	681b      	ldr	r3, [r3, #0]
 8000946:	2b63      	cmp	r3, #99	; 0x63
 8000948:	d90c      	bls.n	8000964 <CycleLedDisplay+0x44>
			flashCnt++;
 800094a:	4b13      	ldr	r3, [pc, #76]	; (8000998 <CycleLedDisplay+0x78>)
 800094c:	681b      	ldr	r3, [r3, #0]
 800094e:	1c5a      	adds	r2, r3, #1
 8000950:	4b11      	ldr	r3, [pc, #68]	; (8000998 <CycleLedDisplay+0x78>)
 8000952:	601a      	str	r2, [r3, #0]
			if (flashCnt > 105u) { flashCnt = 0u; }
 8000954:	4b10      	ldr	r3, [pc, #64]	; (8000998 <CycleLedDisplay+0x78>)
 8000956:	681b      	ldr	r3, [r3, #0]
 8000958:	2b69      	cmp	r3, #105	; 0x69
 800095a:	d918      	bls.n	800098e <CycleLedDisplay+0x6e>
 800095c:	4b0e      	ldr	r3, [pc, #56]	; (8000998 <CycleLedDisplay+0x78>)
 800095e:	2200      	movs	r2, #0
 8000960:	601a      	str	r2, [r3, #0]
}
 8000962:	e014      	b.n	800098e <CycleLedDisplay+0x6e>
			flashCnt++;
 8000964:	4b0c      	ldr	r3, [pc, #48]	; (8000998 <CycleLedDisplay+0x78>)
 8000966:	681b      	ldr	r3, [r3, #0]
 8000968:	1c5a      	adds	r2, r3, #1
 800096a:	4b0b      	ldr	r3, [pc, #44]	; (8000998 <CycleLedDisplay+0x78>)
 800096c:	601a      	str	r2, [r3, #0]
			HAL_GPIO_TogglePin(GPIOA, LED_Green_Pin);
 800096e:	2390      	movs	r3, #144	; 0x90
 8000970:	05db      	lsls	r3, r3, #23
 8000972:	2104      	movs	r1, #4
 8000974:	0018      	movs	r0, r3
 8000976:	f001 fa73 	bl	8001e60 <HAL_GPIO_TogglePin>
			if (flashCnt >= 2u*state)
 800097a:	4b06      	ldr	r3, [pc, #24]	; (8000994 <CycleLedDisplay+0x74>)
 800097c:	681b      	ldr	r3, [r3, #0]
 800097e:	005a      	lsls	r2, r3, #1
 8000980:	4b05      	ldr	r3, [pc, #20]	; (8000998 <CycleLedDisplay+0x78>)
 8000982:	681b      	ldr	r3, [r3, #0]
 8000984:	429a      	cmp	r2, r3
 8000986:	d802      	bhi.n	800098e <CycleLedDisplay+0x6e>
				flashCnt = 100u;  // Start long off-interval
 8000988:	4b03      	ldr	r3, [pc, #12]	; (8000998 <CycleLedDisplay+0x78>)
 800098a:	2264      	movs	r2, #100	; 0x64
 800098c:	601a      	str	r2, [r3, #0]
}
 800098e:	46c0      	nop			; (mov r8, r8)
 8000990:	46bd      	mov	sp, r7
 8000992:	bd80      	pop	{r7, pc}
 8000994:	200000c0 	.word	0x200000c0
 8000998:	200000dc 	.word	0x200000dc

0800099c <CycleAdc>:

/*----------------------------------------------------------------------------*/
static void CycleAdc (void)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	af00      	add	r7, sp, #0
	HAL_ADC_Start(&hadc);
 80009a0:	4b13      	ldr	r3, [pc, #76]	; (80009f0 <CycleAdc+0x54>)
 80009a2:	0018      	movs	r0, r3
 80009a4:	f000 fcaa 	bl	80012fc <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc, 5u);
 80009a8:	4b11      	ldr	r3, [pc, #68]	; (80009f0 <CycleAdc+0x54>)
 80009aa:	2105      	movs	r1, #5
 80009ac:	0018      	movs	r0, r3
 80009ae:	f000 fd39 	bl	8001424 <HAL_ADC_PollForConversion>
	adcVal = HAL_ADC_GetValue(&hadc);
 80009b2:	4b0f      	ldr	r3, [pc, #60]	; (80009f0 <CycleAdc+0x54>)
 80009b4:	0018      	movs	r0, r3
 80009b6:	f000 fdc7 	bl	8001548 <HAL_ADC_GetValue>
 80009ba:	0002      	movs	r2, r0
 80009bc:	4b0d      	ldr	r3, [pc, #52]	; (80009f4 <CycleAdc+0x58>)
 80009be:	601a      	str	r2, [r3, #0]
	HAL_ADC_Stop(&hadc);
 80009c0:	4b0b      	ldr	r3, [pc, #44]	; (80009f0 <CycleAdc+0x54>)
 80009c2:	0018      	movs	r0, r3
 80009c4:	f000 fcee 	bl	80013a4 <HAL_ADC_Stop>
	batVolt = adcVal * DIG_VOLT;
 80009c8:	4b0a      	ldr	r3, [pc, #40]	; (80009f4 <CycleAdc+0x58>)
 80009ca:	681a      	ldr	r2, [r3, #0]
 80009cc:	0013      	movs	r3, r2
 80009ce:	00db      	lsls	r3, r3, #3
 80009d0:	189b      	adds	r3, r3, r2
 80009d2:	00db      	lsls	r3, r3, #3
 80009d4:	189b      	adds	r3, r3, r2
 80009d6:	00da      	lsls	r2, r3, #3
 80009d8:	189b      	adds	r3, r3, r2
 80009da:	4907      	ldr	r1, [pc, #28]	; (80009f8 <CycleAdc+0x5c>)
 80009dc:	0018      	movs	r0, r3
 80009de:	f7ff fb93 	bl	8000108 <__udivsi3>
 80009e2:	0003      	movs	r3, r0
 80009e4:	001a      	movs	r2, r3
 80009e6:	4b05      	ldr	r3, [pc, #20]	; (80009fc <CycleAdc+0x60>)
 80009e8:	601a      	str	r2, [r3, #0]
}
 80009ea:	46c0      	nop			; (mov r8, r8)
 80009ec:	46bd      	mov	sp, r7
 80009ee:	bd80      	pop	{r7, pc}
 80009f0:	20000148 	.word	0x20000148
 80009f4:	200000e8 	.word	0x200000e8
 80009f8:	00000fff 	.word	0x00000fff
 80009fc:	200000ec 	.word	0x200000ec

08000a00 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000a04:	46c0      	nop			; (mov r8, r8)
 8000a06:	46bd      	mov	sp, r7
 8000a08:	bd80      	pop	{r7, pc}
	...

08000a0c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	b082      	sub	sp, #8
 8000a10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a12:	4b0f      	ldr	r3, [pc, #60]	; (8000a50 <HAL_MspInit+0x44>)
 8000a14:	699a      	ldr	r2, [r3, #24]
 8000a16:	4b0e      	ldr	r3, [pc, #56]	; (8000a50 <HAL_MspInit+0x44>)
 8000a18:	2101      	movs	r1, #1
 8000a1a:	430a      	orrs	r2, r1
 8000a1c:	619a      	str	r2, [r3, #24]
 8000a1e:	4b0c      	ldr	r3, [pc, #48]	; (8000a50 <HAL_MspInit+0x44>)
 8000a20:	699b      	ldr	r3, [r3, #24]
 8000a22:	2201      	movs	r2, #1
 8000a24:	4013      	ands	r3, r2
 8000a26:	607b      	str	r3, [r7, #4]
 8000a28:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a2a:	4b09      	ldr	r3, [pc, #36]	; (8000a50 <HAL_MspInit+0x44>)
 8000a2c:	69da      	ldr	r2, [r3, #28]
 8000a2e:	4b08      	ldr	r3, [pc, #32]	; (8000a50 <HAL_MspInit+0x44>)
 8000a30:	2180      	movs	r1, #128	; 0x80
 8000a32:	0549      	lsls	r1, r1, #21
 8000a34:	430a      	orrs	r2, r1
 8000a36:	61da      	str	r2, [r3, #28]
 8000a38:	4b05      	ldr	r3, [pc, #20]	; (8000a50 <HAL_MspInit+0x44>)
 8000a3a:	69da      	ldr	r2, [r3, #28]
 8000a3c:	2380      	movs	r3, #128	; 0x80
 8000a3e:	055b      	lsls	r3, r3, #21
 8000a40:	4013      	ands	r3, r2
 8000a42:	603b      	str	r3, [r7, #0]
 8000a44:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a46:	46c0      	nop			; (mov r8, r8)
 8000a48:	46bd      	mov	sp, r7
 8000a4a:	b002      	add	sp, #8
 8000a4c:	bd80      	pop	{r7, pc}
 8000a4e:	46c0      	nop			; (mov r8, r8)
 8000a50:	40021000 	.word	0x40021000

08000a54 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	b08a      	sub	sp, #40	; 0x28
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a5c:	2314      	movs	r3, #20
 8000a5e:	18fb      	adds	r3, r7, r3
 8000a60:	0018      	movs	r0, r3
 8000a62:	2314      	movs	r3, #20
 8000a64:	001a      	movs	r2, r3
 8000a66:	2100      	movs	r1, #0
 8000a68:	f002 fc5e 	bl	8003328 <memset>
  if(hadc->Instance==ADC1)
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	681b      	ldr	r3, [r3, #0]
 8000a70:	4a19      	ldr	r2, [pc, #100]	; (8000ad8 <HAL_ADC_MspInit+0x84>)
 8000a72:	4293      	cmp	r3, r2
 8000a74:	d12c      	bne.n	8000ad0 <HAL_ADC_MspInit+0x7c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000a76:	4b19      	ldr	r3, [pc, #100]	; (8000adc <HAL_ADC_MspInit+0x88>)
 8000a78:	699a      	ldr	r2, [r3, #24]
 8000a7a:	4b18      	ldr	r3, [pc, #96]	; (8000adc <HAL_ADC_MspInit+0x88>)
 8000a7c:	2180      	movs	r1, #128	; 0x80
 8000a7e:	0089      	lsls	r1, r1, #2
 8000a80:	430a      	orrs	r2, r1
 8000a82:	619a      	str	r2, [r3, #24]
 8000a84:	4b15      	ldr	r3, [pc, #84]	; (8000adc <HAL_ADC_MspInit+0x88>)
 8000a86:	699a      	ldr	r2, [r3, #24]
 8000a88:	2380      	movs	r3, #128	; 0x80
 8000a8a:	009b      	lsls	r3, r3, #2
 8000a8c:	4013      	ands	r3, r2
 8000a8e:	613b      	str	r3, [r7, #16]
 8000a90:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a92:	4b12      	ldr	r3, [pc, #72]	; (8000adc <HAL_ADC_MspInit+0x88>)
 8000a94:	695a      	ldr	r2, [r3, #20]
 8000a96:	4b11      	ldr	r3, [pc, #68]	; (8000adc <HAL_ADC_MspInit+0x88>)
 8000a98:	2180      	movs	r1, #128	; 0x80
 8000a9a:	0289      	lsls	r1, r1, #10
 8000a9c:	430a      	orrs	r2, r1
 8000a9e:	615a      	str	r2, [r3, #20]
 8000aa0:	4b0e      	ldr	r3, [pc, #56]	; (8000adc <HAL_ADC_MspInit+0x88>)
 8000aa2:	695a      	ldr	r2, [r3, #20]
 8000aa4:	2380      	movs	r3, #128	; 0x80
 8000aa6:	029b      	lsls	r3, r3, #10
 8000aa8:	4013      	ands	r3, r2
 8000aaa:	60fb      	str	r3, [r7, #12]
 8000aac:	68fb      	ldr	r3, [r7, #12]
    /**ADC GPIO Configuration    
    PA5     ------> ADC_IN5 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000aae:	2114      	movs	r1, #20
 8000ab0:	187b      	adds	r3, r7, r1
 8000ab2:	2220      	movs	r2, #32
 8000ab4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000ab6:	187b      	adds	r3, r7, r1
 8000ab8:	2203      	movs	r2, #3
 8000aba:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000abc:	187b      	adds	r3, r7, r1
 8000abe:	2200      	movs	r2, #0
 8000ac0:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ac2:	187a      	adds	r2, r7, r1
 8000ac4:	2390      	movs	r3, #144	; 0x90
 8000ac6:	05db      	lsls	r3, r3, #23
 8000ac8:	0011      	movs	r1, r2
 8000aca:	0018      	movs	r0, r3
 8000acc:	f001 f81e 	bl	8001b0c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000ad0:	46c0      	nop			; (mov r8, r8)
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	b00a      	add	sp, #40	; 0x28
 8000ad6:	bd80      	pop	{r7, pc}
 8000ad8:	40012400 	.word	0x40012400
 8000adc:	40021000 	.word	0x40021000

08000ae0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	b084      	sub	sp, #16
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	4a0a      	ldr	r2, [pc, #40]	; (8000b18 <HAL_TIM_Base_MspInit+0x38>)
 8000aee:	4293      	cmp	r3, r2
 8000af0:	d10d      	bne.n	8000b0e <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000af2:	4b0a      	ldr	r3, [pc, #40]	; (8000b1c <HAL_TIM_Base_MspInit+0x3c>)
 8000af4:	699a      	ldr	r2, [r3, #24]
 8000af6:	4b09      	ldr	r3, [pc, #36]	; (8000b1c <HAL_TIM_Base_MspInit+0x3c>)
 8000af8:	2180      	movs	r1, #128	; 0x80
 8000afa:	0109      	lsls	r1, r1, #4
 8000afc:	430a      	orrs	r2, r1
 8000afe:	619a      	str	r2, [r3, #24]
 8000b00:	4b06      	ldr	r3, [pc, #24]	; (8000b1c <HAL_TIM_Base_MspInit+0x3c>)
 8000b02:	699a      	ldr	r2, [r3, #24]
 8000b04:	2380      	movs	r3, #128	; 0x80
 8000b06:	011b      	lsls	r3, r3, #4
 8000b08:	4013      	ands	r3, r2
 8000b0a:	60fb      	str	r3, [r7, #12]
 8000b0c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000b0e:	46c0      	nop			; (mov r8, r8)
 8000b10:	46bd      	mov	sp, r7
 8000b12:	b004      	add	sp, #16
 8000b14:	bd80      	pop	{r7, pc}
 8000b16:	46c0      	nop			; (mov r8, r8)
 8000b18:	40012c00 	.word	0x40012c00
 8000b1c:	40021000 	.word	0x40021000

08000b20 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000b20:	b590      	push	{r4, r7, lr}
 8000b22:	b08b      	sub	sp, #44	; 0x2c
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b28:	2314      	movs	r3, #20
 8000b2a:	18fb      	adds	r3, r7, r3
 8000b2c:	0018      	movs	r0, r3
 8000b2e:	2314      	movs	r3, #20
 8000b30:	001a      	movs	r2, r3
 8000b32:	2100      	movs	r1, #0
 8000b34:	f002 fbf8 	bl	8003328 <memset>
  if(htim->Instance==TIM1)
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	681b      	ldr	r3, [r3, #0]
 8000b3c:	4a28      	ldr	r2, [pc, #160]	; (8000be0 <HAL_TIM_MspPostInit+0xc0>)
 8000b3e:	4293      	cmp	r3, r2
 8000b40:	d14a      	bne.n	8000bd8 <HAL_TIM_MspPostInit+0xb8>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b42:	4b28      	ldr	r3, [pc, #160]	; (8000be4 <HAL_TIM_MspPostInit+0xc4>)
 8000b44:	695a      	ldr	r2, [r3, #20]
 8000b46:	4b27      	ldr	r3, [pc, #156]	; (8000be4 <HAL_TIM_MspPostInit+0xc4>)
 8000b48:	2180      	movs	r1, #128	; 0x80
 8000b4a:	02c9      	lsls	r1, r1, #11
 8000b4c:	430a      	orrs	r2, r1
 8000b4e:	615a      	str	r2, [r3, #20]
 8000b50:	4b24      	ldr	r3, [pc, #144]	; (8000be4 <HAL_TIM_MspPostInit+0xc4>)
 8000b52:	695a      	ldr	r2, [r3, #20]
 8000b54:	2380      	movs	r3, #128	; 0x80
 8000b56:	02db      	lsls	r3, r3, #11
 8000b58:	4013      	ands	r3, r2
 8000b5a:	613b      	str	r3, [r7, #16]
 8000b5c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b5e:	4b21      	ldr	r3, [pc, #132]	; (8000be4 <HAL_TIM_MspPostInit+0xc4>)
 8000b60:	695a      	ldr	r2, [r3, #20]
 8000b62:	4b20      	ldr	r3, [pc, #128]	; (8000be4 <HAL_TIM_MspPostInit+0xc4>)
 8000b64:	2180      	movs	r1, #128	; 0x80
 8000b66:	0289      	lsls	r1, r1, #10
 8000b68:	430a      	orrs	r2, r1
 8000b6a:	615a      	str	r2, [r3, #20]
 8000b6c:	4b1d      	ldr	r3, [pc, #116]	; (8000be4 <HAL_TIM_MspPostInit+0xc4>)
 8000b6e:	695a      	ldr	r2, [r3, #20]
 8000b70:	2380      	movs	r3, #128	; 0x80
 8000b72:	029b      	lsls	r3, r3, #10
 8000b74:	4013      	ands	r3, r2
 8000b76:	60fb      	str	r3, [r7, #12]
 8000b78:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration    
    PB1     ------> TIM1_CH3N
    PA9     ------> TIM1_CH2 
    */
    GPIO_InitStruct.Pin = Pwm_Mos_Low_Pin;
 8000b7a:	2114      	movs	r1, #20
 8000b7c:	187b      	adds	r3, r7, r1
 8000b7e:	2202      	movs	r2, #2
 8000b80:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b82:	187b      	adds	r3, r7, r1
 8000b84:	2202      	movs	r2, #2
 8000b86:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b88:	187b      	adds	r3, r7, r1
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b8e:	187b      	adds	r3, r7, r1
 8000b90:	2200      	movs	r2, #0
 8000b92:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8000b94:	187b      	adds	r3, r7, r1
 8000b96:	2202      	movs	r2, #2
 8000b98:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(Pwm_Mos_Low_GPIO_Port, &GPIO_InitStruct);
 8000b9a:	000c      	movs	r4, r1
 8000b9c:	187b      	adds	r3, r7, r1
 8000b9e:	4a12      	ldr	r2, [pc, #72]	; (8000be8 <HAL_TIM_MspPostInit+0xc8>)
 8000ba0:	0019      	movs	r1, r3
 8000ba2:	0010      	movs	r0, r2
 8000ba4:	f000 ffb2 	bl	8001b0c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = Pwm_Mos_High_Pin;
 8000ba8:	0021      	movs	r1, r4
 8000baa:	187b      	adds	r3, r7, r1
 8000bac:	2280      	movs	r2, #128	; 0x80
 8000bae:	0092      	lsls	r2, r2, #2
 8000bb0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bb2:	187b      	adds	r3, r7, r1
 8000bb4:	2202      	movs	r2, #2
 8000bb6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bb8:	187b      	adds	r3, r7, r1
 8000bba:	2200      	movs	r2, #0
 8000bbc:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bbe:	187b      	adds	r3, r7, r1
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8000bc4:	187b      	adds	r3, r7, r1
 8000bc6:	2202      	movs	r2, #2
 8000bc8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(Pwm_Mos_High_GPIO_Port, &GPIO_InitStruct);
 8000bca:	187a      	adds	r2, r7, r1
 8000bcc:	2390      	movs	r3, #144	; 0x90
 8000bce:	05db      	lsls	r3, r3, #23
 8000bd0:	0011      	movs	r1, r2
 8000bd2:	0018      	movs	r0, r3
 8000bd4:	f000 ff9a 	bl	8001b0c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000bd8:	46c0      	nop			; (mov r8, r8)
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	b00b      	add	sp, #44	; 0x2c
 8000bde:	bd90      	pop	{r4, r7, pc}
 8000be0:	40012c00 	.word	0x40012c00
 8000be4:	40021000 	.word	0x40021000
 8000be8:	48000400 	.word	0x48000400

08000bec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000bf0:	46c0      	nop			; (mov r8, r8)
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	bd80      	pop	{r7, pc}

08000bf6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bf6:	b580      	push	{r7, lr}
 8000bf8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bfa:	e7fe      	b.n	8000bfa <HardFault_Handler+0x4>

08000bfc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000c00:	46c0      	nop			; (mov r8, r8)
 8000c02:	46bd      	mov	sp, r7
 8000c04:	bd80      	pop	{r7, pc}

08000c06 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c06:	b580      	push	{r7, lr}
 8000c08:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c0a:	46c0      	nop			; (mov r8, r8)
 8000c0c:	46bd      	mov	sp, r7
 8000c0e:	bd80      	pop	{r7, pc}

08000c10 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c14:	f000 fa16 	bl	8001044 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c18:	46c0      	nop			; (mov r8, r8)
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	bd80      	pop	{r7, pc}

08000c1e <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c1e:	b580      	push	{r7, lr}
 8000c20:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000c22:	46c0      	nop			; (mov r8, r8)
 8000c24:	46bd      	mov	sp, r7
 8000c26:	bd80      	pop	{r7, pc}

08000c28 <CycleTerm>:
/******************************************************************************/

void
	CycleTerm
		(void)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	b082      	sub	sp, #8
 8000c2c:	af00      	add	r7, sp, #0
//	}

	/*** Send new values ***/

	/* Byte 0: Start of Transmission */
	termTx[0] = 0xFF; 
 8000c2e:	4b3c      	ldr	r3, [pc, #240]	; (8000d20 <CycleTerm+0xf8>)
 8000c30:	22ff      	movs	r2, #255	; 0xff
 8000c32:	701a      	strb	r2, [r3, #0]

	/* Byte 1: Heartbeat */
	termTx[1] = cHB++;
 8000c34:	4b3b      	ldr	r3, [pc, #236]	; (8000d24 <CycleTerm+0xfc>)
 8000c36:	781b      	ldrb	r3, [r3, #0]
 8000c38:	1c5a      	adds	r2, r3, #1
 8000c3a:	b2d1      	uxtb	r1, r2
 8000c3c:	4a39      	ldr	r2, [pc, #228]	; (8000d24 <CycleTerm+0xfc>)
 8000c3e:	7011      	strb	r1, [r2, #0]
 8000c40:	4a37      	ldr	r2, [pc, #220]	; (8000d20 <CycleTerm+0xf8>)
 8000c42:	7053      	strb	r3, [r2, #1]
	if (cHB > 57u) { cHB = 48u; }
 8000c44:	4b37      	ldr	r3, [pc, #220]	; (8000d24 <CycleTerm+0xfc>)
 8000c46:	781b      	ldrb	r3, [r3, #0]
 8000c48:	2b39      	cmp	r3, #57	; 0x39
 8000c4a:	d902      	bls.n	8000c52 <CycleTerm+0x2a>
 8000c4c:	4b35      	ldr	r3, [pc, #212]	; (8000d24 <CycleTerm+0xfc>)
 8000c4e:	2230      	movs	r2, #48	; 0x30
 8000c50:	701a      	strb	r2, [r3, #0]

	/* Bytes 2-18: OS-Name and Version */
	for (int i=2; i<18; i++)
 8000c52:	2302      	movs	r3, #2
 8000c54:	607b      	str	r3, [r7, #4]
 8000c56:	e00b      	b.n	8000c70 <CycleTerm+0x48>
	{
		termTx[i] = os_name_ver[i-2];
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	3b02      	subs	r3, #2
 8000c5c:	4a32      	ldr	r2, [pc, #200]	; (8000d28 <CycleTerm+0x100>)
 8000c5e:	5cd1      	ldrb	r1, [r2, r3]
 8000c60:	4a2f      	ldr	r2, [pc, #188]	; (8000d20 <CycleTerm+0xf8>)
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	18d3      	adds	r3, r2, r3
 8000c66:	1c0a      	adds	r2, r1, #0
 8000c68:	701a      	strb	r2, [r3, #0]
	for (int i=2; i<18; i++)
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	3301      	adds	r3, #1
 8000c6e:	607b      	str	r3, [r7, #4]
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	2b11      	cmp	r3, #17
 8000c74:	ddf0      	ble.n	8000c58 <CycleTerm+0x30>
	}

	/* Bytes 19-XX: Variables in 2-Byte Blocks */
	int i = 0;
 8000c76:	2300      	movs	r3, #0
 8000c78:	603b      	str	r3, [r7, #0]
	while (i<2*NUM_CV)
 8000c7a:	e044      	b.n	8000d06 <CycleTerm+0xde>
	{
		tmpValue = (*(sInternVar[i/2].value)) * sCtrlVar[i/2].tcMax / sCtrlVar[i/2].iMax;     /* scale value to readable units in terminal */
 8000c7c:	683b      	ldr	r3, [r7, #0]
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	da00      	bge.n	8000c84 <CycleTerm+0x5c>
 8000c82:	3301      	adds	r3, #1
 8000c84:	105b      	asrs	r3, r3, #1
 8000c86:	4a29      	ldr	r2, [pc, #164]	; (8000d2c <CycleTerm+0x104>)
 8000c88:	00db      	lsls	r3, r3, #3
 8000c8a:	18d3      	adds	r3, r2, r3
 8000c8c:	3304      	adds	r3, #4
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	681a      	ldr	r2, [r3, #0]
 8000c92:	683b      	ldr	r3, [r7, #0]
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	da00      	bge.n	8000c9a <CycleTerm+0x72>
 8000c98:	3301      	adds	r3, #1
 8000c9a:	105b      	asrs	r3, r3, #1
 8000c9c:	0018      	movs	r0, r3
 8000c9e:	4924      	ldr	r1, [pc, #144]	; (8000d30 <CycleTerm+0x108>)
 8000ca0:	0003      	movs	r3, r0
 8000ca2:	00db      	lsls	r3, r3, #3
 8000ca4:	181b      	adds	r3, r3, r0
 8000ca6:	009b      	lsls	r3, r3, #2
 8000ca8:	18cb      	adds	r3, r1, r3
 8000caa:	3316      	adds	r3, #22
 8000cac:	881b      	ldrh	r3, [r3, #0]
 8000cae:	4353      	muls	r3, r2
 8000cb0:	0018      	movs	r0, r3
 8000cb2:	683b      	ldr	r3, [r7, #0]
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	da00      	bge.n	8000cba <CycleTerm+0x92>
 8000cb8:	3301      	adds	r3, #1
 8000cba:	105b      	asrs	r3, r3, #1
 8000cbc:	0019      	movs	r1, r3
 8000cbe:	4a1c      	ldr	r2, [pc, #112]	; (8000d30 <CycleTerm+0x108>)
 8000cc0:	000b      	movs	r3, r1
 8000cc2:	00db      	lsls	r3, r3, #3
 8000cc4:	185b      	adds	r3, r3, r1
 8000cc6:	009b      	lsls	r3, r3, #2
 8000cc8:	18d3      	adds	r3, r2, r3
 8000cca:	331a      	adds	r3, #26
 8000ccc:	881b      	ldrh	r3, [r3, #0]
 8000cce:	0019      	movs	r1, r3
 8000cd0:	f7ff fa1a 	bl	8000108 <__udivsi3>
 8000cd4:	0003      	movs	r3, r0
 8000cd6:	001a      	movs	r2, r3
 8000cd8:	4b16      	ldr	r3, [pc, #88]	; (8000d34 <CycleTerm+0x10c>)
 8000cda:	601a      	str	r2, [r3, #0]
		termTx[18 + i] = (char) ((tmpValue & U16_HIGH_BYTE) >> 8u);
 8000cdc:	4b15      	ldr	r3, [pc, #84]	; (8000d34 <CycleTerm+0x10c>)
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	0a1a      	lsrs	r2, r3, #8
 8000ce2:	683b      	ldr	r3, [r7, #0]
 8000ce4:	3312      	adds	r3, #18
 8000ce6:	b2d1      	uxtb	r1, r2
 8000ce8:	4a0d      	ldr	r2, [pc, #52]	; (8000d20 <CycleTerm+0xf8>)
 8000cea:	54d1      	strb	r1, [r2, r3]
		i++;
 8000cec:	683b      	ldr	r3, [r7, #0]
 8000cee:	3301      	adds	r3, #1
 8000cf0:	603b      	str	r3, [r7, #0]
		termTx[18 + i] = (char)  (tmpValue & U16_LOW_BYTE );
 8000cf2:	4b10      	ldr	r3, [pc, #64]	; (8000d34 <CycleTerm+0x10c>)
 8000cf4:	681a      	ldr	r2, [r3, #0]
 8000cf6:	683b      	ldr	r3, [r7, #0]
 8000cf8:	3312      	adds	r3, #18
 8000cfa:	b2d1      	uxtb	r1, r2
 8000cfc:	4a08      	ldr	r2, [pc, #32]	; (8000d20 <CycleTerm+0xf8>)
 8000cfe:	54d1      	strb	r1, [r2, r3]
		i++;
 8000d00:	683b      	ldr	r3, [r7, #0]
 8000d02:	3301      	adds	r3, #1
 8000d04:	603b      	str	r3, [r7, #0]
	while (i<2*NUM_CV)
 8000d06:	683b      	ldr	r3, [r7, #0]
 8000d08:	2b05      	cmp	r3, #5
 8000d0a:	d9b7      	bls.n	8000c7c <CycleTerm+0x54>
	}

	/* send terminal data */
	TransmitUart(termTx, (18u + 2u*NUM_CV));
 8000d0c:	4b04      	ldr	r3, [pc, #16]	; (8000d20 <CycleTerm+0xf8>)
 8000d0e:	2118      	movs	r1, #24
 8000d10:	0018      	movs	r0, r3
 8000d12:	f000 f8cb 	bl	8000eac <TransmitUart>
}
 8000d16:	46c0      	nop			; (mov r8, r8)
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	b002      	add	sp, #8
 8000d1c:	bd80      	pop	{r7, pc}
 8000d1e:	46c0      	nop			; (mov r8, r8)
 8000d20:	20000188 	.word	0x20000188
 8000d24:	20000098 	.word	0x20000098
 8000d28:	20000088 	.word	0x20000088
 8000d2c:	20000070 	.word	0x20000070
 8000d30:	20000004 	.word	0x20000004
 8000d34:	200000f4 	.word	0x200000f4

08000d38 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	b082      	sub	sp, #8
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	0002      	movs	r2, r0
 8000d40:	1dfb      	adds	r3, r7, #7
 8000d42:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000d44:	1dfb      	adds	r3, r7, #7
 8000d46:	781b      	ldrb	r3, [r3, #0]
 8000d48:	2b7f      	cmp	r3, #127	; 0x7f
 8000d4a:	d809      	bhi.n	8000d60 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d4c:	1dfb      	adds	r3, r7, #7
 8000d4e:	781b      	ldrb	r3, [r3, #0]
 8000d50:	001a      	movs	r2, r3
 8000d52:	231f      	movs	r3, #31
 8000d54:	401a      	ands	r2, r3
 8000d56:	4b04      	ldr	r3, [pc, #16]	; (8000d68 <__NVIC_EnableIRQ+0x30>)
 8000d58:	2101      	movs	r1, #1
 8000d5a:	4091      	lsls	r1, r2
 8000d5c:	000a      	movs	r2, r1
 8000d5e:	601a      	str	r2, [r3, #0]
  }
}
 8000d60:	46c0      	nop			; (mov r8, r8)
 8000d62:	46bd      	mov	sp, r7
 8000d64:	b002      	add	sp, #8
 8000d66:	bd80      	pop	{r7, pc}
 8000d68:	e000e100 	.word	0xe000e100

08000d6c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d6c:	b590      	push	{r4, r7, lr}
 8000d6e:	b083      	sub	sp, #12
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	0002      	movs	r2, r0
 8000d74:	6039      	str	r1, [r7, #0]
 8000d76:	1dfb      	adds	r3, r7, #7
 8000d78:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000d7a:	1dfb      	adds	r3, r7, #7
 8000d7c:	781b      	ldrb	r3, [r3, #0]
 8000d7e:	2b7f      	cmp	r3, #127	; 0x7f
 8000d80:	d828      	bhi.n	8000dd4 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000d82:	4a2f      	ldr	r2, [pc, #188]	; (8000e40 <__NVIC_SetPriority+0xd4>)
 8000d84:	1dfb      	adds	r3, r7, #7
 8000d86:	781b      	ldrb	r3, [r3, #0]
 8000d88:	b25b      	sxtb	r3, r3
 8000d8a:	089b      	lsrs	r3, r3, #2
 8000d8c:	33c0      	adds	r3, #192	; 0xc0
 8000d8e:	009b      	lsls	r3, r3, #2
 8000d90:	589b      	ldr	r3, [r3, r2]
 8000d92:	1dfa      	adds	r2, r7, #7
 8000d94:	7812      	ldrb	r2, [r2, #0]
 8000d96:	0011      	movs	r1, r2
 8000d98:	2203      	movs	r2, #3
 8000d9a:	400a      	ands	r2, r1
 8000d9c:	00d2      	lsls	r2, r2, #3
 8000d9e:	21ff      	movs	r1, #255	; 0xff
 8000da0:	4091      	lsls	r1, r2
 8000da2:	000a      	movs	r2, r1
 8000da4:	43d2      	mvns	r2, r2
 8000da6:	401a      	ands	r2, r3
 8000da8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000daa:	683b      	ldr	r3, [r7, #0]
 8000dac:	019b      	lsls	r3, r3, #6
 8000dae:	22ff      	movs	r2, #255	; 0xff
 8000db0:	401a      	ands	r2, r3
 8000db2:	1dfb      	adds	r3, r7, #7
 8000db4:	781b      	ldrb	r3, [r3, #0]
 8000db6:	0018      	movs	r0, r3
 8000db8:	2303      	movs	r3, #3
 8000dba:	4003      	ands	r3, r0
 8000dbc:	00db      	lsls	r3, r3, #3
 8000dbe:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000dc0:	481f      	ldr	r0, [pc, #124]	; (8000e40 <__NVIC_SetPriority+0xd4>)
 8000dc2:	1dfb      	adds	r3, r7, #7
 8000dc4:	781b      	ldrb	r3, [r3, #0]
 8000dc6:	b25b      	sxtb	r3, r3
 8000dc8:	089b      	lsrs	r3, r3, #2
 8000dca:	430a      	orrs	r2, r1
 8000dcc:	33c0      	adds	r3, #192	; 0xc0
 8000dce:	009b      	lsls	r3, r3, #2
 8000dd0:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000dd2:	e031      	b.n	8000e38 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000dd4:	4a1b      	ldr	r2, [pc, #108]	; (8000e44 <__NVIC_SetPriority+0xd8>)
 8000dd6:	1dfb      	adds	r3, r7, #7
 8000dd8:	781b      	ldrb	r3, [r3, #0]
 8000dda:	0019      	movs	r1, r3
 8000ddc:	230f      	movs	r3, #15
 8000dde:	400b      	ands	r3, r1
 8000de0:	3b08      	subs	r3, #8
 8000de2:	089b      	lsrs	r3, r3, #2
 8000de4:	3306      	adds	r3, #6
 8000de6:	009b      	lsls	r3, r3, #2
 8000de8:	18d3      	adds	r3, r2, r3
 8000dea:	3304      	adds	r3, #4
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	1dfa      	adds	r2, r7, #7
 8000df0:	7812      	ldrb	r2, [r2, #0]
 8000df2:	0011      	movs	r1, r2
 8000df4:	2203      	movs	r2, #3
 8000df6:	400a      	ands	r2, r1
 8000df8:	00d2      	lsls	r2, r2, #3
 8000dfa:	21ff      	movs	r1, #255	; 0xff
 8000dfc:	4091      	lsls	r1, r2
 8000dfe:	000a      	movs	r2, r1
 8000e00:	43d2      	mvns	r2, r2
 8000e02:	401a      	ands	r2, r3
 8000e04:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000e06:	683b      	ldr	r3, [r7, #0]
 8000e08:	019b      	lsls	r3, r3, #6
 8000e0a:	22ff      	movs	r2, #255	; 0xff
 8000e0c:	401a      	ands	r2, r3
 8000e0e:	1dfb      	adds	r3, r7, #7
 8000e10:	781b      	ldrb	r3, [r3, #0]
 8000e12:	0018      	movs	r0, r3
 8000e14:	2303      	movs	r3, #3
 8000e16:	4003      	ands	r3, r0
 8000e18:	00db      	lsls	r3, r3, #3
 8000e1a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000e1c:	4809      	ldr	r0, [pc, #36]	; (8000e44 <__NVIC_SetPriority+0xd8>)
 8000e1e:	1dfb      	adds	r3, r7, #7
 8000e20:	781b      	ldrb	r3, [r3, #0]
 8000e22:	001c      	movs	r4, r3
 8000e24:	230f      	movs	r3, #15
 8000e26:	4023      	ands	r3, r4
 8000e28:	3b08      	subs	r3, #8
 8000e2a:	089b      	lsrs	r3, r3, #2
 8000e2c:	430a      	orrs	r2, r1
 8000e2e:	3306      	adds	r3, #6
 8000e30:	009b      	lsls	r3, r3, #2
 8000e32:	18c3      	adds	r3, r0, r3
 8000e34:	3304      	adds	r3, #4
 8000e36:	601a      	str	r2, [r3, #0]
}
 8000e38:	46c0      	nop			; (mov r8, r8)
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	b003      	add	sp, #12
 8000e3e:	bd90      	pop	{r4, r7, pc}
 8000e40:	e000e100 	.word	0xe000e100
 8000e44:	e000ed00 	.word	0xe000ed00

08000e48 <InitUart>:

/*----------------------------------------------------------------------------*/
void
	InitUart
		(void)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b082      	sub	sp, #8
 8000e4c:	af00      	add	r7, sp, #0
  /* Enable Uart Clock */
  __HAL_RCC_USART1_CLK_ENABLE();
 8000e4e:	4b14      	ldr	r3, [pc, #80]	; (8000ea0 <InitUart+0x58>)
 8000e50:	699a      	ldr	r2, [r3, #24]
 8000e52:	4b13      	ldr	r3, [pc, #76]	; (8000ea0 <InitUart+0x58>)
 8000e54:	2180      	movs	r1, #128	; 0x80
 8000e56:	01c9      	lsls	r1, r1, #7
 8000e58:	430a      	orrs	r2, r1
 8000e5a:	619a      	str	r2, [r3, #24]
 8000e5c:	4b10      	ldr	r3, [pc, #64]	; (8000ea0 <InitUart+0x58>)
 8000e5e:	699a      	ldr	r2, [r3, #24]
 8000e60:	2380      	movs	r3, #128	; 0x80
 8000e62:	01db      	lsls	r3, r3, #7
 8000e64:	4013      	ands	r3, r2
 8000e66:	607b      	str	r3, [r7, #4]
 8000e68:	687b      	ldr	r3, [r7, #4]

  /* --> Pin-Configuration in main.c <-- */

  /* Configure Baud-Rate */
  /* 	f_CK = 32MHz, Oversampling = 16, Baudrate = 9600 ==> BRR = 32000000/9600 = 3333 */
  USART1->BRR = 3333u;
 8000e6a:	4b0e      	ldr	r3, [pc, #56]	; (8000ea4 <InitUart+0x5c>)
 8000e6c:	4a0e      	ldr	r2, [pc, #56]	; (8000ea8 <InitUart+0x60>)
 8000e6e:	60da      	str	r2, [r3, #12]

  /* CR1: Odd Parity, Parity Enabled, 8 Data Bits (9 Bits - 1 Parity = 8 Bit), Oversampling 16 */
  USART1->CR1 = (USART_CR1_M | USART_CR1_PS | USART_CR1_PCE );
 8000e70:	4b0c      	ldr	r3, [pc, #48]	; (8000ea4 <InitUart+0x5c>)
 8000e72:	22b0      	movs	r2, #176	; 0xb0
 8000e74:	0152      	lsls	r2, r2, #5
 8000e76:	601a      	str	r2, [r3, #0]

  /* CR2: 1 stop bit */
  USART1->CR2 = 0u;
 8000e78:	4b0a      	ldr	r3, [pc, #40]	; (8000ea4 <InitUart+0x5c>)
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	605a      	str	r2, [r3, #4]

  /* CR1: Enable Uart, Receiver Enable, Transmitter Enable */
  USART1->CR1 |= (USART_CR1_UE | USART_CR1_RE | USART_CR1_TE);
 8000e7e:	4b09      	ldr	r3, [pc, #36]	; (8000ea4 <InitUart+0x5c>)
 8000e80:	681a      	ldr	r2, [r3, #0]
 8000e82:	4b08      	ldr	r3, [pc, #32]	; (8000ea4 <InitUart+0x5c>)
 8000e84:	210d      	movs	r1, #13
 8000e86:	430a      	orrs	r2, r1
 8000e88:	601a      	str	r2, [r3, #0]

  NVIC_EnableIRQ(USART1_IRQn);
 8000e8a:	201b      	movs	r0, #27
 8000e8c:	f7ff ff54 	bl	8000d38 <__NVIC_EnableIRQ>
  NVIC_SetPriority(USART1_IRQn, 2);
 8000e90:	2102      	movs	r1, #2
 8000e92:	201b      	movs	r0, #27
 8000e94:	f7ff ff6a 	bl	8000d6c <__NVIC_SetPriority>
}
 8000e98:	46c0      	nop			; (mov r8, r8)
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	b002      	add	sp, #8
 8000e9e:	bd80      	pop	{r7, pc}
 8000ea0:	40021000 	.word	0x40021000
 8000ea4:	40013800 	.word	0x40013800
 8000ea8:	00000d05 	.word	0x00000d05

08000eac <TransmitUart>:

/*----------------------------------------------------------------------------*/
void
	TransmitUart
		(char text[], uint32_t size)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b082      	sub	sp, #8
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	6078      	str	r0, [r7, #4]
 8000eb4:	6039      	str	r1, [r7, #0]
	if (xBusy == 0u)  // No new transmission, if there is still one in progress
 8000eb6:	4b0b      	ldr	r3, [pc, #44]	; (8000ee4 <TransmitUart+0x38>)
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d10e      	bne.n	8000edc <TransmitUart+0x30>
	{
		xBusy = 1u;
 8000ebe:	4b09      	ldr	r3, [pc, #36]	; (8000ee4 <TransmitUart+0x38>)
 8000ec0:	2201      	movs	r2, #1
 8000ec2:	601a      	str	r2, [r3, #0]
		ptxBuffer = &text[0];
 8000ec4:	4b08      	ldr	r3, [pc, #32]	; (8000ee8 <TransmitUart+0x3c>)
 8000ec6:	687a      	ldr	r2, [r7, #4]
 8000ec8:	601a      	str	r2, [r3, #0]
		txBSize = size;
 8000eca:	4b08      	ldr	r3, [pc, #32]	; (8000eec <TransmitUart+0x40>)
 8000ecc:	683a      	ldr	r2, [r7, #0]
 8000ece:	601a      	str	r2, [r3, #0]

		/* CR1: Enable Interrupt for empty Transmit register */
		USART1->CR1 |= USART_CR1_TXEIE;
 8000ed0:	4b07      	ldr	r3, [pc, #28]	; (8000ef0 <TransmitUart+0x44>)
 8000ed2:	681a      	ldr	r2, [r3, #0]
 8000ed4:	4b06      	ldr	r3, [pc, #24]	; (8000ef0 <TransmitUart+0x44>)
 8000ed6:	2180      	movs	r1, #128	; 0x80
 8000ed8:	430a      	orrs	r2, r1
 8000eda:	601a      	str	r2, [r3, #0]
	}
}
 8000edc:	46c0      	nop			; (mov r8, r8)
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	b002      	add	sp, #8
 8000ee2:	bd80      	pop	{r7, pc}
 8000ee4:	20000104 	.word	0x20000104
 8000ee8:	200000f8 	.word	0x200000f8
 8000eec:	200000fc 	.word	0x200000fc
 8000ef0:	40013800 	.word	0x40013800

08000ef4 <USART1_IRQHandler>:

/*----------------------------------------------------------------------------*/
void
	USART1_IRQHandler
		(void)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	af00      	add	r7, sp, #0
	/* Transmit-Interrupt? */
	if ( (USART1->ISR & USART_ISR_TXE) > 0u)
 8000ef8:	4b14      	ldr	r3, [pc, #80]	; (8000f4c <USART1_IRQHandler+0x58>)
 8000efa:	69db      	ldr	r3, [r3, #28]
 8000efc:	2280      	movs	r2, #128	; 0x80
 8000efe:	4013      	ands	r3, r2
 8000f00:	d020      	beq.n	8000f44 <USART1_IRQHandler+0x50>
	{
		/* do transmit stuff */
		if (txIdx < txBSize)
 8000f02:	4b13      	ldr	r3, [pc, #76]	; (8000f50 <USART1_IRQHandler+0x5c>)
 8000f04:	681a      	ldr	r2, [r3, #0]
 8000f06:	4b13      	ldr	r3, [pc, #76]	; (8000f54 <USART1_IRQHandler+0x60>)
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	429a      	cmp	r2, r3
 8000f0c:	d20e      	bcs.n	8000f2c <USART1_IRQHandler+0x38>
		{
			USART1->TDR = ptxBuffer[txIdx];
 8000f0e:	4b12      	ldr	r3, [pc, #72]	; (8000f58 <USART1_IRQHandler+0x64>)
 8000f10:	681a      	ldr	r2, [r3, #0]
 8000f12:	4b0f      	ldr	r3, [pc, #60]	; (8000f50 <USART1_IRQHandler+0x5c>)
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	18d3      	adds	r3, r2, r3
 8000f18:	781a      	ldrb	r2, [r3, #0]
 8000f1a:	4b0c      	ldr	r3, [pc, #48]	; (8000f4c <USART1_IRQHandler+0x58>)
 8000f1c:	b292      	uxth	r2, r2
 8000f1e:	851a      	strh	r2, [r3, #40]	; 0x28
			txIdx++;
 8000f20:	4b0b      	ldr	r3, [pc, #44]	; (8000f50 <USART1_IRQHandler+0x5c>)
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	1c5a      	adds	r2, r3, #1
 8000f26:	4b0a      	ldr	r3, [pc, #40]	; (8000f50 <USART1_IRQHandler+0x5c>)
 8000f28:	601a      	str	r2, [r3, #0]
	}
	else
	{
		/* do receive stuff */
	}
}
 8000f2a:	e00b      	b.n	8000f44 <USART1_IRQHandler+0x50>
		  CLEAR_BIT(USART1->CR1, USART_CR1_TXEIE);  // Stop interrupt, if transmission is complete
 8000f2c:	4b07      	ldr	r3, [pc, #28]	; (8000f4c <USART1_IRQHandler+0x58>)
 8000f2e:	681a      	ldr	r2, [r3, #0]
 8000f30:	4b06      	ldr	r3, [pc, #24]	; (8000f4c <USART1_IRQHandler+0x58>)
 8000f32:	2180      	movs	r1, #128	; 0x80
 8000f34:	438a      	bics	r2, r1
 8000f36:	601a      	str	r2, [r3, #0]
		  txIdx = 0u;
 8000f38:	4b05      	ldr	r3, [pc, #20]	; (8000f50 <USART1_IRQHandler+0x5c>)
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	601a      	str	r2, [r3, #0]
		  xBusy = 0u;
 8000f3e:	4b07      	ldr	r3, [pc, #28]	; (8000f5c <USART1_IRQHandler+0x68>)
 8000f40:	2200      	movs	r2, #0
 8000f42:	601a      	str	r2, [r3, #0]
}
 8000f44:	46c0      	nop			; (mov r8, r8)
 8000f46:	46bd      	mov	sp, r7
 8000f48:	bd80      	pop	{r7, pc}
 8000f4a:	46c0      	nop			; (mov r8, r8)
 8000f4c:	40013800 	.word	0x40013800
 8000f50:	20000100 	.word	0x20000100
 8000f54:	200000fc 	.word	0x200000fc
 8000f58:	200000f8 	.word	0x200000f8
 8000f5c:	20000104 	.word	0x20000104

08000f60 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000f60:	480d      	ldr	r0, [pc, #52]	; (8000f98 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000f62:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000f64:	480d      	ldr	r0, [pc, #52]	; (8000f9c <LoopForever+0x6>)
  ldr r1, =_edata
 8000f66:	490e      	ldr	r1, [pc, #56]	; (8000fa0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000f68:	4a0e      	ldr	r2, [pc, #56]	; (8000fa4 <LoopForever+0xe>)
  movs r3, #0
 8000f6a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f6c:	e002      	b.n	8000f74 <LoopCopyDataInit>

08000f6e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f6e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f70:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f72:	3304      	adds	r3, #4

08000f74 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f74:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f76:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f78:	d3f9      	bcc.n	8000f6e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f7a:	4a0b      	ldr	r2, [pc, #44]	; (8000fa8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000f7c:	4c0b      	ldr	r4, [pc, #44]	; (8000fac <LoopForever+0x16>)
  movs r3, #0
 8000f7e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f80:	e001      	b.n	8000f86 <LoopFillZerobss>

08000f82 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f82:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f84:	3204      	adds	r2, #4

08000f86 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f86:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f88:	d3fb      	bcc.n	8000f82 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000f8a:	f7ff fe48 	bl	8000c1e <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8000f8e:	f002 f9a7 	bl	80032e0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000f92:	f7ff f945 	bl	8000220 <main>

08000f96 <LoopForever>:

LoopForever:
    b LoopForever
 8000f96:	e7fe      	b.n	8000f96 <LoopForever>
  ldr   r0, =_estack
 8000f98:	20001000 	.word	0x20001000
  ldr r0, =_sdata
 8000f9c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000fa0:	200000a4 	.word	0x200000a4
  ldr r2, =_sidata
 8000fa4:	08003388 	.word	0x08003388
  ldr r2, =_sbss
 8000fa8:	200000a4 	.word	0x200000a4
  ldr r4, =_ebss
 8000fac:	2000048c 	.word	0x2000048c

08000fb0 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000fb0:	e7fe      	b.n	8000fb0 <ADC1_IRQHandler>
	...

08000fb4 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000fb8:	4b07      	ldr	r3, [pc, #28]	; (8000fd8 <HAL_Init+0x24>)
 8000fba:	681a      	ldr	r2, [r3, #0]
 8000fbc:	4b06      	ldr	r3, [pc, #24]	; (8000fd8 <HAL_Init+0x24>)
 8000fbe:	2110      	movs	r1, #16
 8000fc0:	430a      	orrs	r2, r1
 8000fc2:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000fc4:	2000      	movs	r0, #0
 8000fc6:	f000 f809 	bl	8000fdc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000fca:	f7ff fd1f 	bl	8000a0c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000fce:	2300      	movs	r3, #0
}
 8000fd0:	0018      	movs	r0, r3
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	bd80      	pop	{r7, pc}
 8000fd6:	46c0      	nop			; (mov r8, r8)
 8000fd8:	40022000 	.word	0x40022000

08000fdc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fdc:	b590      	push	{r4, r7, lr}
 8000fde:	b083      	sub	sp, #12
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000fe4:	4b14      	ldr	r3, [pc, #80]	; (8001038 <HAL_InitTick+0x5c>)
 8000fe6:	681c      	ldr	r4, [r3, #0]
 8000fe8:	4b14      	ldr	r3, [pc, #80]	; (800103c <HAL_InitTick+0x60>)
 8000fea:	781b      	ldrb	r3, [r3, #0]
 8000fec:	0019      	movs	r1, r3
 8000fee:	23fa      	movs	r3, #250	; 0xfa
 8000ff0:	0098      	lsls	r0, r3, #2
 8000ff2:	f7ff f889 	bl	8000108 <__udivsi3>
 8000ff6:	0003      	movs	r3, r0
 8000ff8:	0019      	movs	r1, r3
 8000ffa:	0020      	movs	r0, r4
 8000ffc:	f7ff f884 	bl	8000108 <__udivsi3>
 8001000:	0003      	movs	r3, r0
 8001002:	0018      	movs	r0, r3
 8001004:	f000 fd75 	bl	8001af2 <HAL_SYSTICK_Config>
 8001008:	1e03      	subs	r3, r0, #0
 800100a:	d001      	beq.n	8001010 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 800100c:	2301      	movs	r3, #1
 800100e:	e00f      	b.n	8001030 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	2b03      	cmp	r3, #3
 8001014:	d80b      	bhi.n	800102e <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001016:	6879      	ldr	r1, [r7, #4]
 8001018:	2301      	movs	r3, #1
 800101a:	425b      	negs	r3, r3
 800101c:	2200      	movs	r2, #0
 800101e:	0018      	movs	r0, r3
 8001020:	f000 fd52 	bl	8001ac8 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001024:	4b06      	ldr	r3, [pc, #24]	; (8001040 <HAL_InitTick+0x64>)
 8001026:	687a      	ldr	r2, [r7, #4]
 8001028:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 800102a:	2300      	movs	r3, #0
 800102c:	e000      	b.n	8001030 <HAL_InitTick+0x54>
    return HAL_ERROR;
 800102e:	2301      	movs	r3, #1
}
 8001030:	0018      	movs	r0, r3
 8001032:	46bd      	mov	sp, r7
 8001034:	b003      	add	sp, #12
 8001036:	bd90      	pop	{r4, r7, pc}
 8001038:	20000000 	.word	0x20000000
 800103c:	200000a0 	.word	0x200000a0
 8001040:	2000009c 	.word	0x2000009c

08001044 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001048:	4b05      	ldr	r3, [pc, #20]	; (8001060 <HAL_IncTick+0x1c>)
 800104a:	781b      	ldrb	r3, [r3, #0]
 800104c:	001a      	movs	r2, r3
 800104e:	4b05      	ldr	r3, [pc, #20]	; (8001064 <HAL_IncTick+0x20>)
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	18d2      	adds	r2, r2, r3
 8001054:	4b03      	ldr	r3, [pc, #12]	; (8001064 <HAL_IncTick+0x20>)
 8001056:	601a      	str	r2, [r3, #0]
}
 8001058:	46c0      	nop			; (mov r8, r8)
 800105a:	46bd      	mov	sp, r7
 800105c:	bd80      	pop	{r7, pc}
 800105e:	46c0      	nop			; (mov r8, r8)
 8001060:	200000a0 	.word	0x200000a0
 8001064:	20000488 	.word	0x20000488

08001068 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	af00      	add	r7, sp, #0
  return uwTick;
 800106c:	4b02      	ldr	r3, [pc, #8]	; (8001078 <HAL_GetTick+0x10>)
 800106e:	681b      	ldr	r3, [r3, #0]
}
 8001070:	0018      	movs	r0, r3
 8001072:	46bd      	mov	sp, r7
 8001074:	bd80      	pop	{r7, pc}
 8001076:	46c0      	nop			; (mov r8, r8)
 8001078:	20000488 	.word	0x20000488

0800107c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	b084      	sub	sp, #16
 8001080:	af00      	add	r7, sp, #0
 8001082:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001084:	230f      	movs	r3, #15
 8001086:	18fb      	adds	r3, r7, r3
 8001088:	2200      	movs	r2, #0
 800108a:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0U;
 800108c:	2300      	movs	r3, #0
 800108e:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if(hadc == NULL)
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	2b00      	cmp	r3, #0
 8001094:	d101      	bne.n	800109a <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 8001096:	2301      	movs	r3, #1
 8001098:	e125      	b.n	80012e6 <HAL_ADC_Init+0x26a>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d10a      	bne.n	80010b8 <HAL_ADC_Init+0x3c>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	2200      	movs	r2, #0
 80010a6:	63da      	str	r2, [r3, #60]	; 0x3c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	2234      	movs	r2, #52	; 0x34
 80010ac:	2100      	movs	r1, #0
 80010ae:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	0018      	movs	r0, r3
 80010b4:	f7ff fcce 	bl	8000a54 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */ 
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80010bc:	2210      	movs	r2, #16
 80010be:	4013      	ands	r3, r2
 80010c0:	d000      	beq.n	80010c4 <HAL_ADC_Init+0x48>
 80010c2:	e103      	b.n	80012cc <HAL_ADC_Init+0x250>
 80010c4:	230f      	movs	r3, #15
 80010c6:	18fb      	adds	r3, r7, r3
 80010c8:	781b      	ldrb	r3, [r3, #0]
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d000      	beq.n	80010d0 <HAL_ADC_Init+0x54>
 80010ce:	e0fd      	b.n	80012cc <HAL_ADC_Init+0x250>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	689b      	ldr	r3, [r3, #8]
 80010d6:	2204      	movs	r2, #4
 80010d8:	4013      	ands	r3, r2
      (tmp_hal_status == HAL_OK)                                &&
 80010da:	d000      	beq.n	80010de <HAL_ADC_Init+0x62>
 80010dc:	e0f6      	b.n	80012cc <HAL_ADC_Init+0x250>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80010e2:	4a83      	ldr	r2, [pc, #524]	; (80012f0 <HAL_ADC_Init+0x274>)
 80010e4:	4013      	ands	r3, r2
 80010e6:	2202      	movs	r2, #2
 80010e8:	431a      	orrs	r2, r3
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	639a      	str	r2, [r3, #56]	; 0x38
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - ADC clock mode                                                      */
    /*  - ADC clock prescaler                                                 */
    /*  - ADC resolution                                                      */
    if (ADC_IS_ENABLE(hadc) == RESET)
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	689b      	ldr	r3, [r3, #8]
 80010f4:	2203      	movs	r2, #3
 80010f6:	4013      	ands	r3, r2
 80010f8:	2b01      	cmp	r3, #1
 80010fa:	d112      	bne.n	8001122 <HAL_ADC_Init+0xa6>
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	2201      	movs	r2, #1
 8001104:	4013      	ands	r3, r2
 8001106:	2b01      	cmp	r3, #1
 8001108:	d009      	beq.n	800111e <HAL_ADC_Init+0xa2>
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	68da      	ldr	r2, [r3, #12]
 8001110:	2380      	movs	r3, #128	; 0x80
 8001112:	021b      	lsls	r3, r3, #8
 8001114:	401a      	ands	r2, r3
 8001116:	2380      	movs	r3, #128	; 0x80
 8001118:	021b      	lsls	r3, r3, #8
 800111a:	429a      	cmp	r2, r3
 800111c:	d101      	bne.n	8001122 <HAL_ADC_Init+0xa6>
 800111e:	2301      	movs	r3, #1
 8001120:	e000      	b.n	8001124 <HAL_ADC_Init+0xa8>
 8001122:	2300      	movs	r3, #0
 8001124:	2b00      	cmp	r3, #0
 8001126:	d116      	bne.n	8001156 <HAL_ADC_Init+0xda>
      /* parameters):                                                         */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() )                              */
     
      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	68db      	ldr	r3, [r3, #12]
 800112e:	2218      	movs	r2, #24
 8001130:	4393      	bics	r3, r2
 8001132:	0019      	movs	r1, r3
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	689a      	ldr	r2, [r3, #8]
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	430a      	orrs	r2, r1
 800113e:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES        ,
                 hadc->Init.Resolution );
      
      /* Configuration of ADC clock mode: clock source AHB or HSI with        */
      /* selectable prescaler                                                 */
      MODIFY_REG(hadc->Instance->CFGR2    ,
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	691b      	ldr	r3, [r3, #16]
 8001146:	009b      	lsls	r3, r3, #2
 8001148:	0899      	lsrs	r1, r3, #2
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	685a      	ldr	r2, [r3, #4]
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	430a      	orrs	r2, r1
 8001154:	611a      	str	r2, [r3, #16]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	68da      	ldr	r2, [r3, #12]
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	4964      	ldr	r1, [pc, #400]	; (80012f4 <HAL_ADC_Init+0x278>)
 8001162:	400a      	ands	r2, r1
 8001164:	60da      	str	r2, [r3, #12]
                                ADC_CFGR1_EXTEN   |
                                ADC_CFGR1_ALIGN   |
                                ADC_CFGR1_SCANDIR |
                                ADC_CFGR1_DMACFG   );

    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	7e1b      	ldrb	r3, [r3, #24]
 800116a:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	7e5b      	ldrb	r3, [r3, #25]
 8001170:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001172:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	7e9b      	ldrb	r3, [r3, #26]
 8001178:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 800117a:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001180:	2b01      	cmp	r3, #1
 8001182:	d002      	beq.n	800118a <HAL_ADC_Init+0x10e>
 8001184:	2380      	movs	r3, #128	; 0x80
 8001186:	015b      	lsls	r3, r3, #5
 8001188:	e000      	b.n	800118c <HAL_ADC_Init+0x110>
 800118a:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 800118c:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                             |
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8001192:	431a      	orrs	r2, r3
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	691b      	ldr	r3, [r3, #16]
 8001198:	2b02      	cmp	r3, #2
 800119a:	d101      	bne.n	80011a0 <HAL_ADC_Init+0x124>
 800119c:	2304      	movs	r3, #4
 800119e:	e000      	b.n	80011a2 <HAL_ADC_Init+0x126>
 80011a0:	2300      	movs	r3, #0
                 hadc->Init.DataAlign                                             |
 80011a2:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	2124      	movs	r1, #36	; 0x24
 80011a8:	5c5b      	ldrb	r3, [r3, r1]
 80011aa:	005b      	lsls	r3, r3, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 80011ac:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80011ae:	68ba      	ldr	r2, [r7, #8]
 80011b0:	4313      	orrs	r3, r2
 80011b2:	60bb      	str	r3, [r7, #8]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	7edb      	ldrb	r3, [r3, #27]
 80011b8:	2b01      	cmp	r3, #1
 80011ba:	d115      	bne.n	80011e8 <HAL_ADC_Init+0x16c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	7e9b      	ldrb	r3, [r3, #26]
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d105      	bne.n	80011d0 <HAL_ADC_Init+0x154>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 80011c4:	68bb      	ldr	r3, [r7, #8]
 80011c6:	2280      	movs	r2, #128	; 0x80
 80011c8:	0252      	lsls	r2, r2, #9
 80011ca:	4313      	orrs	r3, r2
 80011cc:	60bb      	str	r3, [r7, #8]
 80011ce:	e00b      	b.n	80011e8 <HAL_ADC_Init+0x16c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80011d4:	2220      	movs	r2, #32
 80011d6:	431a      	orrs	r2, r3
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	639a      	str	r2, [r3, #56]	; 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80011e0:	2201      	movs	r2, #1
 80011e2:	431a      	orrs	r2, r3
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	63da      	str	r2, [r3, #60]	; 0x3c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	69da      	ldr	r2, [r3, #28]
 80011ec:	23c2      	movs	r3, #194	; 0xc2
 80011ee:	33ff      	adds	r3, #255	; 0xff
 80011f0:	429a      	cmp	r2, r3
 80011f2:	d007      	beq.n	8001204 <HAL_ADC_Init+0x188>
    {
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	69da      	ldr	r2, [r3, #28]
                    hadc->Init.ExternalTrigConvEdge );
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	6a1b      	ldr	r3, [r3, #32]
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 80011fc:	4313      	orrs	r3, r2
 80011fe:	68ba      	ldr	r2, [r7, #8]
 8001200:	4313      	orrs	r3, r2
 8001202:	60bb      	str	r3, [r7, #8]
    }
    
    /* Update ADC configuration register with previous settings */
    hadc->Instance->CFGR1 |= tmpCFGR1;
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	68d9      	ldr	r1, [r3, #12]
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	68ba      	ldr	r2, [r7, #8]
 8001210:	430a      	orrs	r2, r1
 8001212:	60da      	str	r2, [r3, #12]
    /* Management of parameters "SamplingTimeCommon" and "SamplingTime"       */
    /* (obsolete): sampling time set in this function if parameter            */
    /*  "SamplingTimeCommon" has been set to a valid sampling time.           */
    /* Otherwise, sampling time is set into ADC channel initialization        */
    /* structure with parameter "SamplingTime" (obsolete).                    */
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001218:	2380      	movs	r3, #128	; 0x80
 800121a:	055b      	lsls	r3, r3, #21
 800121c:	429a      	cmp	r2, r3
 800121e:	d01b      	beq.n	8001258 <HAL_ADC_Init+0x1dc>
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001224:	2b01      	cmp	r3, #1
 8001226:	d017      	beq.n	8001258 <HAL_ADC_Init+0x1dc>
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800122c:	2b02      	cmp	r3, #2
 800122e:	d013      	beq.n	8001258 <HAL_ADC_Init+0x1dc>
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001234:	2b03      	cmp	r3, #3
 8001236:	d00f      	beq.n	8001258 <HAL_ADC_Init+0x1dc>
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800123c:	2b04      	cmp	r3, #4
 800123e:	d00b      	beq.n	8001258 <HAL_ADC_Init+0x1dc>
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001244:	2b05      	cmp	r3, #5
 8001246:	d007      	beq.n	8001258 <HAL_ADC_Init+0x1dc>
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800124c:	2b06      	cmp	r3, #6
 800124e:	d003      	beq.n	8001258 <HAL_ADC_Init+0x1dc>
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001254:	2b07      	cmp	r3, #7
 8001256:	d112      	bne.n	800127e <HAL_ADC_Init+0x202>
    {
      /* Channel sampling time configuration */
      /* Clear the old sample time */
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	695a      	ldr	r2, [r3, #20]
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	2107      	movs	r1, #7
 8001264:	438a      	bics	r2, r1
 8001266:	615a      	str	r2, [r3, #20]
      
      /* Set the new sample time */
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	6959      	ldr	r1, [r3, #20]
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001272:	2207      	movs	r2, #7
 8001274:	401a      	ands	r2, r3
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	430a      	orrs	r2, r1
 800127c:	615a      	str	r2, [r3, #20]
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	68db      	ldr	r3, [r3, #12]
 8001284:	4a1c      	ldr	r2, [pc, #112]	; (80012f8 <HAL_ADC_Init+0x27c>)
 8001286:	4013      	ands	r3, r2
 8001288:	68ba      	ldr	r2, [r7, #8]
 800128a:	429a      	cmp	r2, r3
 800128c:	d10b      	bne.n	80012a6 <HAL_ADC_Init+0x22a>
         == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	2200      	movs	r2, #0
 8001292:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001298:	2203      	movs	r2, #3
 800129a:	4393      	bics	r3, r2
 800129c:	2201      	movs	r2, #1
 800129e:	431a      	orrs	r2, r3
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	639a      	str	r2, [r3, #56]	; 0x38
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 80012a4:	e01c      	b.n	80012e0 <HAL_ADC_Init+0x264>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80012aa:	2212      	movs	r2, #18
 80012ac:	4393      	bics	r3, r2
 80012ae:	2210      	movs	r2, #16
 80012b0:	431a      	orrs	r2, r3
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80012ba:	2201      	movs	r2, #1
 80012bc:	431a      	orrs	r2, r3
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	63da      	str	r2, [r3, #60]	; 0x3c
      
      tmp_hal_status = HAL_ERROR;
 80012c2:	230f      	movs	r3, #15
 80012c4:	18fb      	adds	r3, r7, r3
 80012c6:	2201      	movs	r2, #1
 80012c8:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 80012ca:	e009      	b.n	80012e0 <HAL_ADC_Init+0x264>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80012d0:	2210      	movs	r2, #16
 80012d2:	431a      	orrs	r2, r3
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	639a      	str	r2, [r3, #56]	; 0x38
        
    tmp_hal_status = HAL_ERROR;
 80012d8:	230f      	movs	r3, #15
 80012da:	18fb      	adds	r3, r7, r3
 80012dc:	2201      	movs	r2, #1
 80012de:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80012e0:	230f      	movs	r3, #15
 80012e2:	18fb      	adds	r3, r7, r3
 80012e4:	781b      	ldrb	r3, [r3, #0]
}
 80012e6:	0018      	movs	r0, r3
 80012e8:	46bd      	mov	sp, r7
 80012ea:	b004      	add	sp, #16
 80012ec:	bd80      	pop	{r7, pc}
 80012ee:	46c0      	nop			; (mov r8, r8)
 80012f0:	fffffefd 	.word	0xfffffefd
 80012f4:	fffe0219 	.word	0xfffe0219
 80012f8:	833fffe7 	.word	0x833fffe7

080012fc <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80012fc:	b590      	push	{r4, r7, lr}
 80012fe:	b085      	sub	sp, #20
 8001300:	af00      	add	r7, sp, #0
 8001302:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001304:	230f      	movs	r3, #15
 8001306:	18fb      	adds	r3, r7, r3
 8001308:	2200      	movs	r2, #0
 800130a:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	689b      	ldr	r3, [r3, #8]
 8001312:	2204      	movs	r2, #4
 8001314:	4013      	ands	r3, r2
 8001316:	d138      	bne.n	800138a <HAL_ADC_Start+0x8e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	2234      	movs	r2, #52	; 0x34
 800131c:	5c9b      	ldrb	r3, [r3, r2]
 800131e:	2b01      	cmp	r3, #1
 8001320:	d101      	bne.n	8001326 <HAL_ADC_Start+0x2a>
 8001322:	2302      	movs	r3, #2
 8001324:	e038      	b.n	8001398 <HAL_ADC_Start+0x9c>
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	2234      	movs	r2, #52	; 0x34
 800132a:	2101      	movs	r1, #1
 800132c:	5499      	strb	r1, [r3, r2]
      
    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware.                                   */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	7e5b      	ldrb	r3, [r3, #25]
 8001332:	2b01      	cmp	r3, #1
 8001334:	d007      	beq.n	8001346 <HAL_ADC_Start+0x4a>
    {
      tmp_hal_status = ADC_Enable(hadc);
 8001336:	230f      	movs	r3, #15
 8001338:	18fc      	adds	r4, r7, r3
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	0018      	movs	r0, r3
 800133e:	f000 fa05 	bl	800174c <ADC_Enable>
 8001342:	0003      	movs	r3, r0
 8001344:	7023      	strb	r3, [r4, #0]
    }
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001346:	230f      	movs	r3, #15
 8001348:	18fb      	adds	r3, r7, r3
 800134a:	781b      	ldrb	r3, [r3, #0]
 800134c:	2b00      	cmp	r3, #0
 800134e:	d120      	bne.n	8001392 <HAL_ADC_Start+0x96>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001354:	4a12      	ldr	r2, [pc, #72]	; (80013a0 <HAL_ADC_Start+0xa4>)
 8001356:	4013      	ands	r3, r2
 8001358:	2280      	movs	r2, #128	; 0x80
 800135a:	0052      	lsls	r2, r2, #1
 800135c:	431a      	orrs	r2, r3
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	2200      	movs	r2, #0
 8001366:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	2234      	movs	r2, #52	; 0x34
 800136c:	2100      	movs	r1, #0
 800136e:	5499      	strb	r1, [r3, r2]
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	221c      	movs	r2, #28
 8001376:	601a      	str	r2, [r3, #0]
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	689a      	ldr	r2, [r3, #8]
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	2104      	movs	r1, #4
 8001384:	430a      	orrs	r2, r1
 8001386:	609a      	str	r2, [r3, #8]
 8001388:	e003      	b.n	8001392 <HAL_ADC_Start+0x96>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800138a:	230f      	movs	r3, #15
 800138c:	18fb      	adds	r3, r7, r3
 800138e:	2202      	movs	r2, #2
 8001390:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001392:	230f      	movs	r3, #15
 8001394:	18fb      	adds	r3, r7, r3
 8001396:	781b      	ldrb	r3, [r3, #0]
}
 8001398:	0018      	movs	r0, r3
 800139a:	46bd      	mov	sp, r7
 800139c:	b005      	add	sp, #20
 800139e:	bd90      	pop	{r4, r7, pc}
 80013a0:	fffff0fe 	.word	0xfffff0fe

080013a4 <HAL_ADC_Stop>:
  * @brief  Stop ADC conversion of regular group, disable ADC peripheral.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{ 
 80013a4:	b5b0      	push	{r4, r5, r7, lr}
 80013a6:	b084      	sub	sp, #16
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80013ac:	230f      	movs	r3, #15
 80013ae:	18fb      	adds	r3, r7, r3
 80013b0:	2200      	movs	r2, #0
 80013b2:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	2234      	movs	r2, #52	; 0x34
 80013b8:	5c9b      	ldrb	r3, [r3, r2]
 80013ba:	2b01      	cmp	r3, #1
 80013bc:	d101      	bne.n	80013c2 <HAL_ADC_Stop+0x1e>
 80013be:	2302      	movs	r3, #2
 80013c0:	e02a      	b.n	8001418 <HAL_ADC_Stop+0x74>
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	2234      	movs	r2, #52	; 0x34
 80013c6:	2101      	movs	r1, #1
 80013c8:	5499      	strb	r1, [r3, r2]
  
  /* 1. Stop potential conversion on going, on regular group */
  tmp_hal_status = ADC_ConversionStop(hadc);
 80013ca:	250f      	movs	r5, #15
 80013cc:	197c      	adds	r4, r7, r5
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	0018      	movs	r0, r3
 80013d2:	f000 faa1 	bl	8001918 <ADC_ConversionStop>
 80013d6:	0003      	movs	r3, r0
 80013d8:	7023      	strb	r3, [r4, #0]
  
  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 80013da:	197b      	adds	r3, r7, r5
 80013dc:	781b      	ldrb	r3, [r3, #0]
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d113      	bne.n	800140a <HAL_ADC_Stop+0x66>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 80013e2:	250f      	movs	r5, #15
 80013e4:	197c      	adds	r4, r7, r5
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	0018      	movs	r0, r3
 80013ea:	f000 fa2b 	bl	8001844 <ADC_Disable>
 80013ee:	0003      	movs	r3, r0
 80013f0:	7023      	strb	r3, [r4, #0]
    
    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 80013f2:	197b      	adds	r3, r7, r5
 80013f4:	781b      	ldrb	r3, [r3, #0]
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d107      	bne.n	800140a <HAL_ADC_Stop+0x66>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80013fe:	4a08      	ldr	r2, [pc, #32]	; (8001420 <HAL_ADC_Stop+0x7c>)
 8001400:	4013      	ands	r3, r2
 8001402:	2201      	movs	r2, #1
 8001404:	431a      	orrs	r2, r3
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	2234      	movs	r2, #52	; 0x34
 800140e:	2100      	movs	r1, #0
 8001410:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 8001412:	230f      	movs	r3, #15
 8001414:	18fb      	adds	r3, r7, r3
 8001416:	781b      	ldrb	r3, [r3, #0]
}
 8001418:	0018      	movs	r0, r3
 800141a:	46bd      	mov	sp, r7
 800141c:	b004      	add	sp, #16
 800141e:	bdb0      	pop	{r4, r5, r7, pc}
 8001420:	fffffefe 	.word	0xfffffefe

08001424 <HAL_ADC_PollForConversion>:
  * @param  hadc ADC handle
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	b084      	sub	sp, #16
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]
 800142c:	6039      	str	r1, [r7, #0]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	695b      	ldr	r3, [r3, #20]
 8001432:	2b08      	cmp	r3, #8
 8001434:	d102      	bne.n	800143c <HAL_ADC_PollForConversion+0x18>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 8001436:	2308      	movs	r3, #8
 8001438:	60fb      	str	r3, [r7, #12]
 800143a:	e014      	b.n	8001466 <HAL_ADC_PollForConversion+0x42>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	68db      	ldr	r3, [r3, #12]
 8001442:	2201      	movs	r2, #1
 8001444:	4013      	ands	r3, r2
 8001446:	2b01      	cmp	r3, #1
 8001448:	d10b      	bne.n	8001462 <HAL_ADC_PollForConversion+0x3e>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800144e:	2220      	movs	r2, #32
 8001450:	431a      	orrs	r2, r3
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	639a      	str	r2, [r3, #56]	; 0x38
      
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	2234      	movs	r2, #52	; 0x34
 800145a:	2100      	movs	r1, #0
 800145c:	5499      	strb	r1, [r3, r2]
      
      return HAL_ERROR;
 800145e:	2301      	movs	r3, #1
 8001460:	e06b      	b.n	800153a <HAL_ADC_PollForConversion+0x116>
    }
    else
    {
      tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 8001462:	230c      	movs	r3, #12
 8001464:	60fb      	str	r3, [r7, #12]
    }
  }
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8001466:	f7ff fdff 	bl	8001068 <HAL_GetTick>
 800146a:	0003      	movs	r3, r0
 800146c:	60bb      	str	r3, [r7, #8]
  
  /* Wait until End of Conversion flag is raised */
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 800146e:	e019      	b.n	80014a4 <HAL_ADC_PollForConversion+0x80>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8001470:	683b      	ldr	r3, [r7, #0]
 8001472:	3301      	adds	r3, #1
 8001474:	d016      	beq.n	80014a4 <HAL_ADC_PollForConversion+0x80>
    {
      if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 8001476:	683b      	ldr	r3, [r7, #0]
 8001478:	2b00      	cmp	r3, #0
 800147a:	d007      	beq.n	800148c <HAL_ADC_PollForConversion+0x68>
 800147c:	f7ff fdf4 	bl	8001068 <HAL_GetTick>
 8001480:	0002      	movs	r2, r0
 8001482:	68bb      	ldr	r3, [r7, #8]
 8001484:	1ad3      	subs	r3, r2, r3
 8001486:	683a      	ldr	r2, [r7, #0]
 8001488:	429a      	cmp	r2, r3
 800148a:	d20b      	bcs.n	80014a4 <HAL_ADC_PollForConversion+0x80>
      {
        /* Update ADC state machine to timeout */
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001490:	2204      	movs	r2, #4
 8001492:	431a      	orrs	r2, r3
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	639a      	str	r2, [r3, #56]	; 0x38
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	2234      	movs	r2, #52	; 0x34
 800149c:	2100      	movs	r1, #0
 800149e:	5499      	strb	r1, [r3, r2]
        
        return HAL_TIMEOUT;
 80014a0:	2303      	movs	r3, #3
 80014a2:	e04a      	b.n	800153a <HAL_ADC_PollForConversion+0x116>
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	68fa      	ldr	r2, [r7, #12]
 80014ac:	4013      	ands	r3, r2
 80014ae:	d0df      	beq.n	8001470 <HAL_ADC_PollForConversion+0x4c>
      }
    }
  }
    
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80014b4:	2280      	movs	r2, #128	; 0x80
 80014b6:	0092      	lsls	r2, r2, #2
 80014b8:	431a      	orrs	r2, r3
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	68da      	ldr	r2, [r3, #12]
 80014c4:	23c0      	movs	r3, #192	; 0xc0
 80014c6:	011b      	lsls	r3, r3, #4
 80014c8:	4013      	ands	r3, r2
 80014ca:	d12d      	bne.n	8001528 <HAL_ADC_PollForConversion+0x104>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	7e9b      	ldrb	r3, [r3, #26]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d129      	bne.n	8001528 <HAL_ADC_PollForConversion+0x104>
  {
    /* If End of Sequence is reached, disable interrupts */
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	2208      	movs	r2, #8
 80014dc:	4013      	ands	r3, r2
 80014de:	2b08      	cmp	r3, #8
 80014e0:	d122      	bne.n	8001528 <HAL_ADC_PollForConversion+0x104>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	689b      	ldr	r3, [r3, #8]
 80014e8:	2204      	movs	r2, #4
 80014ea:	4013      	ands	r3, r2
 80014ec:	d110      	bne.n	8001510 <HAL_ADC_PollForConversion+0xec>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	685a      	ldr	r2, [r3, #4]
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	210c      	movs	r1, #12
 80014fa:	438a      	bics	r2, r1
 80014fc:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001502:	4a10      	ldr	r2, [pc, #64]	; (8001544 <HAL_ADC_PollForConversion+0x120>)
 8001504:	4013      	ands	r3, r2
 8001506:	2201      	movs	r2, #1
 8001508:	431a      	orrs	r2, r3
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	639a      	str	r2, [r3, #56]	; 0x38
 800150e:	e00b      	b.n	8001528 <HAL_ADC_PollForConversion+0x104>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001514:	2220      	movs	r2, #32
 8001516:	431a      	orrs	r2, r3
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	639a      	str	r2, [r3, #56]	; 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001520:	2201      	movs	r2, #1
 8001522:	431a      	orrs	r2, r3
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  
  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	7e1b      	ldrb	r3, [r3, #24]
 800152c:	2b00      	cmp	r3, #0
 800152e:	d103      	bne.n	8001538 <HAL_ADC_PollForConversion+0x114>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	220c      	movs	r2, #12
 8001536:	601a      	str	r2, [r3, #0]
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001538:	2300      	movs	r3, #0
}
 800153a:	0018      	movs	r0, r3
 800153c:	46bd      	mov	sp, r7
 800153e:	b004      	add	sp, #16
 8001540:	bd80      	pop	{r7, pc}
 8001542:	46c0      	nop			; (mov r8, r8)
 8001544:	fffffefe 	.word	0xfffffefe

08001548 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	b082      	sub	sp, #8
 800154c:	af00      	add	r7, sp, #0
 800154e:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8001556:	0018      	movs	r0, r3
 8001558:	46bd      	mov	sp, r7
 800155a:	b002      	add	sp, #8
 800155c:	bd80      	pop	{r7, pc}
	...

08001560 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	b084      	sub	sp, #16
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]
 8001568:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800156a:	230f      	movs	r3, #15
 800156c:	18fb      	adds	r3, r7, r3
 800156e:	2200      	movs	r2, #0
 8001570:	701a      	strb	r2, [r3, #0]
  __IO uint32_t wait_loop_index = 0U;
 8001572:	2300      	movs	r3, #0
 8001574:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800157a:	2380      	movs	r3, #128	; 0x80
 800157c:	055b      	lsls	r3, r3, #21
 800157e:	429a      	cmp	r2, r3
 8001580:	d011      	beq.n	80015a6 <HAL_ADC_ConfigChannel+0x46>
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001586:	2b01      	cmp	r3, #1
 8001588:	d00d      	beq.n	80015a6 <HAL_ADC_ConfigChannel+0x46>
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800158e:	2b02      	cmp	r3, #2
 8001590:	d009      	beq.n	80015a6 <HAL_ADC_ConfigChannel+0x46>
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001596:	2b03      	cmp	r3, #3
 8001598:	d005      	beq.n	80015a6 <HAL_ADC_ConfigChannel+0x46>
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800159e:	2b04      	cmp	r3, #4
 80015a0:	d001      	beq.n	80015a6 <HAL_ADC_ConfigChannel+0x46>
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  {
    assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	2234      	movs	r2, #52	; 0x34
 80015aa:	5c9b      	ldrb	r3, [r3, r2]
 80015ac:	2b01      	cmp	r3, #1
 80015ae:	d101      	bne.n	80015b4 <HAL_ADC_ConfigChannel+0x54>
 80015b0:	2302      	movs	r3, #2
 80015b2:	e0bb      	b.n	800172c <HAL_ADC_ConfigChannel+0x1cc>
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	2234      	movs	r2, #52	; 0x34
 80015b8:	2101      	movs	r1, #1
 80015ba:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	689b      	ldr	r3, [r3, #8]
 80015c2:	2204      	movs	r2, #4
 80015c4:	4013      	ands	r3, r2
 80015c6:	d000      	beq.n	80015ca <HAL_ADC_ConfigChannel+0x6a>
 80015c8:	e09f      	b.n	800170a <HAL_ADC_ConfigChannel+0x1aa>
  {
    /* Configure channel: depending on rank setting, add it or remove it from */
    /* ADC conversion sequencer.                                              */
    if (sConfig->Rank != ADC_RANK_NONE)
 80015ca:	683b      	ldr	r3, [r7, #0]
 80015cc:	685b      	ldr	r3, [r3, #4]
 80015ce:	4a59      	ldr	r2, [pc, #356]	; (8001734 <HAL_ADC_ConfigChannel+0x1d4>)
 80015d0:	4293      	cmp	r3, r2
 80015d2:	d100      	bne.n	80015d6 <HAL_ADC_ConfigChannel+0x76>
 80015d4:	e077      	b.n	80016c6 <HAL_ADC_ConfigChannel+0x166>
    {
      /* Regular sequence configuration */
      /* Set the channel selection register from the selected channel */
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	6a99      	ldr	r1, [r3, #40]	; 0x28
 80015dc:	683b      	ldr	r3, [r7, #0]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	2201      	movs	r2, #1
 80015e2:	409a      	lsls	r2, r3
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	430a      	orrs	r2, r1
 80015ea:	629a      	str	r2, [r3, #40]	; 0x28
      /* Channel sampling time configuration */
      /* Management of parameters "SamplingTimeCommon" and "SamplingTime"     */
      /* (obsolete): sampling time set in this function with                  */
      /* parameter "SamplingTime" (obsolete) only if not already set into     */
      /* ADC initialization structure with parameter "SamplingTimeCommon".    */
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80015f0:	2380      	movs	r3, #128	; 0x80
 80015f2:	055b      	lsls	r3, r3, #21
 80015f4:	429a      	cmp	r2, r3
 80015f6:	d037      	beq.n	8001668 <HAL_ADC_ConfigChannel+0x108>
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015fc:	2b01      	cmp	r3, #1
 80015fe:	d033      	beq.n	8001668 <HAL_ADC_ConfigChannel+0x108>
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001604:	2b02      	cmp	r3, #2
 8001606:	d02f      	beq.n	8001668 <HAL_ADC_ConfigChannel+0x108>
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800160c:	2b03      	cmp	r3, #3
 800160e:	d02b      	beq.n	8001668 <HAL_ADC_ConfigChannel+0x108>
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001614:	2b04      	cmp	r3, #4
 8001616:	d027      	beq.n	8001668 <HAL_ADC_ConfigChannel+0x108>
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800161c:	2b05      	cmp	r3, #5
 800161e:	d023      	beq.n	8001668 <HAL_ADC_ConfigChannel+0x108>
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001624:	2b06      	cmp	r3, #6
 8001626:	d01f      	beq.n	8001668 <HAL_ADC_ConfigChannel+0x108>
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800162c:	2b07      	cmp	r3, #7
 800162e:	d01b      	beq.n	8001668 <HAL_ADC_ConfigChannel+0x108>
      {
        /* Modify sampling time if needed (not needed in case of reoccurrence */
        /* for several channels programmed consecutively into the sequencer)  */
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 8001630:	683b      	ldr	r3, [r7, #0]
 8001632:	689a      	ldr	r2, [r3, #8]
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	695b      	ldr	r3, [r3, #20]
 800163a:	2107      	movs	r1, #7
 800163c:	400b      	ands	r3, r1
 800163e:	429a      	cmp	r2, r3
 8001640:	d012      	beq.n	8001668 <HAL_ADC_ConfigChannel+0x108>
        {
          /* Channel sampling time configuration */
          /* Clear the old sample time */
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	695a      	ldr	r2, [r3, #20]
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	2107      	movs	r1, #7
 800164e:	438a      	bics	r2, r1
 8001650:	615a      	str	r2, [r3, #20]
          
          /* Set the new sample time */
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	6959      	ldr	r1, [r3, #20]
 8001658:	683b      	ldr	r3, [r7, #0]
 800165a:	689b      	ldr	r3, [r3, #8]
 800165c:	2207      	movs	r2, #7
 800165e:	401a      	ands	r2, r3
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	430a      	orrs	r2, r1
 8001666:	615a      	str	r2, [r3, #20]
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001668:	683b      	ldr	r3, [r7, #0]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	2b10      	cmp	r3, #16
 800166e:	d003      	beq.n	8001678 <HAL_ADC_ConfigChannel+0x118>
 8001670:	683b      	ldr	r3, [r7, #0]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	2b11      	cmp	r3, #17
 8001676:	d152      	bne.n	800171e <HAL_ADC_ConfigChannel+0x1be>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path. */
        /* If Channel_17 is selected, enable VREFINT measurement path. */
        /* If Channel_18 is selected, enable VBAT measurement path. */
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8001678:	4b2f      	ldr	r3, [pc, #188]	; (8001738 <HAL_ADC_ConfigChannel+0x1d8>)
 800167a:	6819      	ldr	r1, [r3, #0]
 800167c:	683b      	ldr	r3, [r7, #0]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	2b10      	cmp	r3, #16
 8001682:	d102      	bne.n	800168a <HAL_ADC_ConfigChannel+0x12a>
 8001684:	2380      	movs	r3, #128	; 0x80
 8001686:	041b      	lsls	r3, r3, #16
 8001688:	e001      	b.n	800168e <HAL_ADC_ConfigChannel+0x12e>
 800168a:	2380      	movs	r3, #128	; 0x80
 800168c:	03db      	lsls	r3, r3, #15
 800168e:	4a2a      	ldr	r2, [pc, #168]	; (8001738 <HAL_ADC_ConfigChannel+0x1d8>)
 8001690:	430b      	orrs	r3, r1
 8001692:	6013      	str	r3, [r2, #0]
        
        /* If Temp. sensor is selected, wait for stabilization delay */
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001694:	683b      	ldr	r3, [r7, #0]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	2b10      	cmp	r3, #16
 800169a:	d140      	bne.n	800171e <HAL_ADC_ConfigChannel+0x1be>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800169c:	4b27      	ldr	r3, [pc, #156]	; (800173c <HAL_ADC_ConfigChannel+0x1dc>)
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	4927      	ldr	r1, [pc, #156]	; (8001740 <HAL_ADC_ConfigChannel+0x1e0>)
 80016a2:	0018      	movs	r0, r3
 80016a4:	f7fe fd30 	bl	8000108 <__udivsi3>
 80016a8:	0003      	movs	r3, r0
 80016aa:	001a      	movs	r2, r3
 80016ac:	0013      	movs	r3, r2
 80016ae:	009b      	lsls	r3, r3, #2
 80016b0:	189b      	adds	r3, r3, r2
 80016b2:	005b      	lsls	r3, r3, #1
 80016b4:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80016b6:	e002      	b.n	80016be <HAL_ADC_ConfigChannel+0x15e>
          {
            wait_loop_index--;
 80016b8:	68bb      	ldr	r3, [r7, #8]
 80016ba:	3b01      	subs	r3, #1
 80016bc:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80016be:	68bb      	ldr	r3, [r7, #8]
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d1f9      	bne.n	80016b8 <HAL_ADC_ConfigChannel+0x158>
 80016c4:	e02b      	b.n	800171e <HAL_ADC_ConfigChannel+0x1be>
    }
    else
    {
      /* Regular sequence configuration */
      /* Reset the channel selection register from the selected channel */
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80016cc:	683b      	ldr	r3, [r7, #0]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	2101      	movs	r1, #1
 80016d2:	4099      	lsls	r1, r3
 80016d4:	000b      	movs	r3, r1
 80016d6:	43d9      	mvns	r1, r3
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	400a      	ands	r2, r1
 80016de:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
      /* internal measurement paths disable: If internal channel selected,    */
      /* disable dedicated internal buffers and path.                         */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80016e0:	683b      	ldr	r3, [r7, #0]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	2b10      	cmp	r3, #16
 80016e6:	d003      	beq.n	80016f0 <HAL_ADC_ConfigChannel+0x190>
 80016e8:	683b      	ldr	r3, [r7, #0]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	2b11      	cmp	r3, #17
 80016ee:	d116      	bne.n	800171e <HAL_ADC_ConfigChannel+0x1be>
      {
        /* If Channel_16 is selected, disable Temp. sensor measurement path. */
        /* If Channel_17 is selected, disable VREFINT measurement path. */
        /* If Channel_18 is selected, disable VBAT measurement path. */
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 80016f0:	4b11      	ldr	r3, [pc, #68]	; (8001738 <HAL_ADC_ConfigChannel+0x1d8>)
 80016f2:	6819      	ldr	r1, [r3, #0]
 80016f4:	683b      	ldr	r3, [r7, #0]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	2b10      	cmp	r3, #16
 80016fa:	d101      	bne.n	8001700 <HAL_ADC_ConfigChannel+0x1a0>
 80016fc:	4a11      	ldr	r2, [pc, #68]	; (8001744 <HAL_ADC_ConfigChannel+0x1e4>)
 80016fe:	e000      	b.n	8001702 <HAL_ADC_ConfigChannel+0x1a2>
 8001700:	4a11      	ldr	r2, [pc, #68]	; (8001748 <HAL_ADC_ConfigChannel+0x1e8>)
 8001702:	4b0d      	ldr	r3, [pc, #52]	; (8001738 <HAL_ADC_ConfigChannel+0x1d8>)
 8001704:	400a      	ands	r2, r1
 8001706:	601a      	str	r2, [r3, #0]
 8001708:	e009      	b.n	800171e <HAL_ADC_ConfigChannel+0x1be>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800170e:	2220      	movs	r2, #32
 8001710:	431a      	orrs	r2, r3
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	639a      	str	r2, [r3, #56]	; 0x38
    
    tmp_hal_status = HAL_ERROR;
 8001716:	230f      	movs	r3, #15
 8001718:	18fb      	adds	r3, r7, r3
 800171a:	2201      	movs	r2, #1
 800171c:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	2234      	movs	r2, #52	; 0x34
 8001722:	2100      	movs	r1, #0
 8001724:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 8001726:	230f      	movs	r3, #15
 8001728:	18fb      	adds	r3, r7, r3
 800172a:	781b      	ldrb	r3, [r3, #0]
}
 800172c:	0018      	movs	r0, r3
 800172e:	46bd      	mov	sp, r7
 8001730:	b004      	add	sp, #16
 8001732:	bd80      	pop	{r7, pc}
 8001734:	00001001 	.word	0x00001001
 8001738:	40012708 	.word	0x40012708
 800173c:	20000000 	.word	0x20000000
 8001740:	000f4240 	.word	0x000f4240
 8001744:	ff7fffff 	.word	0xff7fffff
 8001748:	ffbfffff 	.word	0xffbfffff

0800174c <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	b084      	sub	sp, #16
 8001750:	af00      	add	r7, sp, #0
 8001752:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001754:	2300      	movs	r3, #0
 8001756:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8001758:	2300      	movs	r3, #0
 800175a:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	689b      	ldr	r3, [r3, #8]
 8001762:	2203      	movs	r2, #3
 8001764:	4013      	ands	r3, r2
 8001766:	2b01      	cmp	r3, #1
 8001768:	d112      	bne.n	8001790 <ADC_Enable+0x44>
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	2201      	movs	r2, #1
 8001772:	4013      	ands	r3, r2
 8001774:	2b01      	cmp	r3, #1
 8001776:	d009      	beq.n	800178c <ADC_Enable+0x40>
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	68da      	ldr	r2, [r3, #12]
 800177e:	2380      	movs	r3, #128	; 0x80
 8001780:	021b      	lsls	r3, r3, #8
 8001782:	401a      	ands	r2, r3
 8001784:	2380      	movs	r3, #128	; 0x80
 8001786:	021b      	lsls	r3, r3, #8
 8001788:	429a      	cmp	r2, r3
 800178a:	d101      	bne.n	8001790 <ADC_Enable+0x44>
 800178c:	2301      	movs	r3, #1
 800178e:	e000      	b.n	8001792 <ADC_Enable+0x46>
 8001790:	2300      	movs	r3, #0
 8001792:	2b00      	cmp	r3, #0
 8001794:	d14b      	bne.n	800182e <ADC_Enable+0xe2>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	689b      	ldr	r3, [r3, #8]
 800179c:	4a26      	ldr	r2, [pc, #152]	; (8001838 <ADC_Enable+0xec>)
 800179e:	4013      	ands	r3, r2
 80017a0:	d00d      	beq.n	80017be <ADC_Enable+0x72>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80017a6:	2210      	movs	r2, #16
 80017a8:	431a      	orrs	r2, r3
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	639a      	str	r2, [r3, #56]	; 0x38
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80017b2:	2201      	movs	r2, #1
 80017b4:	431a      	orrs	r2, r3
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	63da      	str	r2, [r3, #60]	; 0x3c
      
      return HAL_ERROR;
 80017ba:	2301      	movs	r3, #1
 80017bc:	e038      	b.n	8001830 <ADC_Enable+0xe4>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	689a      	ldr	r2, [r3, #8]
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	2101      	movs	r1, #1
 80017ca:	430a      	orrs	r2, r1
 80017cc:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80017ce:	4b1b      	ldr	r3, [pc, #108]	; (800183c <ADC_Enable+0xf0>)
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	491b      	ldr	r1, [pc, #108]	; (8001840 <ADC_Enable+0xf4>)
 80017d4:	0018      	movs	r0, r3
 80017d6:	f7fe fc97 	bl	8000108 <__udivsi3>
 80017da:	0003      	movs	r3, r0
 80017dc:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80017de:	e002      	b.n	80017e6 <ADC_Enable+0x9a>
    {
      wait_loop_index--;
 80017e0:	68bb      	ldr	r3, [r7, #8]
 80017e2:	3b01      	subs	r3, #1
 80017e4:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80017e6:	68bb      	ldr	r3, [r7, #8]
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d1f9      	bne.n	80017e0 <ADC_Enable+0x94>
    }

    /* Get tick count */
    tickstart = HAL_GetTick();
 80017ec:	f7ff fc3c 	bl	8001068 <HAL_GetTick>
 80017f0:	0003      	movs	r3, r0
 80017f2:	60fb      	str	r3, [r7, #12]
    
    /* Wait for ADC effectively enabled */
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80017f4:	e014      	b.n	8001820 <ADC_Enable+0xd4>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80017f6:	f7ff fc37 	bl	8001068 <HAL_GetTick>
 80017fa:	0002      	movs	r2, r0
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	1ad3      	subs	r3, r2, r3
 8001800:	2b02      	cmp	r3, #2
 8001802:	d90d      	bls.n	8001820 <ADC_Enable+0xd4>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001808:	2210      	movs	r2, #16
 800180a:	431a      	orrs	r2, r3
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	639a      	str	r2, [r3, #56]	; 0x38
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001814:	2201      	movs	r2, #1
 8001816:	431a      	orrs	r2, r3
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	63da      	str	r2, [r3, #60]	; 0x3c
      
        return HAL_ERROR;
 800181c:	2301      	movs	r3, #1
 800181e:	e007      	b.n	8001830 <ADC_Enable+0xe4>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	2201      	movs	r2, #1
 8001828:	4013      	ands	r3, r2
 800182a:	2b01      	cmp	r3, #1
 800182c:	d1e3      	bne.n	80017f6 <ADC_Enable+0xaa>
    }   
    
  }
   
  /* Return HAL status */
  return HAL_OK;
 800182e:	2300      	movs	r3, #0
}
 8001830:	0018      	movs	r0, r3
 8001832:	46bd      	mov	sp, r7
 8001834:	b004      	add	sp, #16
 8001836:	bd80      	pop	{r7, pc}
 8001838:	80000017 	.word	0x80000017
 800183c:	20000000 	.word	0x20000000
 8001840:	000f4240 	.word	0x000f4240

08001844 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	b084      	sub	sp, #16
 8001848:	af00      	add	r7, sp, #0
 800184a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800184c:	2300      	movs	r3, #0
 800184e:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	689b      	ldr	r3, [r3, #8]
 8001856:	2203      	movs	r2, #3
 8001858:	4013      	ands	r3, r2
 800185a:	2b01      	cmp	r3, #1
 800185c:	d112      	bne.n	8001884 <ADC_Disable+0x40>
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	2201      	movs	r2, #1
 8001866:	4013      	ands	r3, r2
 8001868:	2b01      	cmp	r3, #1
 800186a:	d009      	beq.n	8001880 <ADC_Disable+0x3c>
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	68da      	ldr	r2, [r3, #12]
 8001872:	2380      	movs	r3, #128	; 0x80
 8001874:	021b      	lsls	r3, r3, #8
 8001876:	401a      	ands	r2, r3
 8001878:	2380      	movs	r3, #128	; 0x80
 800187a:	021b      	lsls	r3, r3, #8
 800187c:	429a      	cmp	r2, r3
 800187e:	d101      	bne.n	8001884 <ADC_Disable+0x40>
 8001880:	2301      	movs	r3, #1
 8001882:	e000      	b.n	8001886 <ADC_Disable+0x42>
 8001884:	2300      	movs	r3, #0
 8001886:	2b00      	cmp	r3, #0
 8001888:	d041      	beq.n	800190e <ADC_Disable+0xca>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	689b      	ldr	r3, [r3, #8]
 8001890:	2205      	movs	r2, #5
 8001892:	4013      	ands	r3, r2
 8001894:	2b01      	cmp	r3, #1
 8001896:	d110      	bne.n	80018ba <ADC_Disable+0x76>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	689a      	ldr	r2, [r3, #8]
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	2102      	movs	r1, #2
 80018a4:	430a      	orrs	r2, r1
 80018a6:	609a      	str	r2, [r3, #8]
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	2203      	movs	r2, #3
 80018ae:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80018b0:	f7ff fbda 	bl	8001068 <HAL_GetTick>
 80018b4:	0003      	movs	r3, r0
 80018b6:	60fb      	str	r3, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80018b8:	e022      	b.n	8001900 <ADC_Disable+0xbc>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80018be:	2210      	movs	r2, #16
 80018c0:	431a      	orrs	r2, r3
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	639a      	str	r2, [r3, #56]	; 0x38
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80018ca:	2201      	movs	r2, #1
 80018cc:	431a      	orrs	r2, r3
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	63da      	str	r2, [r3, #60]	; 0x3c
      return HAL_ERROR;
 80018d2:	2301      	movs	r3, #1
 80018d4:	e01c      	b.n	8001910 <ADC_Disable+0xcc>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80018d6:	f7ff fbc7 	bl	8001068 <HAL_GetTick>
 80018da:	0002      	movs	r2, r0
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	1ad3      	subs	r3, r2, r3
 80018e0:	2b02      	cmp	r3, #2
 80018e2:	d90d      	bls.n	8001900 <ADC_Disable+0xbc>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80018e8:	2210      	movs	r2, #16
 80018ea:	431a      	orrs	r2, r3
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	639a      	str	r2, [r3, #56]	; 0x38
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80018f4:	2201      	movs	r2, #1
 80018f6:	431a      	orrs	r2, r3
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	63da      	str	r2, [r3, #60]	; 0x3c
        
        return HAL_ERROR;
 80018fc:	2301      	movs	r3, #1
 80018fe:	e007      	b.n	8001910 <ADC_Disable+0xcc>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	689b      	ldr	r3, [r3, #8]
 8001906:	2201      	movs	r2, #1
 8001908:	4013      	ands	r3, r2
 800190a:	2b01      	cmp	r3, #1
 800190c:	d0e3      	beq.n	80018d6 <ADC_Disable+0x92>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800190e:	2300      	movs	r3, #0
}
 8001910:	0018      	movs	r0, r3
 8001912:	46bd      	mov	sp, r7
 8001914:	b004      	add	sp, #16
 8001916:	bd80      	pop	{r7, pc}

08001918 <ADC_ConversionStop>:
  *         stopped to disable the ADC.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef* hadc)
{
 8001918:	b580      	push	{r7, lr}
 800191a:	b084      	sub	sp, #16
 800191c:	af00      	add	r7, sp, #0
 800191e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001920:	2300      	movs	r3, #0
 8001922:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
    
  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc))
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	689b      	ldr	r3, [r3, #8]
 800192a:	2204      	movs	r2, #4
 800192c:	4013      	ands	r3, r2
 800192e:	d034      	beq.n	800199a <ADC_ConversionStop+0x82>
  {
    
    /* Stop potential conversion on going on regular group */
    /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	689b      	ldr	r3, [r3, #8]
 8001936:	2204      	movs	r2, #4
 8001938:	4013      	ands	r3, r2
 800193a:	2b04      	cmp	r3, #4
 800193c:	d10d      	bne.n	800195a <ADC_ConversionStop+0x42>
        HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)                  )
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	689b      	ldr	r3, [r3, #8]
 8001944:	2202      	movs	r2, #2
 8001946:	4013      	ands	r3, r2
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 8001948:	d107      	bne.n	800195a <ADC_ConversionStop+0x42>
    {
      /* Stop conversions on regular group */
      hadc->Instance->CR |= ADC_CR_ADSTP;
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	689a      	ldr	r2, [r3, #8]
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	2110      	movs	r1, #16
 8001956:	430a      	orrs	r2, r1
 8001958:	609a      	str	r2, [r3, #8]
    }
    
    /* Wait for conversion effectively stopped */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800195a:	f7ff fb85 	bl	8001068 <HAL_GetTick>
 800195e:	0003      	movs	r3, r0
 8001960:	60fb      	str	r3, [r7, #12]
      
    while((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 8001962:	e014      	b.n	800198e <ADC_ConversionStop+0x76>
    {
      if((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8001964:	f7ff fb80 	bl	8001068 <HAL_GetTick>
 8001968:	0002      	movs	r2, r0
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	1ad3      	subs	r3, r2, r3
 800196e:	2b02      	cmp	r3, #2
 8001970:	d90d      	bls.n	800198e <ADC_ConversionStop+0x76>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001976:	2210      	movs	r2, #16
 8001978:	431a      	orrs	r2, r3
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	639a      	str	r2, [r3, #56]	; 0x38
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001982:	2201      	movs	r2, #1
 8001984:	431a      	orrs	r2, r3
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	63da      	str	r2, [r3, #60]	; 0x3c
        
        return HAL_ERROR;
 800198a:	2301      	movs	r3, #1
 800198c:	e006      	b.n	800199c <ADC_ConversionStop+0x84>
    while((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	689b      	ldr	r3, [r3, #8]
 8001994:	2204      	movs	r2, #4
 8001996:	4013      	ands	r3, r2
 8001998:	d1e4      	bne.n	8001964 <ADC_ConversionStop+0x4c>
    }
    
  }
   
  /* Return HAL status */
  return HAL_OK;
 800199a:	2300      	movs	r3, #0
}
 800199c:	0018      	movs	r0, r3
 800199e:	46bd      	mov	sp, r7
 80019a0:	b004      	add	sp, #16
 80019a2:	bd80      	pop	{r7, pc}

080019a4 <__NVIC_SetPriority>:
{
 80019a4:	b590      	push	{r4, r7, lr}
 80019a6:	b083      	sub	sp, #12
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	0002      	movs	r2, r0
 80019ac:	6039      	str	r1, [r7, #0]
 80019ae:	1dfb      	adds	r3, r7, #7
 80019b0:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80019b2:	1dfb      	adds	r3, r7, #7
 80019b4:	781b      	ldrb	r3, [r3, #0]
 80019b6:	2b7f      	cmp	r3, #127	; 0x7f
 80019b8:	d828      	bhi.n	8001a0c <__NVIC_SetPriority+0x68>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80019ba:	4a2f      	ldr	r2, [pc, #188]	; (8001a78 <__NVIC_SetPriority+0xd4>)
 80019bc:	1dfb      	adds	r3, r7, #7
 80019be:	781b      	ldrb	r3, [r3, #0]
 80019c0:	b25b      	sxtb	r3, r3
 80019c2:	089b      	lsrs	r3, r3, #2
 80019c4:	33c0      	adds	r3, #192	; 0xc0
 80019c6:	009b      	lsls	r3, r3, #2
 80019c8:	589b      	ldr	r3, [r3, r2]
 80019ca:	1dfa      	adds	r2, r7, #7
 80019cc:	7812      	ldrb	r2, [r2, #0]
 80019ce:	0011      	movs	r1, r2
 80019d0:	2203      	movs	r2, #3
 80019d2:	400a      	ands	r2, r1
 80019d4:	00d2      	lsls	r2, r2, #3
 80019d6:	21ff      	movs	r1, #255	; 0xff
 80019d8:	4091      	lsls	r1, r2
 80019da:	000a      	movs	r2, r1
 80019dc:	43d2      	mvns	r2, r2
 80019de:	401a      	ands	r2, r3
 80019e0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80019e2:	683b      	ldr	r3, [r7, #0]
 80019e4:	019b      	lsls	r3, r3, #6
 80019e6:	22ff      	movs	r2, #255	; 0xff
 80019e8:	401a      	ands	r2, r3
 80019ea:	1dfb      	adds	r3, r7, #7
 80019ec:	781b      	ldrb	r3, [r3, #0]
 80019ee:	0018      	movs	r0, r3
 80019f0:	2303      	movs	r3, #3
 80019f2:	4003      	ands	r3, r0
 80019f4:	00db      	lsls	r3, r3, #3
 80019f6:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80019f8:	481f      	ldr	r0, [pc, #124]	; (8001a78 <__NVIC_SetPriority+0xd4>)
 80019fa:	1dfb      	adds	r3, r7, #7
 80019fc:	781b      	ldrb	r3, [r3, #0]
 80019fe:	b25b      	sxtb	r3, r3
 8001a00:	089b      	lsrs	r3, r3, #2
 8001a02:	430a      	orrs	r2, r1
 8001a04:	33c0      	adds	r3, #192	; 0xc0
 8001a06:	009b      	lsls	r3, r3, #2
 8001a08:	501a      	str	r2, [r3, r0]
}
 8001a0a:	e031      	b.n	8001a70 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001a0c:	4a1b      	ldr	r2, [pc, #108]	; (8001a7c <__NVIC_SetPriority+0xd8>)
 8001a0e:	1dfb      	adds	r3, r7, #7
 8001a10:	781b      	ldrb	r3, [r3, #0]
 8001a12:	0019      	movs	r1, r3
 8001a14:	230f      	movs	r3, #15
 8001a16:	400b      	ands	r3, r1
 8001a18:	3b08      	subs	r3, #8
 8001a1a:	089b      	lsrs	r3, r3, #2
 8001a1c:	3306      	adds	r3, #6
 8001a1e:	009b      	lsls	r3, r3, #2
 8001a20:	18d3      	adds	r3, r2, r3
 8001a22:	3304      	adds	r3, #4
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	1dfa      	adds	r2, r7, #7
 8001a28:	7812      	ldrb	r2, [r2, #0]
 8001a2a:	0011      	movs	r1, r2
 8001a2c:	2203      	movs	r2, #3
 8001a2e:	400a      	ands	r2, r1
 8001a30:	00d2      	lsls	r2, r2, #3
 8001a32:	21ff      	movs	r1, #255	; 0xff
 8001a34:	4091      	lsls	r1, r2
 8001a36:	000a      	movs	r2, r1
 8001a38:	43d2      	mvns	r2, r2
 8001a3a:	401a      	ands	r2, r3
 8001a3c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001a3e:	683b      	ldr	r3, [r7, #0]
 8001a40:	019b      	lsls	r3, r3, #6
 8001a42:	22ff      	movs	r2, #255	; 0xff
 8001a44:	401a      	ands	r2, r3
 8001a46:	1dfb      	adds	r3, r7, #7
 8001a48:	781b      	ldrb	r3, [r3, #0]
 8001a4a:	0018      	movs	r0, r3
 8001a4c:	2303      	movs	r3, #3
 8001a4e:	4003      	ands	r3, r0
 8001a50:	00db      	lsls	r3, r3, #3
 8001a52:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001a54:	4809      	ldr	r0, [pc, #36]	; (8001a7c <__NVIC_SetPriority+0xd8>)
 8001a56:	1dfb      	adds	r3, r7, #7
 8001a58:	781b      	ldrb	r3, [r3, #0]
 8001a5a:	001c      	movs	r4, r3
 8001a5c:	230f      	movs	r3, #15
 8001a5e:	4023      	ands	r3, r4
 8001a60:	3b08      	subs	r3, #8
 8001a62:	089b      	lsrs	r3, r3, #2
 8001a64:	430a      	orrs	r2, r1
 8001a66:	3306      	adds	r3, #6
 8001a68:	009b      	lsls	r3, r3, #2
 8001a6a:	18c3      	adds	r3, r0, r3
 8001a6c:	3304      	adds	r3, #4
 8001a6e:	601a      	str	r2, [r3, #0]
}
 8001a70:	46c0      	nop			; (mov r8, r8)
 8001a72:	46bd      	mov	sp, r7
 8001a74:	b003      	add	sp, #12
 8001a76:	bd90      	pop	{r4, r7, pc}
 8001a78:	e000e100 	.word	0xe000e100
 8001a7c:	e000ed00 	.word	0xe000ed00

08001a80 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	b082      	sub	sp, #8
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	3b01      	subs	r3, #1
 8001a8c:	4a0c      	ldr	r2, [pc, #48]	; (8001ac0 <SysTick_Config+0x40>)
 8001a8e:	4293      	cmp	r3, r2
 8001a90:	d901      	bls.n	8001a96 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a92:	2301      	movs	r3, #1
 8001a94:	e010      	b.n	8001ab8 <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a96:	4b0b      	ldr	r3, [pc, #44]	; (8001ac4 <SysTick_Config+0x44>)
 8001a98:	687a      	ldr	r2, [r7, #4]
 8001a9a:	3a01      	subs	r2, #1
 8001a9c:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a9e:	2301      	movs	r3, #1
 8001aa0:	425b      	negs	r3, r3
 8001aa2:	2103      	movs	r1, #3
 8001aa4:	0018      	movs	r0, r3
 8001aa6:	f7ff ff7d 	bl	80019a4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001aaa:	4b06      	ldr	r3, [pc, #24]	; (8001ac4 <SysTick_Config+0x44>)
 8001aac:	2200      	movs	r2, #0
 8001aae:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001ab0:	4b04      	ldr	r3, [pc, #16]	; (8001ac4 <SysTick_Config+0x44>)
 8001ab2:	2207      	movs	r2, #7
 8001ab4:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ab6:	2300      	movs	r3, #0
}
 8001ab8:	0018      	movs	r0, r3
 8001aba:	46bd      	mov	sp, r7
 8001abc:	b002      	add	sp, #8
 8001abe:	bd80      	pop	{r7, pc}
 8001ac0:	00ffffff 	.word	0x00ffffff
 8001ac4:	e000e010 	.word	0xe000e010

08001ac8 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	b084      	sub	sp, #16
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	60b9      	str	r1, [r7, #8]
 8001ad0:	607a      	str	r2, [r7, #4]
 8001ad2:	210f      	movs	r1, #15
 8001ad4:	187b      	adds	r3, r7, r1
 8001ad6:	1c02      	adds	r2, r0, #0
 8001ad8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8001ada:	68ba      	ldr	r2, [r7, #8]
 8001adc:	187b      	adds	r3, r7, r1
 8001ade:	781b      	ldrb	r3, [r3, #0]
 8001ae0:	b25b      	sxtb	r3, r3
 8001ae2:	0011      	movs	r1, r2
 8001ae4:	0018      	movs	r0, r3
 8001ae6:	f7ff ff5d 	bl	80019a4 <__NVIC_SetPriority>
}
 8001aea:	46c0      	nop			; (mov r8, r8)
 8001aec:	46bd      	mov	sp, r7
 8001aee:	b004      	add	sp, #16
 8001af0:	bd80      	pop	{r7, pc}

08001af2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001af2:	b580      	push	{r7, lr}
 8001af4:	b082      	sub	sp, #8
 8001af6:	af00      	add	r7, sp, #0
 8001af8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	0018      	movs	r0, r3
 8001afe:	f7ff ffbf 	bl	8001a80 <SysTick_Config>
 8001b02:	0003      	movs	r3, r0
}
 8001b04:	0018      	movs	r0, r3
 8001b06:	46bd      	mov	sp, r7
 8001b08:	b002      	add	sp, #8
 8001b0a:	bd80      	pop	{r7, pc}

08001b0c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	b086      	sub	sp, #24
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	6078      	str	r0, [r7, #4]
 8001b14:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001b16:	2300      	movs	r3, #0
 8001b18:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b1a:	e14f      	b.n	8001dbc <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001b1c:	683b      	ldr	r3, [r7, #0]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	2101      	movs	r1, #1
 8001b22:	697a      	ldr	r2, [r7, #20]
 8001b24:	4091      	lsls	r1, r2
 8001b26:	000a      	movs	r2, r1
 8001b28:	4013      	ands	r3, r2
 8001b2a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d100      	bne.n	8001b34 <HAL_GPIO_Init+0x28>
 8001b32:	e140      	b.n	8001db6 <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001b34:	683b      	ldr	r3, [r7, #0]
 8001b36:	685b      	ldr	r3, [r3, #4]
 8001b38:	2b02      	cmp	r3, #2
 8001b3a:	d003      	beq.n	8001b44 <HAL_GPIO_Init+0x38>
 8001b3c:	683b      	ldr	r3, [r7, #0]
 8001b3e:	685b      	ldr	r3, [r3, #4]
 8001b40:	2b12      	cmp	r3, #18
 8001b42:	d123      	bne.n	8001b8c <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001b44:	697b      	ldr	r3, [r7, #20]
 8001b46:	08da      	lsrs	r2, r3, #3
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	3208      	adds	r2, #8
 8001b4c:	0092      	lsls	r2, r2, #2
 8001b4e:	58d3      	ldr	r3, [r2, r3]
 8001b50:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001b52:	697b      	ldr	r3, [r7, #20]
 8001b54:	2207      	movs	r2, #7
 8001b56:	4013      	ands	r3, r2
 8001b58:	009b      	lsls	r3, r3, #2
 8001b5a:	220f      	movs	r2, #15
 8001b5c:	409a      	lsls	r2, r3
 8001b5e:	0013      	movs	r3, r2
 8001b60:	43da      	mvns	r2, r3
 8001b62:	693b      	ldr	r3, [r7, #16]
 8001b64:	4013      	ands	r3, r2
 8001b66:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001b68:	683b      	ldr	r3, [r7, #0]
 8001b6a:	691a      	ldr	r2, [r3, #16]
 8001b6c:	697b      	ldr	r3, [r7, #20]
 8001b6e:	2107      	movs	r1, #7
 8001b70:	400b      	ands	r3, r1
 8001b72:	009b      	lsls	r3, r3, #2
 8001b74:	409a      	lsls	r2, r3
 8001b76:	0013      	movs	r3, r2
 8001b78:	693a      	ldr	r2, [r7, #16]
 8001b7a:	4313      	orrs	r3, r2
 8001b7c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001b7e:	697b      	ldr	r3, [r7, #20]
 8001b80:	08da      	lsrs	r2, r3, #3
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	3208      	adds	r2, #8
 8001b86:	0092      	lsls	r2, r2, #2
 8001b88:	6939      	ldr	r1, [r7, #16]
 8001b8a:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001b92:	697b      	ldr	r3, [r7, #20]
 8001b94:	005b      	lsls	r3, r3, #1
 8001b96:	2203      	movs	r2, #3
 8001b98:	409a      	lsls	r2, r3
 8001b9a:	0013      	movs	r3, r2
 8001b9c:	43da      	mvns	r2, r3
 8001b9e:	693b      	ldr	r3, [r7, #16]
 8001ba0:	4013      	ands	r3, r2
 8001ba2:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001ba4:	683b      	ldr	r3, [r7, #0]
 8001ba6:	685b      	ldr	r3, [r3, #4]
 8001ba8:	2203      	movs	r2, #3
 8001baa:	401a      	ands	r2, r3
 8001bac:	697b      	ldr	r3, [r7, #20]
 8001bae:	005b      	lsls	r3, r3, #1
 8001bb0:	409a      	lsls	r2, r3
 8001bb2:	0013      	movs	r3, r2
 8001bb4:	693a      	ldr	r2, [r7, #16]
 8001bb6:	4313      	orrs	r3, r2
 8001bb8:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	693a      	ldr	r2, [r7, #16]
 8001bbe:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001bc0:	683b      	ldr	r3, [r7, #0]
 8001bc2:	685b      	ldr	r3, [r3, #4]
 8001bc4:	2b01      	cmp	r3, #1
 8001bc6:	d00b      	beq.n	8001be0 <HAL_GPIO_Init+0xd4>
 8001bc8:	683b      	ldr	r3, [r7, #0]
 8001bca:	685b      	ldr	r3, [r3, #4]
 8001bcc:	2b02      	cmp	r3, #2
 8001bce:	d007      	beq.n	8001be0 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001bd0:	683b      	ldr	r3, [r7, #0]
 8001bd2:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001bd4:	2b11      	cmp	r3, #17
 8001bd6:	d003      	beq.n	8001be0 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001bd8:	683b      	ldr	r3, [r7, #0]
 8001bda:	685b      	ldr	r3, [r3, #4]
 8001bdc:	2b12      	cmp	r3, #18
 8001bde:	d130      	bne.n	8001c42 <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	689b      	ldr	r3, [r3, #8]
 8001be4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001be6:	697b      	ldr	r3, [r7, #20]
 8001be8:	005b      	lsls	r3, r3, #1
 8001bea:	2203      	movs	r2, #3
 8001bec:	409a      	lsls	r2, r3
 8001bee:	0013      	movs	r3, r2
 8001bf0:	43da      	mvns	r2, r3
 8001bf2:	693b      	ldr	r3, [r7, #16]
 8001bf4:	4013      	ands	r3, r2
 8001bf6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001bf8:	683b      	ldr	r3, [r7, #0]
 8001bfa:	68da      	ldr	r2, [r3, #12]
 8001bfc:	697b      	ldr	r3, [r7, #20]
 8001bfe:	005b      	lsls	r3, r3, #1
 8001c00:	409a      	lsls	r2, r3
 8001c02:	0013      	movs	r3, r2
 8001c04:	693a      	ldr	r2, [r7, #16]
 8001c06:	4313      	orrs	r3, r2
 8001c08:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	693a      	ldr	r2, [r7, #16]
 8001c0e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	685b      	ldr	r3, [r3, #4]
 8001c14:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001c16:	2201      	movs	r2, #1
 8001c18:	697b      	ldr	r3, [r7, #20]
 8001c1a:	409a      	lsls	r2, r3
 8001c1c:	0013      	movs	r3, r2
 8001c1e:	43da      	mvns	r2, r3
 8001c20:	693b      	ldr	r3, [r7, #16]
 8001c22:	4013      	ands	r3, r2
 8001c24:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8001c26:	683b      	ldr	r3, [r7, #0]
 8001c28:	685b      	ldr	r3, [r3, #4]
 8001c2a:	091b      	lsrs	r3, r3, #4
 8001c2c:	2201      	movs	r2, #1
 8001c2e:	401a      	ands	r2, r3
 8001c30:	697b      	ldr	r3, [r7, #20]
 8001c32:	409a      	lsls	r2, r3
 8001c34:	0013      	movs	r3, r2
 8001c36:	693a      	ldr	r2, [r7, #16]
 8001c38:	4313      	orrs	r3, r2
 8001c3a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	693a      	ldr	r2, [r7, #16]
 8001c40:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	68db      	ldr	r3, [r3, #12]
 8001c46:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001c48:	697b      	ldr	r3, [r7, #20]
 8001c4a:	005b      	lsls	r3, r3, #1
 8001c4c:	2203      	movs	r2, #3
 8001c4e:	409a      	lsls	r2, r3
 8001c50:	0013      	movs	r3, r2
 8001c52:	43da      	mvns	r2, r3
 8001c54:	693b      	ldr	r3, [r7, #16]
 8001c56:	4013      	ands	r3, r2
 8001c58:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001c5a:	683b      	ldr	r3, [r7, #0]
 8001c5c:	689a      	ldr	r2, [r3, #8]
 8001c5e:	697b      	ldr	r3, [r7, #20]
 8001c60:	005b      	lsls	r3, r3, #1
 8001c62:	409a      	lsls	r2, r3
 8001c64:	0013      	movs	r3, r2
 8001c66:	693a      	ldr	r2, [r7, #16]
 8001c68:	4313      	orrs	r3, r2
 8001c6a:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	693a      	ldr	r2, [r7, #16]
 8001c70:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001c72:	683b      	ldr	r3, [r7, #0]
 8001c74:	685a      	ldr	r2, [r3, #4]
 8001c76:	2380      	movs	r3, #128	; 0x80
 8001c78:	055b      	lsls	r3, r3, #21
 8001c7a:	4013      	ands	r3, r2
 8001c7c:	d100      	bne.n	8001c80 <HAL_GPIO_Init+0x174>
 8001c7e:	e09a      	b.n	8001db6 <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c80:	4b54      	ldr	r3, [pc, #336]	; (8001dd4 <HAL_GPIO_Init+0x2c8>)
 8001c82:	699a      	ldr	r2, [r3, #24]
 8001c84:	4b53      	ldr	r3, [pc, #332]	; (8001dd4 <HAL_GPIO_Init+0x2c8>)
 8001c86:	2101      	movs	r1, #1
 8001c88:	430a      	orrs	r2, r1
 8001c8a:	619a      	str	r2, [r3, #24]
 8001c8c:	4b51      	ldr	r3, [pc, #324]	; (8001dd4 <HAL_GPIO_Init+0x2c8>)
 8001c8e:	699b      	ldr	r3, [r3, #24]
 8001c90:	2201      	movs	r2, #1
 8001c92:	4013      	ands	r3, r2
 8001c94:	60bb      	str	r3, [r7, #8]
 8001c96:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001c98:	4a4f      	ldr	r2, [pc, #316]	; (8001dd8 <HAL_GPIO_Init+0x2cc>)
 8001c9a:	697b      	ldr	r3, [r7, #20]
 8001c9c:	089b      	lsrs	r3, r3, #2
 8001c9e:	3302      	adds	r3, #2
 8001ca0:	009b      	lsls	r3, r3, #2
 8001ca2:	589b      	ldr	r3, [r3, r2]
 8001ca4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001ca6:	697b      	ldr	r3, [r7, #20]
 8001ca8:	2203      	movs	r2, #3
 8001caa:	4013      	ands	r3, r2
 8001cac:	009b      	lsls	r3, r3, #2
 8001cae:	220f      	movs	r2, #15
 8001cb0:	409a      	lsls	r2, r3
 8001cb2:	0013      	movs	r3, r2
 8001cb4:	43da      	mvns	r2, r3
 8001cb6:	693b      	ldr	r3, [r7, #16]
 8001cb8:	4013      	ands	r3, r2
 8001cba:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001cbc:	687a      	ldr	r2, [r7, #4]
 8001cbe:	2390      	movs	r3, #144	; 0x90
 8001cc0:	05db      	lsls	r3, r3, #23
 8001cc2:	429a      	cmp	r2, r3
 8001cc4:	d013      	beq.n	8001cee <HAL_GPIO_Init+0x1e2>
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	4a44      	ldr	r2, [pc, #272]	; (8001ddc <HAL_GPIO_Init+0x2d0>)
 8001cca:	4293      	cmp	r3, r2
 8001ccc:	d00d      	beq.n	8001cea <HAL_GPIO_Init+0x1de>
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	4a43      	ldr	r2, [pc, #268]	; (8001de0 <HAL_GPIO_Init+0x2d4>)
 8001cd2:	4293      	cmp	r3, r2
 8001cd4:	d007      	beq.n	8001ce6 <HAL_GPIO_Init+0x1da>
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	4a42      	ldr	r2, [pc, #264]	; (8001de4 <HAL_GPIO_Init+0x2d8>)
 8001cda:	4293      	cmp	r3, r2
 8001cdc:	d101      	bne.n	8001ce2 <HAL_GPIO_Init+0x1d6>
 8001cde:	2303      	movs	r3, #3
 8001ce0:	e006      	b.n	8001cf0 <HAL_GPIO_Init+0x1e4>
 8001ce2:	2305      	movs	r3, #5
 8001ce4:	e004      	b.n	8001cf0 <HAL_GPIO_Init+0x1e4>
 8001ce6:	2302      	movs	r3, #2
 8001ce8:	e002      	b.n	8001cf0 <HAL_GPIO_Init+0x1e4>
 8001cea:	2301      	movs	r3, #1
 8001cec:	e000      	b.n	8001cf0 <HAL_GPIO_Init+0x1e4>
 8001cee:	2300      	movs	r3, #0
 8001cf0:	697a      	ldr	r2, [r7, #20]
 8001cf2:	2103      	movs	r1, #3
 8001cf4:	400a      	ands	r2, r1
 8001cf6:	0092      	lsls	r2, r2, #2
 8001cf8:	4093      	lsls	r3, r2
 8001cfa:	693a      	ldr	r2, [r7, #16]
 8001cfc:	4313      	orrs	r3, r2
 8001cfe:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001d00:	4935      	ldr	r1, [pc, #212]	; (8001dd8 <HAL_GPIO_Init+0x2cc>)
 8001d02:	697b      	ldr	r3, [r7, #20]
 8001d04:	089b      	lsrs	r3, r3, #2
 8001d06:	3302      	adds	r3, #2
 8001d08:	009b      	lsls	r3, r3, #2
 8001d0a:	693a      	ldr	r2, [r7, #16]
 8001d0c:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001d0e:	4b36      	ldr	r3, [pc, #216]	; (8001de8 <HAL_GPIO_Init+0x2dc>)
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	43da      	mvns	r2, r3
 8001d18:	693b      	ldr	r3, [r7, #16]
 8001d1a:	4013      	ands	r3, r2
 8001d1c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001d1e:	683b      	ldr	r3, [r7, #0]
 8001d20:	685a      	ldr	r2, [r3, #4]
 8001d22:	2380      	movs	r3, #128	; 0x80
 8001d24:	025b      	lsls	r3, r3, #9
 8001d26:	4013      	ands	r3, r2
 8001d28:	d003      	beq.n	8001d32 <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 8001d2a:	693a      	ldr	r2, [r7, #16]
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	4313      	orrs	r3, r2
 8001d30:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001d32:	4b2d      	ldr	r3, [pc, #180]	; (8001de8 <HAL_GPIO_Init+0x2dc>)
 8001d34:	693a      	ldr	r2, [r7, #16]
 8001d36:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8001d38:	4b2b      	ldr	r3, [pc, #172]	; (8001de8 <HAL_GPIO_Init+0x2dc>)
 8001d3a:	685b      	ldr	r3, [r3, #4]
 8001d3c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	43da      	mvns	r2, r3
 8001d42:	693b      	ldr	r3, [r7, #16]
 8001d44:	4013      	ands	r3, r2
 8001d46:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001d48:	683b      	ldr	r3, [r7, #0]
 8001d4a:	685a      	ldr	r2, [r3, #4]
 8001d4c:	2380      	movs	r3, #128	; 0x80
 8001d4e:	029b      	lsls	r3, r3, #10
 8001d50:	4013      	ands	r3, r2
 8001d52:	d003      	beq.n	8001d5c <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8001d54:	693a      	ldr	r2, [r7, #16]
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	4313      	orrs	r3, r2
 8001d5a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001d5c:	4b22      	ldr	r3, [pc, #136]	; (8001de8 <HAL_GPIO_Init+0x2dc>)
 8001d5e:	693a      	ldr	r2, [r7, #16]
 8001d60:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001d62:	4b21      	ldr	r3, [pc, #132]	; (8001de8 <HAL_GPIO_Init+0x2dc>)
 8001d64:	689b      	ldr	r3, [r3, #8]
 8001d66:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	43da      	mvns	r2, r3
 8001d6c:	693b      	ldr	r3, [r7, #16]
 8001d6e:	4013      	ands	r3, r2
 8001d70:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001d72:	683b      	ldr	r3, [r7, #0]
 8001d74:	685a      	ldr	r2, [r3, #4]
 8001d76:	2380      	movs	r3, #128	; 0x80
 8001d78:	035b      	lsls	r3, r3, #13
 8001d7a:	4013      	ands	r3, r2
 8001d7c:	d003      	beq.n	8001d86 <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 8001d7e:	693a      	ldr	r2, [r7, #16]
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	4313      	orrs	r3, r2
 8001d84:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001d86:	4b18      	ldr	r3, [pc, #96]	; (8001de8 <HAL_GPIO_Init+0x2dc>)
 8001d88:	693a      	ldr	r2, [r7, #16]
 8001d8a:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001d8c:	4b16      	ldr	r3, [pc, #88]	; (8001de8 <HAL_GPIO_Init+0x2dc>)
 8001d8e:	68db      	ldr	r3, [r3, #12]
 8001d90:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	43da      	mvns	r2, r3
 8001d96:	693b      	ldr	r3, [r7, #16]
 8001d98:	4013      	ands	r3, r2
 8001d9a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001d9c:	683b      	ldr	r3, [r7, #0]
 8001d9e:	685a      	ldr	r2, [r3, #4]
 8001da0:	2380      	movs	r3, #128	; 0x80
 8001da2:	039b      	lsls	r3, r3, #14
 8001da4:	4013      	ands	r3, r2
 8001da6:	d003      	beq.n	8001db0 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 8001da8:	693a      	ldr	r2, [r7, #16]
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	4313      	orrs	r3, r2
 8001dae:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001db0:	4b0d      	ldr	r3, [pc, #52]	; (8001de8 <HAL_GPIO_Init+0x2dc>)
 8001db2:	693a      	ldr	r2, [r7, #16]
 8001db4:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 8001db6:	697b      	ldr	r3, [r7, #20]
 8001db8:	3301      	adds	r3, #1
 8001dba:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001dbc:	683b      	ldr	r3, [r7, #0]
 8001dbe:	681a      	ldr	r2, [r3, #0]
 8001dc0:	697b      	ldr	r3, [r7, #20]
 8001dc2:	40da      	lsrs	r2, r3
 8001dc4:	1e13      	subs	r3, r2, #0
 8001dc6:	d000      	beq.n	8001dca <HAL_GPIO_Init+0x2be>
 8001dc8:	e6a8      	b.n	8001b1c <HAL_GPIO_Init+0x10>
  } 
}
 8001dca:	46c0      	nop			; (mov r8, r8)
 8001dcc:	46bd      	mov	sp, r7
 8001dce:	b006      	add	sp, #24
 8001dd0:	bd80      	pop	{r7, pc}
 8001dd2:	46c0      	nop			; (mov r8, r8)
 8001dd4:	40021000 	.word	0x40021000
 8001dd8:	40010000 	.word	0x40010000
 8001ddc:	48000400 	.word	0x48000400
 8001de0:	48000800 	.word	0x48000800
 8001de4:	48000c00 	.word	0x48000c00
 8001de8:	40010400 	.word	0x40010400

08001dec <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001dec:	b580      	push	{r7, lr}
 8001dee:	b084      	sub	sp, #16
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	6078      	str	r0, [r7, #4]
 8001df4:	000a      	movs	r2, r1
 8001df6:	1cbb      	adds	r3, r7, #2
 8001df8:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	691b      	ldr	r3, [r3, #16]
 8001dfe:	1cba      	adds	r2, r7, #2
 8001e00:	8812      	ldrh	r2, [r2, #0]
 8001e02:	4013      	ands	r3, r2
 8001e04:	d004      	beq.n	8001e10 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8001e06:	230f      	movs	r3, #15
 8001e08:	18fb      	adds	r3, r7, r3
 8001e0a:	2201      	movs	r2, #1
 8001e0c:	701a      	strb	r2, [r3, #0]
 8001e0e:	e003      	b.n	8001e18 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001e10:	230f      	movs	r3, #15
 8001e12:	18fb      	adds	r3, r7, r3
 8001e14:	2200      	movs	r2, #0
 8001e16:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8001e18:	230f      	movs	r3, #15
 8001e1a:	18fb      	adds	r3, r7, r3
 8001e1c:	781b      	ldrb	r3, [r3, #0]
  }
 8001e1e:	0018      	movs	r0, r3
 8001e20:	46bd      	mov	sp, r7
 8001e22:	b004      	add	sp, #16
 8001e24:	bd80      	pop	{r7, pc}

08001e26 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001e26:	b580      	push	{r7, lr}
 8001e28:	b082      	sub	sp, #8
 8001e2a:	af00      	add	r7, sp, #0
 8001e2c:	6078      	str	r0, [r7, #4]
 8001e2e:	0008      	movs	r0, r1
 8001e30:	0011      	movs	r1, r2
 8001e32:	1cbb      	adds	r3, r7, #2
 8001e34:	1c02      	adds	r2, r0, #0
 8001e36:	801a      	strh	r2, [r3, #0]
 8001e38:	1c7b      	adds	r3, r7, #1
 8001e3a:	1c0a      	adds	r2, r1, #0
 8001e3c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001e3e:	1c7b      	adds	r3, r7, #1
 8001e40:	781b      	ldrb	r3, [r3, #0]
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d004      	beq.n	8001e50 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001e46:	1cbb      	adds	r3, r7, #2
 8001e48:	881a      	ldrh	r2, [r3, #0]
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001e4e:	e003      	b.n	8001e58 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001e50:	1cbb      	adds	r3, r7, #2
 8001e52:	881a      	ldrh	r2, [r3, #0]
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001e58:	46c0      	nop			; (mov r8, r8)
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	b002      	add	sp, #8
 8001e5e:	bd80      	pop	{r7, pc}

08001e60 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F0 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001e60:	b580      	push	{r7, lr}
 8001e62:	b082      	sub	sp, #8
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]
 8001e68:	000a      	movs	r2, r1
 8001e6a:	1cbb      	adds	r3, r7, #2
 8001e6c:	801a      	strh	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0X00u)
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	695b      	ldr	r3, [r3, #20]
 8001e72:	1cba      	adds	r2, r7, #2
 8001e74:	8812      	ldrh	r2, [r2, #0]
 8001e76:	4013      	ands	r3, r2
 8001e78:	d005      	beq.n	8001e86 <HAL_GPIO_TogglePin+0x26>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001e7a:	1cbb      	adds	r3, r7, #2
 8001e7c:	881b      	ldrh	r3, [r3, #0]
 8001e7e:	041a      	lsls	r2, r3, #16
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 8001e84:	e003      	b.n	8001e8e <HAL_GPIO_TogglePin+0x2e>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001e86:	1cbb      	adds	r3, r7, #2
 8001e88:	881a      	ldrh	r2, [r3, #0]
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	619a      	str	r2, [r3, #24]
}
 8001e8e:	46c0      	nop			; (mov r8, r8)
 8001e90:	46bd      	mov	sp, r7
 8001e92:	b002      	add	sp, #8
 8001e94:	bd80      	pop	{r7, pc}
	...

08001e98 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	b088      	sub	sp, #32
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d101      	bne.n	8001eaa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001ea6:	2301      	movs	r3, #1
 8001ea8:	e303      	b.n	80024b2 <HAL_RCC_OscConfig+0x61a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	2201      	movs	r2, #1
 8001eb0:	4013      	ands	r3, r2
 8001eb2:	d100      	bne.n	8001eb6 <HAL_RCC_OscConfig+0x1e>
 8001eb4:	e08d      	b.n	8001fd2 <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001eb6:	4bc4      	ldr	r3, [pc, #784]	; (80021c8 <HAL_RCC_OscConfig+0x330>)
 8001eb8:	685b      	ldr	r3, [r3, #4]
 8001eba:	220c      	movs	r2, #12
 8001ebc:	4013      	ands	r3, r2
 8001ebe:	2b04      	cmp	r3, #4
 8001ec0:	d00e      	beq.n	8001ee0 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001ec2:	4bc1      	ldr	r3, [pc, #772]	; (80021c8 <HAL_RCC_OscConfig+0x330>)
 8001ec4:	685b      	ldr	r3, [r3, #4]
 8001ec6:	220c      	movs	r2, #12
 8001ec8:	4013      	ands	r3, r2
 8001eca:	2b08      	cmp	r3, #8
 8001ecc:	d116      	bne.n	8001efc <HAL_RCC_OscConfig+0x64>
 8001ece:	4bbe      	ldr	r3, [pc, #760]	; (80021c8 <HAL_RCC_OscConfig+0x330>)
 8001ed0:	685a      	ldr	r2, [r3, #4]
 8001ed2:	2380      	movs	r3, #128	; 0x80
 8001ed4:	025b      	lsls	r3, r3, #9
 8001ed6:	401a      	ands	r2, r3
 8001ed8:	2380      	movs	r3, #128	; 0x80
 8001eda:	025b      	lsls	r3, r3, #9
 8001edc:	429a      	cmp	r2, r3
 8001ede:	d10d      	bne.n	8001efc <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ee0:	4bb9      	ldr	r3, [pc, #740]	; (80021c8 <HAL_RCC_OscConfig+0x330>)
 8001ee2:	681a      	ldr	r2, [r3, #0]
 8001ee4:	2380      	movs	r3, #128	; 0x80
 8001ee6:	029b      	lsls	r3, r3, #10
 8001ee8:	4013      	ands	r3, r2
 8001eea:	d100      	bne.n	8001eee <HAL_RCC_OscConfig+0x56>
 8001eec:	e070      	b.n	8001fd0 <HAL_RCC_OscConfig+0x138>
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	685b      	ldr	r3, [r3, #4]
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d000      	beq.n	8001ef8 <HAL_RCC_OscConfig+0x60>
 8001ef6:	e06b      	b.n	8001fd0 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8001ef8:	2301      	movs	r3, #1
 8001efa:	e2da      	b.n	80024b2 <HAL_RCC_OscConfig+0x61a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	685b      	ldr	r3, [r3, #4]
 8001f00:	2b01      	cmp	r3, #1
 8001f02:	d107      	bne.n	8001f14 <HAL_RCC_OscConfig+0x7c>
 8001f04:	4bb0      	ldr	r3, [pc, #704]	; (80021c8 <HAL_RCC_OscConfig+0x330>)
 8001f06:	681a      	ldr	r2, [r3, #0]
 8001f08:	4baf      	ldr	r3, [pc, #700]	; (80021c8 <HAL_RCC_OscConfig+0x330>)
 8001f0a:	2180      	movs	r1, #128	; 0x80
 8001f0c:	0249      	lsls	r1, r1, #9
 8001f0e:	430a      	orrs	r2, r1
 8001f10:	601a      	str	r2, [r3, #0]
 8001f12:	e02f      	b.n	8001f74 <HAL_RCC_OscConfig+0xdc>
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	685b      	ldr	r3, [r3, #4]
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d10c      	bne.n	8001f36 <HAL_RCC_OscConfig+0x9e>
 8001f1c:	4baa      	ldr	r3, [pc, #680]	; (80021c8 <HAL_RCC_OscConfig+0x330>)
 8001f1e:	681a      	ldr	r2, [r3, #0]
 8001f20:	4ba9      	ldr	r3, [pc, #676]	; (80021c8 <HAL_RCC_OscConfig+0x330>)
 8001f22:	49aa      	ldr	r1, [pc, #680]	; (80021cc <HAL_RCC_OscConfig+0x334>)
 8001f24:	400a      	ands	r2, r1
 8001f26:	601a      	str	r2, [r3, #0]
 8001f28:	4ba7      	ldr	r3, [pc, #668]	; (80021c8 <HAL_RCC_OscConfig+0x330>)
 8001f2a:	681a      	ldr	r2, [r3, #0]
 8001f2c:	4ba6      	ldr	r3, [pc, #664]	; (80021c8 <HAL_RCC_OscConfig+0x330>)
 8001f2e:	49a8      	ldr	r1, [pc, #672]	; (80021d0 <HAL_RCC_OscConfig+0x338>)
 8001f30:	400a      	ands	r2, r1
 8001f32:	601a      	str	r2, [r3, #0]
 8001f34:	e01e      	b.n	8001f74 <HAL_RCC_OscConfig+0xdc>
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	685b      	ldr	r3, [r3, #4]
 8001f3a:	2b05      	cmp	r3, #5
 8001f3c:	d10e      	bne.n	8001f5c <HAL_RCC_OscConfig+0xc4>
 8001f3e:	4ba2      	ldr	r3, [pc, #648]	; (80021c8 <HAL_RCC_OscConfig+0x330>)
 8001f40:	681a      	ldr	r2, [r3, #0]
 8001f42:	4ba1      	ldr	r3, [pc, #644]	; (80021c8 <HAL_RCC_OscConfig+0x330>)
 8001f44:	2180      	movs	r1, #128	; 0x80
 8001f46:	02c9      	lsls	r1, r1, #11
 8001f48:	430a      	orrs	r2, r1
 8001f4a:	601a      	str	r2, [r3, #0]
 8001f4c:	4b9e      	ldr	r3, [pc, #632]	; (80021c8 <HAL_RCC_OscConfig+0x330>)
 8001f4e:	681a      	ldr	r2, [r3, #0]
 8001f50:	4b9d      	ldr	r3, [pc, #628]	; (80021c8 <HAL_RCC_OscConfig+0x330>)
 8001f52:	2180      	movs	r1, #128	; 0x80
 8001f54:	0249      	lsls	r1, r1, #9
 8001f56:	430a      	orrs	r2, r1
 8001f58:	601a      	str	r2, [r3, #0]
 8001f5a:	e00b      	b.n	8001f74 <HAL_RCC_OscConfig+0xdc>
 8001f5c:	4b9a      	ldr	r3, [pc, #616]	; (80021c8 <HAL_RCC_OscConfig+0x330>)
 8001f5e:	681a      	ldr	r2, [r3, #0]
 8001f60:	4b99      	ldr	r3, [pc, #612]	; (80021c8 <HAL_RCC_OscConfig+0x330>)
 8001f62:	499a      	ldr	r1, [pc, #616]	; (80021cc <HAL_RCC_OscConfig+0x334>)
 8001f64:	400a      	ands	r2, r1
 8001f66:	601a      	str	r2, [r3, #0]
 8001f68:	4b97      	ldr	r3, [pc, #604]	; (80021c8 <HAL_RCC_OscConfig+0x330>)
 8001f6a:	681a      	ldr	r2, [r3, #0]
 8001f6c:	4b96      	ldr	r3, [pc, #600]	; (80021c8 <HAL_RCC_OscConfig+0x330>)
 8001f6e:	4998      	ldr	r1, [pc, #608]	; (80021d0 <HAL_RCC_OscConfig+0x338>)
 8001f70:	400a      	ands	r2, r1
 8001f72:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	685b      	ldr	r3, [r3, #4]
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d014      	beq.n	8001fa6 <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f7c:	f7ff f874 	bl	8001068 <HAL_GetTick>
 8001f80:	0003      	movs	r3, r0
 8001f82:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f84:	e008      	b.n	8001f98 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001f86:	f7ff f86f 	bl	8001068 <HAL_GetTick>
 8001f8a:	0002      	movs	r2, r0
 8001f8c:	69bb      	ldr	r3, [r7, #24]
 8001f8e:	1ad3      	subs	r3, r2, r3
 8001f90:	2b64      	cmp	r3, #100	; 0x64
 8001f92:	d901      	bls.n	8001f98 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8001f94:	2303      	movs	r3, #3
 8001f96:	e28c      	b.n	80024b2 <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f98:	4b8b      	ldr	r3, [pc, #556]	; (80021c8 <HAL_RCC_OscConfig+0x330>)
 8001f9a:	681a      	ldr	r2, [r3, #0]
 8001f9c:	2380      	movs	r3, #128	; 0x80
 8001f9e:	029b      	lsls	r3, r3, #10
 8001fa0:	4013      	ands	r3, r2
 8001fa2:	d0f0      	beq.n	8001f86 <HAL_RCC_OscConfig+0xee>
 8001fa4:	e015      	b.n	8001fd2 <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fa6:	f7ff f85f 	bl	8001068 <HAL_GetTick>
 8001faa:	0003      	movs	r3, r0
 8001fac:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001fae:	e008      	b.n	8001fc2 <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001fb0:	f7ff f85a 	bl	8001068 <HAL_GetTick>
 8001fb4:	0002      	movs	r2, r0
 8001fb6:	69bb      	ldr	r3, [r7, #24]
 8001fb8:	1ad3      	subs	r3, r2, r3
 8001fba:	2b64      	cmp	r3, #100	; 0x64
 8001fbc:	d901      	bls.n	8001fc2 <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8001fbe:	2303      	movs	r3, #3
 8001fc0:	e277      	b.n	80024b2 <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001fc2:	4b81      	ldr	r3, [pc, #516]	; (80021c8 <HAL_RCC_OscConfig+0x330>)
 8001fc4:	681a      	ldr	r2, [r3, #0]
 8001fc6:	2380      	movs	r3, #128	; 0x80
 8001fc8:	029b      	lsls	r3, r3, #10
 8001fca:	4013      	ands	r3, r2
 8001fcc:	d1f0      	bne.n	8001fb0 <HAL_RCC_OscConfig+0x118>
 8001fce:	e000      	b.n	8001fd2 <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001fd0:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	2202      	movs	r2, #2
 8001fd8:	4013      	ands	r3, r2
 8001fda:	d100      	bne.n	8001fde <HAL_RCC_OscConfig+0x146>
 8001fdc:	e069      	b.n	80020b2 <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001fde:	4b7a      	ldr	r3, [pc, #488]	; (80021c8 <HAL_RCC_OscConfig+0x330>)
 8001fe0:	685b      	ldr	r3, [r3, #4]
 8001fe2:	220c      	movs	r2, #12
 8001fe4:	4013      	ands	r3, r2
 8001fe6:	d00b      	beq.n	8002000 <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001fe8:	4b77      	ldr	r3, [pc, #476]	; (80021c8 <HAL_RCC_OscConfig+0x330>)
 8001fea:	685b      	ldr	r3, [r3, #4]
 8001fec:	220c      	movs	r2, #12
 8001fee:	4013      	ands	r3, r2
 8001ff0:	2b08      	cmp	r3, #8
 8001ff2:	d11c      	bne.n	800202e <HAL_RCC_OscConfig+0x196>
 8001ff4:	4b74      	ldr	r3, [pc, #464]	; (80021c8 <HAL_RCC_OscConfig+0x330>)
 8001ff6:	685a      	ldr	r2, [r3, #4]
 8001ff8:	2380      	movs	r3, #128	; 0x80
 8001ffa:	025b      	lsls	r3, r3, #9
 8001ffc:	4013      	ands	r3, r2
 8001ffe:	d116      	bne.n	800202e <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002000:	4b71      	ldr	r3, [pc, #452]	; (80021c8 <HAL_RCC_OscConfig+0x330>)
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	2202      	movs	r2, #2
 8002006:	4013      	ands	r3, r2
 8002008:	d005      	beq.n	8002016 <HAL_RCC_OscConfig+0x17e>
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	68db      	ldr	r3, [r3, #12]
 800200e:	2b01      	cmp	r3, #1
 8002010:	d001      	beq.n	8002016 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8002012:	2301      	movs	r3, #1
 8002014:	e24d      	b.n	80024b2 <HAL_RCC_OscConfig+0x61a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002016:	4b6c      	ldr	r3, [pc, #432]	; (80021c8 <HAL_RCC_OscConfig+0x330>)
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	22f8      	movs	r2, #248	; 0xf8
 800201c:	4393      	bics	r3, r2
 800201e:	0019      	movs	r1, r3
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	691b      	ldr	r3, [r3, #16]
 8002024:	00da      	lsls	r2, r3, #3
 8002026:	4b68      	ldr	r3, [pc, #416]	; (80021c8 <HAL_RCC_OscConfig+0x330>)
 8002028:	430a      	orrs	r2, r1
 800202a:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800202c:	e041      	b.n	80020b2 <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	68db      	ldr	r3, [r3, #12]
 8002032:	2b00      	cmp	r3, #0
 8002034:	d024      	beq.n	8002080 <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002036:	4b64      	ldr	r3, [pc, #400]	; (80021c8 <HAL_RCC_OscConfig+0x330>)
 8002038:	681a      	ldr	r2, [r3, #0]
 800203a:	4b63      	ldr	r3, [pc, #396]	; (80021c8 <HAL_RCC_OscConfig+0x330>)
 800203c:	2101      	movs	r1, #1
 800203e:	430a      	orrs	r2, r1
 8002040:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002042:	f7ff f811 	bl	8001068 <HAL_GetTick>
 8002046:	0003      	movs	r3, r0
 8002048:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800204a:	e008      	b.n	800205e <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800204c:	f7ff f80c 	bl	8001068 <HAL_GetTick>
 8002050:	0002      	movs	r2, r0
 8002052:	69bb      	ldr	r3, [r7, #24]
 8002054:	1ad3      	subs	r3, r2, r3
 8002056:	2b02      	cmp	r3, #2
 8002058:	d901      	bls.n	800205e <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 800205a:	2303      	movs	r3, #3
 800205c:	e229      	b.n	80024b2 <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800205e:	4b5a      	ldr	r3, [pc, #360]	; (80021c8 <HAL_RCC_OscConfig+0x330>)
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	2202      	movs	r2, #2
 8002064:	4013      	ands	r3, r2
 8002066:	d0f1      	beq.n	800204c <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002068:	4b57      	ldr	r3, [pc, #348]	; (80021c8 <HAL_RCC_OscConfig+0x330>)
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	22f8      	movs	r2, #248	; 0xf8
 800206e:	4393      	bics	r3, r2
 8002070:	0019      	movs	r1, r3
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	691b      	ldr	r3, [r3, #16]
 8002076:	00da      	lsls	r2, r3, #3
 8002078:	4b53      	ldr	r3, [pc, #332]	; (80021c8 <HAL_RCC_OscConfig+0x330>)
 800207a:	430a      	orrs	r2, r1
 800207c:	601a      	str	r2, [r3, #0]
 800207e:	e018      	b.n	80020b2 <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002080:	4b51      	ldr	r3, [pc, #324]	; (80021c8 <HAL_RCC_OscConfig+0x330>)
 8002082:	681a      	ldr	r2, [r3, #0]
 8002084:	4b50      	ldr	r3, [pc, #320]	; (80021c8 <HAL_RCC_OscConfig+0x330>)
 8002086:	2101      	movs	r1, #1
 8002088:	438a      	bics	r2, r1
 800208a:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800208c:	f7fe ffec 	bl	8001068 <HAL_GetTick>
 8002090:	0003      	movs	r3, r0
 8002092:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002094:	e008      	b.n	80020a8 <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002096:	f7fe ffe7 	bl	8001068 <HAL_GetTick>
 800209a:	0002      	movs	r2, r0
 800209c:	69bb      	ldr	r3, [r7, #24]
 800209e:	1ad3      	subs	r3, r2, r3
 80020a0:	2b02      	cmp	r3, #2
 80020a2:	d901      	bls.n	80020a8 <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 80020a4:	2303      	movs	r3, #3
 80020a6:	e204      	b.n	80024b2 <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80020a8:	4b47      	ldr	r3, [pc, #284]	; (80021c8 <HAL_RCC_OscConfig+0x330>)
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	2202      	movs	r2, #2
 80020ae:	4013      	ands	r3, r2
 80020b0:	d1f1      	bne.n	8002096 <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	2208      	movs	r2, #8
 80020b8:	4013      	ands	r3, r2
 80020ba:	d036      	beq.n	800212a <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	69db      	ldr	r3, [r3, #28]
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d019      	beq.n	80020f8 <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80020c4:	4b40      	ldr	r3, [pc, #256]	; (80021c8 <HAL_RCC_OscConfig+0x330>)
 80020c6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80020c8:	4b3f      	ldr	r3, [pc, #252]	; (80021c8 <HAL_RCC_OscConfig+0x330>)
 80020ca:	2101      	movs	r1, #1
 80020cc:	430a      	orrs	r2, r1
 80020ce:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020d0:	f7fe ffca 	bl	8001068 <HAL_GetTick>
 80020d4:	0003      	movs	r3, r0
 80020d6:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80020d8:	e008      	b.n	80020ec <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80020da:	f7fe ffc5 	bl	8001068 <HAL_GetTick>
 80020de:	0002      	movs	r2, r0
 80020e0:	69bb      	ldr	r3, [r7, #24]
 80020e2:	1ad3      	subs	r3, r2, r3
 80020e4:	2b02      	cmp	r3, #2
 80020e6:	d901      	bls.n	80020ec <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 80020e8:	2303      	movs	r3, #3
 80020ea:	e1e2      	b.n	80024b2 <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80020ec:	4b36      	ldr	r3, [pc, #216]	; (80021c8 <HAL_RCC_OscConfig+0x330>)
 80020ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020f0:	2202      	movs	r2, #2
 80020f2:	4013      	ands	r3, r2
 80020f4:	d0f1      	beq.n	80020da <HAL_RCC_OscConfig+0x242>
 80020f6:	e018      	b.n	800212a <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80020f8:	4b33      	ldr	r3, [pc, #204]	; (80021c8 <HAL_RCC_OscConfig+0x330>)
 80020fa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80020fc:	4b32      	ldr	r3, [pc, #200]	; (80021c8 <HAL_RCC_OscConfig+0x330>)
 80020fe:	2101      	movs	r1, #1
 8002100:	438a      	bics	r2, r1
 8002102:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002104:	f7fe ffb0 	bl	8001068 <HAL_GetTick>
 8002108:	0003      	movs	r3, r0
 800210a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800210c:	e008      	b.n	8002120 <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800210e:	f7fe ffab 	bl	8001068 <HAL_GetTick>
 8002112:	0002      	movs	r2, r0
 8002114:	69bb      	ldr	r3, [r7, #24]
 8002116:	1ad3      	subs	r3, r2, r3
 8002118:	2b02      	cmp	r3, #2
 800211a:	d901      	bls.n	8002120 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 800211c:	2303      	movs	r3, #3
 800211e:	e1c8      	b.n	80024b2 <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002120:	4b29      	ldr	r3, [pc, #164]	; (80021c8 <HAL_RCC_OscConfig+0x330>)
 8002122:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002124:	2202      	movs	r2, #2
 8002126:	4013      	ands	r3, r2
 8002128:	d1f1      	bne.n	800210e <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	2204      	movs	r2, #4
 8002130:	4013      	ands	r3, r2
 8002132:	d100      	bne.n	8002136 <HAL_RCC_OscConfig+0x29e>
 8002134:	e0b6      	b.n	80022a4 <HAL_RCC_OscConfig+0x40c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002136:	231f      	movs	r3, #31
 8002138:	18fb      	adds	r3, r7, r3
 800213a:	2200      	movs	r2, #0
 800213c:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800213e:	4b22      	ldr	r3, [pc, #136]	; (80021c8 <HAL_RCC_OscConfig+0x330>)
 8002140:	69da      	ldr	r2, [r3, #28]
 8002142:	2380      	movs	r3, #128	; 0x80
 8002144:	055b      	lsls	r3, r3, #21
 8002146:	4013      	ands	r3, r2
 8002148:	d111      	bne.n	800216e <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800214a:	4b1f      	ldr	r3, [pc, #124]	; (80021c8 <HAL_RCC_OscConfig+0x330>)
 800214c:	69da      	ldr	r2, [r3, #28]
 800214e:	4b1e      	ldr	r3, [pc, #120]	; (80021c8 <HAL_RCC_OscConfig+0x330>)
 8002150:	2180      	movs	r1, #128	; 0x80
 8002152:	0549      	lsls	r1, r1, #21
 8002154:	430a      	orrs	r2, r1
 8002156:	61da      	str	r2, [r3, #28]
 8002158:	4b1b      	ldr	r3, [pc, #108]	; (80021c8 <HAL_RCC_OscConfig+0x330>)
 800215a:	69da      	ldr	r2, [r3, #28]
 800215c:	2380      	movs	r3, #128	; 0x80
 800215e:	055b      	lsls	r3, r3, #21
 8002160:	4013      	ands	r3, r2
 8002162:	60fb      	str	r3, [r7, #12]
 8002164:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002166:	231f      	movs	r3, #31
 8002168:	18fb      	adds	r3, r7, r3
 800216a:	2201      	movs	r2, #1
 800216c:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800216e:	4b19      	ldr	r3, [pc, #100]	; (80021d4 <HAL_RCC_OscConfig+0x33c>)
 8002170:	681a      	ldr	r2, [r3, #0]
 8002172:	2380      	movs	r3, #128	; 0x80
 8002174:	005b      	lsls	r3, r3, #1
 8002176:	4013      	ands	r3, r2
 8002178:	d11a      	bne.n	80021b0 <HAL_RCC_OscConfig+0x318>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800217a:	4b16      	ldr	r3, [pc, #88]	; (80021d4 <HAL_RCC_OscConfig+0x33c>)
 800217c:	681a      	ldr	r2, [r3, #0]
 800217e:	4b15      	ldr	r3, [pc, #84]	; (80021d4 <HAL_RCC_OscConfig+0x33c>)
 8002180:	2180      	movs	r1, #128	; 0x80
 8002182:	0049      	lsls	r1, r1, #1
 8002184:	430a      	orrs	r2, r1
 8002186:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002188:	f7fe ff6e 	bl	8001068 <HAL_GetTick>
 800218c:	0003      	movs	r3, r0
 800218e:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002190:	e008      	b.n	80021a4 <HAL_RCC_OscConfig+0x30c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002192:	f7fe ff69 	bl	8001068 <HAL_GetTick>
 8002196:	0002      	movs	r2, r0
 8002198:	69bb      	ldr	r3, [r7, #24]
 800219a:	1ad3      	subs	r3, r2, r3
 800219c:	2b64      	cmp	r3, #100	; 0x64
 800219e:	d901      	bls.n	80021a4 <HAL_RCC_OscConfig+0x30c>
        {
          return HAL_TIMEOUT;
 80021a0:	2303      	movs	r3, #3
 80021a2:	e186      	b.n	80024b2 <HAL_RCC_OscConfig+0x61a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021a4:	4b0b      	ldr	r3, [pc, #44]	; (80021d4 <HAL_RCC_OscConfig+0x33c>)
 80021a6:	681a      	ldr	r2, [r3, #0]
 80021a8:	2380      	movs	r3, #128	; 0x80
 80021aa:	005b      	lsls	r3, r3, #1
 80021ac:	4013      	ands	r3, r2
 80021ae:	d0f0      	beq.n	8002192 <HAL_RCC_OscConfig+0x2fa>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	689b      	ldr	r3, [r3, #8]
 80021b4:	2b01      	cmp	r3, #1
 80021b6:	d10f      	bne.n	80021d8 <HAL_RCC_OscConfig+0x340>
 80021b8:	4b03      	ldr	r3, [pc, #12]	; (80021c8 <HAL_RCC_OscConfig+0x330>)
 80021ba:	6a1a      	ldr	r2, [r3, #32]
 80021bc:	4b02      	ldr	r3, [pc, #8]	; (80021c8 <HAL_RCC_OscConfig+0x330>)
 80021be:	2101      	movs	r1, #1
 80021c0:	430a      	orrs	r2, r1
 80021c2:	621a      	str	r2, [r3, #32]
 80021c4:	e036      	b.n	8002234 <HAL_RCC_OscConfig+0x39c>
 80021c6:	46c0      	nop			; (mov r8, r8)
 80021c8:	40021000 	.word	0x40021000
 80021cc:	fffeffff 	.word	0xfffeffff
 80021d0:	fffbffff 	.word	0xfffbffff
 80021d4:	40007000 	.word	0x40007000
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	689b      	ldr	r3, [r3, #8]
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d10c      	bne.n	80021fa <HAL_RCC_OscConfig+0x362>
 80021e0:	4bb6      	ldr	r3, [pc, #728]	; (80024bc <HAL_RCC_OscConfig+0x624>)
 80021e2:	6a1a      	ldr	r2, [r3, #32]
 80021e4:	4bb5      	ldr	r3, [pc, #724]	; (80024bc <HAL_RCC_OscConfig+0x624>)
 80021e6:	2101      	movs	r1, #1
 80021e8:	438a      	bics	r2, r1
 80021ea:	621a      	str	r2, [r3, #32]
 80021ec:	4bb3      	ldr	r3, [pc, #716]	; (80024bc <HAL_RCC_OscConfig+0x624>)
 80021ee:	6a1a      	ldr	r2, [r3, #32]
 80021f0:	4bb2      	ldr	r3, [pc, #712]	; (80024bc <HAL_RCC_OscConfig+0x624>)
 80021f2:	2104      	movs	r1, #4
 80021f4:	438a      	bics	r2, r1
 80021f6:	621a      	str	r2, [r3, #32]
 80021f8:	e01c      	b.n	8002234 <HAL_RCC_OscConfig+0x39c>
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	689b      	ldr	r3, [r3, #8]
 80021fe:	2b05      	cmp	r3, #5
 8002200:	d10c      	bne.n	800221c <HAL_RCC_OscConfig+0x384>
 8002202:	4bae      	ldr	r3, [pc, #696]	; (80024bc <HAL_RCC_OscConfig+0x624>)
 8002204:	6a1a      	ldr	r2, [r3, #32]
 8002206:	4bad      	ldr	r3, [pc, #692]	; (80024bc <HAL_RCC_OscConfig+0x624>)
 8002208:	2104      	movs	r1, #4
 800220a:	430a      	orrs	r2, r1
 800220c:	621a      	str	r2, [r3, #32]
 800220e:	4bab      	ldr	r3, [pc, #684]	; (80024bc <HAL_RCC_OscConfig+0x624>)
 8002210:	6a1a      	ldr	r2, [r3, #32]
 8002212:	4baa      	ldr	r3, [pc, #680]	; (80024bc <HAL_RCC_OscConfig+0x624>)
 8002214:	2101      	movs	r1, #1
 8002216:	430a      	orrs	r2, r1
 8002218:	621a      	str	r2, [r3, #32]
 800221a:	e00b      	b.n	8002234 <HAL_RCC_OscConfig+0x39c>
 800221c:	4ba7      	ldr	r3, [pc, #668]	; (80024bc <HAL_RCC_OscConfig+0x624>)
 800221e:	6a1a      	ldr	r2, [r3, #32]
 8002220:	4ba6      	ldr	r3, [pc, #664]	; (80024bc <HAL_RCC_OscConfig+0x624>)
 8002222:	2101      	movs	r1, #1
 8002224:	438a      	bics	r2, r1
 8002226:	621a      	str	r2, [r3, #32]
 8002228:	4ba4      	ldr	r3, [pc, #656]	; (80024bc <HAL_RCC_OscConfig+0x624>)
 800222a:	6a1a      	ldr	r2, [r3, #32]
 800222c:	4ba3      	ldr	r3, [pc, #652]	; (80024bc <HAL_RCC_OscConfig+0x624>)
 800222e:	2104      	movs	r1, #4
 8002230:	438a      	bics	r2, r1
 8002232:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	689b      	ldr	r3, [r3, #8]
 8002238:	2b00      	cmp	r3, #0
 800223a:	d014      	beq.n	8002266 <HAL_RCC_OscConfig+0x3ce>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800223c:	f7fe ff14 	bl	8001068 <HAL_GetTick>
 8002240:	0003      	movs	r3, r0
 8002242:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002244:	e009      	b.n	800225a <HAL_RCC_OscConfig+0x3c2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002246:	f7fe ff0f 	bl	8001068 <HAL_GetTick>
 800224a:	0002      	movs	r2, r0
 800224c:	69bb      	ldr	r3, [r7, #24]
 800224e:	1ad3      	subs	r3, r2, r3
 8002250:	4a9b      	ldr	r2, [pc, #620]	; (80024c0 <HAL_RCC_OscConfig+0x628>)
 8002252:	4293      	cmp	r3, r2
 8002254:	d901      	bls.n	800225a <HAL_RCC_OscConfig+0x3c2>
        {
          return HAL_TIMEOUT;
 8002256:	2303      	movs	r3, #3
 8002258:	e12b      	b.n	80024b2 <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800225a:	4b98      	ldr	r3, [pc, #608]	; (80024bc <HAL_RCC_OscConfig+0x624>)
 800225c:	6a1b      	ldr	r3, [r3, #32]
 800225e:	2202      	movs	r2, #2
 8002260:	4013      	ands	r3, r2
 8002262:	d0f0      	beq.n	8002246 <HAL_RCC_OscConfig+0x3ae>
 8002264:	e013      	b.n	800228e <HAL_RCC_OscConfig+0x3f6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002266:	f7fe feff 	bl	8001068 <HAL_GetTick>
 800226a:	0003      	movs	r3, r0
 800226c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800226e:	e009      	b.n	8002284 <HAL_RCC_OscConfig+0x3ec>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002270:	f7fe fefa 	bl	8001068 <HAL_GetTick>
 8002274:	0002      	movs	r2, r0
 8002276:	69bb      	ldr	r3, [r7, #24]
 8002278:	1ad3      	subs	r3, r2, r3
 800227a:	4a91      	ldr	r2, [pc, #580]	; (80024c0 <HAL_RCC_OscConfig+0x628>)
 800227c:	4293      	cmp	r3, r2
 800227e:	d901      	bls.n	8002284 <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 8002280:	2303      	movs	r3, #3
 8002282:	e116      	b.n	80024b2 <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002284:	4b8d      	ldr	r3, [pc, #564]	; (80024bc <HAL_RCC_OscConfig+0x624>)
 8002286:	6a1b      	ldr	r3, [r3, #32]
 8002288:	2202      	movs	r2, #2
 800228a:	4013      	ands	r3, r2
 800228c:	d1f0      	bne.n	8002270 <HAL_RCC_OscConfig+0x3d8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800228e:	231f      	movs	r3, #31
 8002290:	18fb      	adds	r3, r7, r3
 8002292:	781b      	ldrb	r3, [r3, #0]
 8002294:	2b01      	cmp	r3, #1
 8002296:	d105      	bne.n	80022a4 <HAL_RCC_OscConfig+0x40c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002298:	4b88      	ldr	r3, [pc, #544]	; (80024bc <HAL_RCC_OscConfig+0x624>)
 800229a:	69da      	ldr	r2, [r3, #28]
 800229c:	4b87      	ldr	r3, [pc, #540]	; (80024bc <HAL_RCC_OscConfig+0x624>)
 800229e:	4989      	ldr	r1, [pc, #548]	; (80024c4 <HAL_RCC_OscConfig+0x62c>)
 80022a0:	400a      	ands	r2, r1
 80022a2:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	2210      	movs	r2, #16
 80022aa:	4013      	ands	r3, r2
 80022ac:	d063      	beq.n	8002376 <HAL_RCC_OscConfig+0x4de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	695b      	ldr	r3, [r3, #20]
 80022b2:	2b01      	cmp	r3, #1
 80022b4:	d12a      	bne.n	800230c <HAL_RCC_OscConfig+0x474>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80022b6:	4b81      	ldr	r3, [pc, #516]	; (80024bc <HAL_RCC_OscConfig+0x624>)
 80022b8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80022ba:	4b80      	ldr	r3, [pc, #512]	; (80024bc <HAL_RCC_OscConfig+0x624>)
 80022bc:	2104      	movs	r1, #4
 80022be:	430a      	orrs	r2, r1
 80022c0:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 80022c2:	4b7e      	ldr	r3, [pc, #504]	; (80024bc <HAL_RCC_OscConfig+0x624>)
 80022c4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80022c6:	4b7d      	ldr	r3, [pc, #500]	; (80024bc <HAL_RCC_OscConfig+0x624>)
 80022c8:	2101      	movs	r1, #1
 80022ca:	430a      	orrs	r2, r1
 80022cc:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022ce:	f7fe fecb 	bl	8001068 <HAL_GetTick>
 80022d2:	0003      	movs	r3, r0
 80022d4:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80022d6:	e008      	b.n	80022ea <HAL_RCC_OscConfig+0x452>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80022d8:	f7fe fec6 	bl	8001068 <HAL_GetTick>
 80022dc:	0002      	movs	r2, r0
 80022de:	69bb      	ldr	r3, [r7, #24]
 80022e0:	1ad3      	subs	r3, r2, r3
 80022e2:	2b02      	cmp	r3, #2
 80022e4:	d901      	bls.n	80022ea <HAL_RCC_OscConfig+0x452>
        {
          return HAL_TIMEOUT;
 80022e6:	2303      	movs	r3, #3
 80022e8:	e0e3      	b.n	80024b2 <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80022ea:	4b74      	ldr	r3, [pc, #464]	; (80024bc <HAL_RCC_OscConfig+0x624>)
 80022ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80022ee:	2202      	movs	r2, #2
 80022f0:	4013      	ands	r3, r2
 80022f2:	d0f1      	beq.n	80022d8 <HAL_RCC_OscConfig+0x440>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80022f4:	4b71      	ldr	r3, [pc, #452]	; (80024bc <HAL_RCC_OscConfig+0x624>)
 80022f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80022f8:	22f8      	movs	r2, #248	; 0xf8
 80022fa:	4393      	bics	r3, r2
 80022fc:	0019      	movs	r1, r3
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	699b      	ldr	r3, [r3, #24]
 8002302:	00da      	lsls	r2, r3, #3
 8002304:	4b6d      	ldr	r3, [pc, #436]	; (80024bc <HAL_RCC_OscConfig+0x624>)
 8002306:	430a      	orrs	r2, r1
 8002308:	635a      	str	r2, [r3, #52]	; 0x34
 800230a:	e034      	b.n	8002376 <HAL_RCC_OscConfig+0x4de>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	695b      	ldr	r3, [r3, #20]
 8002310:	3305      	adds	r3, #5
 8002312:	d111      	bne.n	8002338 <HAL_RCC_OscConfig+0x4a0>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8002314:	4b69      	ldr	r3, [pc, #420]	; (80024bc <HAL_RCC_OscConfig+0x624>)
 8002316:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002318:	4b68      	ldr	r3, [pc, #416]	; (80024bc <HAL_RCC_OscConfig+0x624>)
 800231a:	2104      	movs	r1, #4
 800231c:	438a      	bics	r2, r1
 800231e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8002320:	4b66      	ldr	r3, [pc, #408]	; (80024bc <HAL_RCC_OscConfig+0x624>)
 8002322:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002324:	22f8      	movs	r2, #248	; 0xf8
 8002326:	4393      	bics	r3, r2
 8002328:	0019      	movs	r1, r3
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	699b      	ldr	r3, [r3, #24]
 800232e:	00da      	lsls	r2, r3, #3
 8002330:	4b62      	ldr	r3, [pc, #392]	; (80024bc <HAL_RCC_OscConfig+0x624>)
 8002332:	430a      	orrs	r2, r1
 8002334:	635a      	str	r2, [r3, #52]	; 0x34
 8002336:	e01e      	b.n	8002376 <HAL_RCC_OscConfig+0x4de>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8002338:	4b60      	ldr	r3, [pc, #384]	; (80024bc <HAL_RCC_OscConfig+0x624>)
 800233a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800233c:	4b5f      	ldr	r3, [pc, #380]	; (80024bc <HAL_RCC_OscConfig+0x624>)
 800233e:	2104      	movs	r1, #4
 8002340:	430a      	orrs	r2, r1
 8002342:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8002344:	4b5d      	ldr	r3, [pc, #372]	; (80024bc <HAL_RCC_OscConfig+0x624>)
 8002346:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002348:	4b5c      	ldr	r3, [pc, #368]	; (80024bc <HAL_RCC_OscConfig+0x624>)
 800234a:	2101      	movs	r1, #1
 800234c:	438a      	bics	r2, r1
 800234e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002350:	f7fe fe8a 	bl	8001068 <HAL_GetTick>
 8002354:	0003      	movs	r3, r0
 8002356:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8002358:	e008      	b.n	800236c <HAL_RCC_OscConfig+0x4d4>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800235a:	f7fe fe85 	bl	8001068 <HAL_GetTick>
 800235e:	0002      	movs	r2, r0
 8002360:	69bb      	ldr	r3, [r7, #24]
 8002362:	1ad3      	subs	r3, r2, r3
 8002364:	2b02      	cmp	r3, #2
 8002366:	d901      	bls.n	800236c <HAL_RCC_OscConfig+0x4d4>
        {
          return HAL_TIMEOUT;
 8002368:	2303      	movs	r3, #3
 800236a:	e0a2      	b.n	80024b2 <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 800236c:	4b53      	ldr	r3, [pc, #332]	; (80024bc <HAL_RCC_OscConfig+0x624>)
 800236e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002370:	2202      	movs	r2, #2
 8002372:	4013      	ands	r3, r2
 8002374:	d1f1      	bne.n	800235a <HAL_RCC_OscConfig+0x4c2>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	6a1b      	ldr	r3, [r3, #32]
 800237a:	2b00      	cmp	r3, #0
 800237c:	d100      	bne.n	8002380 <HAL_RCC_OscConfig+0x4e8>
 800237e:	e097      	b.n	80024b0 <HAL_RCC_OscConfig+0x618>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002380:	4b4e      	ldr	r3, [pc, #312]	; (80024bc <HAL_RCC_OscConfig+0x624>)
 8002382:	685b      	ldr	r3, [r3, #4]
 8002384:	220c      	movs	r2, #12
 8002386:	4013      	ands	r3, r2
 8002388:	2b08      	cmp	r3, #8
 800238a:	d100      	bne.n	800238e <HAL_RCC_OscConfig+0x4f6>
 800238c:	e06b      	b.n	8002466 <HAL_RCC_OscConfig+0x5ce>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	6a1b      	ldr	r3, [r3, #32]
 8002392:	2b02      	cmp	r3, #2
 8002394:	d14c      	bne.n	8002430 <HAL_RCC_OscConfig+0x598>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002396:	4b49      	ldr	r3, [pc, #292]	; (80024bc <HAL_RCC_OscConfig+0x624>)
 8002398:	681a      	ldr	r2, [r3, #0]
 800239a:	4b48      	ldr	r3, [pc, #288]	; (80024bc <HAL_RCC_OscConfig+0x624>)
 800239c:	494a      	ldr	r1, [pc, #296]	; (80024c8 <HAL_RCC_OscConfig+0x630>)
 800239e:	400a      	ands	r2, r1
 80023a0:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023a2:	f7fe fe61 	bl	8001068 <HAL_GetTick>
 80023a6:	0003      	movs	r3, r0
 80023a8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80023aa:	e008      	b.n	80023be <HAL_RCC_OscConfig+0x526>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80023ac:	f7fe fe5c 	bl	8001068 <HAL_GetTick>
 80023b0:	0002      	movs	r2, r0
 80023b2:	69bb      	ldr	r3, [r7, #24]
 80023b4:	1ad3      	subs	r3, r2, r3
 80023b6:	2b02      	cmp	r3, #2
 80023b8:	d901      	bls.n	80023be <HAL_RCC_OscConfig+0x526>
          {
            return HAL_TIMEOUT;
 80023ba:	2303      	movs	r3, #3
 80023bc:	e079      	b.n	80024b2 <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80023be:	4b3f      	ldr	r3, [pc, #252]	; (80024bc <HAL_RCC_OscConfig+0x624>)
 80023c0:	681a      	ldr	r2, [r3, #0]
 80023c2:	2380      	movs	r3, #128	; 0x80
 80023c4:	049b      	lsls	r3, r3, #18
 80023c6:	4013      	ands	r3, r2
 80023c8:	d1f0      	bne.n	80023ac <HAL_RCC_OscConfig+0x514>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80023ca:	4b3c      	ldr	r3, [pc, #240]	; (80024bc <HAL_RCC_OscConfig+0x624>)
 80023cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023ce:	220f      	movs	r2, #15
 80023d0:	4393      	bics	r3, r2
 80023d2:	0019      	movs	r1, r3
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80023d8:	4b38      	ldr	r3, [pc, #224]	; (80024bc <HAL_RCC_OscConfig+0x624>)
 80023da:	430a      	orrs	r2, r1
 80023dc:	62da      	str	r2, [r3, #44]	; 0x2c
 80023de:	4b37      	ldr	r3, [pc, #220]	; (80024bc <HAL_RCC_OscConfig+0x624>)
 80023e0:	685b      	ldr	r3, [r3, #4]
 80023e2:	4a3a      	ldr	r2, [pc, #232]	; (80024cc <HAL_RCC_OscConfig+0x634>)
 80023e4:	4013      	ands	r3, r2
 80023e6:	0019      	movs	r1, r3
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023f0:	431a      	orrs	r2, r3
 80023f2:	4b32      	ldr	r3, [pc, #200]	; (80024bc <HAL_RCC_OscConfig+0x624>)
 80023f4:	430a      	orrs	r2, r1
 80023f6:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80023f8:	4b30      	ldr	r3, [pc, #192]	; (80024bc <HAL_RCC_OscConfig+0x624>)
 80023fa:	681a      	ldr	r2, [r3, #0]
 80023fc:	4b2f      	ldr	r3, [pc, #188]	; (80024bc <HAL_RCC_OscConfig+0x624>)
 80023fe:	2180      	movs	r1, #128	; 0x80
 8002400:	0449      	lsls	r1, r1, #17
 8002402:	430a      	orrs	r2, r1
 8002404:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002406:	f7fe fe2f 	bl	8001068 <HAL_GetTick>
 800240a:	0003      	movs	r3, r0
 800240c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800240e:	e008      	b.n	8002422 <HAL_RCC_OscConfig+0x58a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002410:	f7fe fe2a 	bl	8001068 <HAL_GetTick>
 8002414:	0002      	movs	r2, r0
 8002416:	69bb      	ldr	r3, [r7, #24]
 8002418:	1ad3      	subs	r3, r2, r3
 800241a:	2b02      	cmp	r3, #2
 800241c:	d901      	bls.n	8002422 <HAL_RCC_OscConfig+0x58a>
          {
            return HAL_TIMEOUT;
 800241e:	2303      	movs	r3, #3
 8002420:	e047      	b.n	80024b2 <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002422:	4b26      	ldr	r3, [pc, #152]	; (80024bc <HAL_RCC_OscConfig+0x624>)
 8002424:	681a      	ldr	r2, [r3, #0]
 8002426:	2380      	movs	r3, #128	; 0x80
 8002428:	049b      	lsls	r3, r3, #18
 800242a:	4013      	ands	r3, r2
 800242c:	d0f0      	beq.n	8002410 <HAL_RCC_OscConfig+0x578>
 800242e:	e03f      	b.n	80024b0 <HAL_RCC_OscConfig+0x618>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002430:	4b22      	ldr	r3, [pc, #136]	; (80024bc <HAL_RCC_OscConfig+0x624>)
 8002432:	681a      	ldr	r2, [r3, #0]
 8002434:	4b21      	ldr	r3, [pc, #132]	; (80024bc <HAL_RCC_OscConfig+0x624>)
 8002436:	4924      	ldr	r1, [pc, #144]	; (80024c8 <HAL_RCC_OscConfig+0x630>)
 8002438:	400a      	ands	r2, r1
 800243a:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800243c:	f7fe fe14 	bl	8001068 <HAL_GetTick>
 8002440:	0003      	movs	r3, r0
 8002442:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002444:	e008      	b.n	8002458 <HAL_RCC_OscConfig+0x5c0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002446:	f7fe fe0f 	bl	8001068 <HAL_GetTick>
 800244a:	0002      	movs	r2, r0
 800244c:	69bb      	ldr	r3, [r7, #24]
 800244e:	1ad3      	subs	r3, r2, r3
 8002450:	2b02      	cmp	r3, #2
 8002452:	d901      	bls.n	8002458 <HAL_RCC_OscConfig+0x5c0>
          {
            return HAL_TIMEOUT;
 8002454:	2303      	movs	r3, #3
 8002456:	e02c      	b.n	80024b2 <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002458:	4b18      	ldr	r3, [pc, #96]	; (80024bc <HAL_RCC_OscConfig+0x624>)
 800245a:	681a      	ldr	r2, [r3, #0]
 800245c:	2380      	movs	r3, #128	; 0x80
 800245e:	049b      	lsls	r3, r3, #18
 8002460:	4013      	ands	r3, r2
 8002462:	d1f0      	bne.n	8002446 <HAL_RCC_OscConfig+0x5ae>
 8002464:	e024      	b.n	80024b0 <HAL_RCC_OscConfig+0x618>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	6a1b      	ldr	r3, [r3, #32]
 800246a:	2b01      	cmp	r3, #1
 800246c:	d101      	bne.n	8002472 <HAL_RCC_OscConfig+0x5da>
      {
        return HAL_ERROR;
 800246e:	2301      	movs	r3, #1
 8002470:	e01f      	b.n	80024b2 <HAL_RCC_OscConfig+0x61a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8002472:	4b12      	ldr	r3, [pc, #72]	; (80024bc <HAL_RCC_OscConfig+0x624>)
 8002474:	685b      	ldr	r3, [r3, #4]
 8002476:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8002478:	4b10      	ldr	r3, [pc, #64]	; (80024bc <HAL_RCC_OscConfig+0x624>)
 800247a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800247c:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800247e:	697a      	ldr	r2, [r7, #20]
 8002480:	2380      	movs	r3, #128	; 0x80
 8002482:	025b      	lsls	r3, r3, #9
 8002484:	401a      	ands	r2, r3
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800248a:	429a      	cmp	r2, r3
 800248c:	d10e      	bne.n	80024ac <HAL_RCC_OscConfig+0x614>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 800248e:	693b      	ldr	r3, [r7, #16]
 8002490:	220f      	movs	r2, #15
 8002492:	401a      	ands	r2, r3
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002498:	429a      	cmp	r2, r3
 800249a:	d107      	bne.n	80024ac <HAL_RCC_OscConfig+0x614>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 800249c:	697a      	ldr	r2, [r7, #20]
 800249e:	23f0      	movs	r3, #240	; 0xf0
 80024a0:	039b      	lsls	r3, r3, #14
 80024a2:	401a      	ands	r2, r3
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80024a8:	429a      	cmp	r2, r3
 80024aa:	d001      	beq.n	80024b0 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_ERROR;
 80024ac:	2301      	movs	r3, #1
 80024ae:	e000      	b.n	80024b2 <HAL_RCC_OscConfig+0x61a>
        }
      }
    }
  }

  return HAL_OK;
 80024b0:	2300      	movs	r3, #0
}
 80024b2:	0018      	movs	r0, r3
 80024b4:	46bd      	mov	sp, r7
 80024b6:	b008      	add	sp, #32
 80024b8:	bd80      	pop	{r7, pc}
 80024ba:	46c0      	nop			; (mov r8, r8)
 80024bc:	40021000 	.word	0x40021000
 80024c0:	00001388 	.word	0x00001388
 80024c4:	efffffff 	.word	0xefffffff
 80024c8:	feffffff 	.word	0xfeffffff
 80024cc:	ffc2ffff 	.word	0xffc2ffff

080024d0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80024d0:	b580      	push	{r7, lr}
 80024d2:	b084      	sub	sp, #16
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	6078      	str	r0, [r7, #4]
 80024d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d101      	bne.n	80024e4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80024e0:	2301      	movs	r3, #1
 80024e2:	e0b3      	b.n	800264c <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80024e4:	4b5b      	ldr	r3, [pc, #364]	; (8002654 <HAL_RCC_ClockConfig+0x184>)
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	2201      	movs	r2, #1
 80024ea:	4013      	ands	r3, r2
 80024ec:	683a      	ldr	r2, [r7, #0]
 80024ee:	429a      	cmp	r2, r3
 80024f0:	d911      	bls.n	8002516 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024f2:	4b58      	ldr	r3, [pc, #352]	; (8002654 <HAL_RCC_ClockConfig+0x184>)
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	2201      	movs	r2, #1
 80024f8:	4393      	bics	r3, r2
 80024fa:	0019      	movs	r1, r3
 80024fc:	4b55      	ldr	r3, [pc, #340]	; (8002654 <HAL_RCC_ClockConfig+0x184>)
 80024fe:	683a      	ldr	r2, [r7, #0]
 8002500:	430a      	orrs	r2, r1
 8002502:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002504:	4b53      	ldr	r3, [pc, #332]	; (8002654 <HAL_RCC_ClockConfig+0x184>)
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	2201      	movs	r2, #1
 800250a:	4013      	ands	r3, r2
 800250c:	683a      	ldr	r2, [r7, #0]
 800250e:	429a      	cmp	r2, r3
 8002510:	d001      	beq.n	8002516 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8002512:	2301      	movs	r3, #1
 8002514:	e09a      	b.n	800264c <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	2202      	movs	r2, #2
 800251c:	4013      	ands	r3, r2
 800251e:	d015      	beq.n	800254c <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	2204      	movs	r2, #4
 8002526:	4013      	ands	r3, r2
 8002528:	d006      	beq.n	8002538 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800252a:	4b4b      	ldr	r3, [pc, #300]	; (8002658 <HAL_RCC_ClockConfig+0x188>)
 800252c:	685a      	ldr	r2, [r3, #4]
 800252e:	4b4a      	ldr	r3, [pc, #296]	; (8002658 <HAL_RCC_ClockConfig+0x188>)
 8002530:	21e0      	movs	r1, #224	; 0xe0
 8002532:	00c9      	lsls	r1, r1, #3
 8002534:	430a      	orrs	r2, r1
 8002536:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002538:	4b47      	ldr	r3, [pc, #284]	; (8002658 <HAL_RCC_ClockConfig+0x188>)
 800253a:	685b      	ldr	r3, [r3, #4]
 800253c:	22f0      	movs	r2, #240	; 0xf0
 800253e:	4393      	bics	r3, r2
 8002540:	0019      	movs	r1, r3
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	689a      	ldr	r2, [r3, #8]
 8002546:	4b44      	ldr	r3, [pc, #272]	; (8002658 <HAL_RCC_ClockConfig+0x188>)
 8002548:	430a      	orrs	r2, r1
 800254a:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	2201      	movs	r2, #1
 8002552:	4013      	ands	r3, r2
 8002554:	d040      	beq.n	80025d8 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	685b      	ldr	r3, [r3, #4]
 800255a:	2b01      	cmp	r3, #1
 800255c:	d107      	bne.n	800256e <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800255e:	4b3e      	ldr	r3, [pc, #248]	; (8002658 <HAL_RCC_ClockConfig+0x188>)
 8002560:	681a      	ldr	r2, [r3, #0]
 8002562:	2380      	movs	r3, #128	; 0x80
 8002564:	029b      	lsls	r3, r3, #10
 8002566:	4013      	ands	r3, r2
 8002568:	d114      	bne.n	8002594 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 800256a:	2301      	movs	r3, #1
 800256c:	e06e      	b.n	800264c <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	685b      	ldr	r3, [r3, #4]
 8002572:	2b02      	cmp	r3, #2
 8002574:	d107      	bne.n	8002586 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002576:	4b38      	ldr	r3, [pc, #224]	; (8002658 <HAL_RCC_ClockConfig+0x188>)
 8002578:	681a      	ldr	r2, [r3, #0]
 800257a:	2380      	movs	r3, #128	; 0x80
 800257c:	049b      	lsls	r3, r3, #18
 800257e:	4013      	ands	r3, r2
 8002580:	d108      	bne.n	8002594 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8002582:	2301      	movs	r3, #1
 8002584:	e062      	b.n	800264c <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002586:	4b34      	ldr	r3, [pc, #208]	; (8002658 <HAL_RCC_ClockConfig+0x188>)
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	2202      	movs	r2, #2
 800258c:	4013      	ands	r3, r2
 800258e:	d101      	bne.n	8002594 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8002590:	2301      	movs	r3, #1
 8002592:	e05b      	b.n	800264c <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002594:	4b30      	ldr	r3, [pc, #192]	; (8002658 <HAL_RCC_ClockConfig+0x188>)
 8002596:	685b      	ldr	r3, [r3, #4]
 8002598:	2203      	movs	r2, #3
 800259a:	4393      	bics	r3, r2
 800259c:	0019      	movs	r1, r3
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	685a      	ldr	r2, [r3, #4]
 80025a2:	4b2d      	ldr	r3, [pc, #180]	; (8002658 <HAL_RCC_ClockConfig+0x188>)
 80025a4:	430a      	orrs	r2, r1
 80025a6:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80025a8:	f7fe fd5e 	bl	8001068 <HAL_GetTick>
 80025ac:	0003      	movs	r3, r0
 80025ae:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025b0:	e009      	b.n	80025c6 <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80025b2:	f7fe fd59 	bl	8001068 <HAL_GetTick>
 80025b6:	0002      	movs	r2, r0
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	1ad3      	subs	r3, r2, r3
 80025bc:	4a27      	ldr	r2, [pc, #156]	; (800265c <HAL_RCC_ClockConfig+0x18c>)
 80025be:	4293      	cmp	r3, r2
 80025c0:	d901      	bls.n	80025c6 <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 80025c2:	2303      	movs	r3, #3
 80025c4:	e042      	b.n	800264c <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025c6:	4b24      	ldr	r3, [pc, #144]	; (8002658 <HAL_RCC_ClockConfig+0x188>)
 80025c8:	685b      	ldr	r3, [r3, #4]
 80025ca:	220c      	movs	r2, #12
 80025cc:	401a      	ands	r2, r3
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	685b      	ldr	r3, [r3, #4]
 80025d2:	009b      	lsls	r3, r3, #2
 80025d4:	429a      	cmp	r2, r3
 80025d6:	d1ec      	bne.n	80025b2 <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80025d8:	4b1e      	ldr	r3, [pc, #120]	; (8002654 <HAL_RCC_ClockConfig+0x184>)
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	2201      	movs	r2, #1
 80025de:	4013      	ands	r3, r2
 80025e0:	683a      	ldr	r2, [r7, #0]
 80025e2:	429a      	cmp	r2, r3
 80025e4:	d211      	bcs.n	800260a <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025e6:	4b1b      	ldr	r3, [pc, #108]	; (8002654 <HAL_RCC_ClockConfig+0x184>)
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	2201      	movs	r2, #1
 80025ec:	4393      	bics	r3, r2
 80025ee:	0019      	movs	r1, r3
 80025f0:	4b18      	ldr	r3, [pc, #96]	; (8002654 <HAL_RCC_ClockConfig+0x184>)
 80025f2:	683a      	ldr	r2, [r7, #0]
 80025f4:	430a      	orrs	r2, r1
 80025f6:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80025f8:	4b16      	ldr	r3, [pc, #88]	; (8002654 <HAL_RCC_ClockConfig+0x184>)
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	2201      	movs	r2, #1
 80025fe:	4013      	ands	r3, r2
 8002600:	683a      	ldr	r2, [r7, #0]
 8002602:	429a      	cmp	r2, r3
 8002604:	d001      	beq.n	800260a <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 8002606:	2301      	movs	r3, #1
 8002608:	e020      	b.n	800264c <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	2204      	movs	r2, #4
 8002610:	4013      	ands	r3, r2
 8002612:	d009      	beq.n	8002628 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8002614:	4b10      	ldr	r3, [pc, #64]	; (8002658 <HAL_RCC_ClockConfig+0x188>)
 8002616:	685b      	ldr	r3, [r3, #4]
 8002618:	4a11      	ldr	r2, [pc, #68]	; (8002660 <HAL_RCC_ClockConfig+0x190>)
 800261a:	4013      	ands	r3, r2
 800261c:	0019      	movs	r1, r3
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	68da      	ldr	r2, [r3, #12]
 8002622:	4b0d      	ldr	r3, [pc, #52]	; (8002658 <HAL_RCC_ClockConfig+0x188>)
 8002624:	430a      	orrs	r2, r1
 8002626:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002628:	f000 f820 	bl	800266c <HAL_RCC_GetSysClockFreq>
 800262c:	0001      	movs	r1, r0
 800262e:	4b0a      	ldr	r3, [pc, #40]	; (8002658 <HAL_RCC_ClockConfig+0x188>)
 8002630:	685b      	ldr	r3, [r3, #4]
 8002632:	091b      	lsrs	r3, r3, #4
 8002634:	220f      	movs	r2, #15
 8002636:	4013      	ands	r3, r2
 8002638:	4a0a      	ldr	r2, [pc, #40]	; (8002664 <HAL_RCC_ClockConfig+0x194>)
 800263a:	5cd3      	ldrb	r3, [r2, r3]
 800263c:	000a      	movs	r2, r1
 800263e:	40da      	lsrs	r2, r3
 8002640:	4b09      	ldr	r3, [pc, #36]	; (8002668 <HAL_RCC_ClockConfig+0x198>)
 8002642:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8002644:	2000      	movs	r0, #0
 8002646:	f7fe fcc9 	bl	8000fdc <HAL_InitTick>
  
  return HAL_OK;
 800264a:	2300      	movs	r3, #0
}
 800264c:	0018      	movs	r0, r3
 800264e:	46bd      	mov	sp, r7
 8002650:	b004      	add	sp, #16
 8002652:	bd80      	pop	{r7, pc}
 8002654:	40022000 	.word	0x40022000
 8002658:	40021000 	.word	0x40021000
 800265c:	00001388 	.word	0x00001388
 8002660:	fffff8ff 	.word	0xfffff8ff
 8002664:	08003370 	.word	0x08003370
 8002668:	20000000 	.word	0x20000000

0800266c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800266c:	b590      	push	{r4, r7, lr}
 800266e:	b08f      	sub	sp, #60	; 0x3c
 8002670:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8002672:	2314      	movs	r3, #20
 8002674:	18fb      	adds	r3, r7, r3
 8002676:	4a2b      	ldr	r2, [pc, #172]	; (8002724 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002678:	ca13      	ldmia	r2!, {r0, r1, r4}
 800267a:	c313      	stmia	r3!, {r0, r1, r4}
 800267c:	6812      	ldr	r2, [r2, #0]
 800267e:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8002680:	1d3b      	adds	r3, r7, #4
 8002682:	4a29      	ldr	r2, [pc, #164]	; (8002728 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002684:	ca13      	ldmia	r2!, {r0, r1, r4}
 8002686:	c313      	stmia	r3!, {r0, r1, r4}
 8002688:	6812      	ldr	r2, [r2, #0]
 800268a:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800268c:	2300      	movs	r3, #0
 800268e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002690:	2300      	movs	r3, #0
 8002692:	62bb      	str	r3, [r7, #40]	; 0x28
 8002694:	2300      	movs	r3, #0
 8002696:	637b      	str	r3, [r7, #52]	; 0x34
 8002698:	2300      	movs	r3, #0
 800269a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 800269c:	2300      	movs	r3, #0
 800269e:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 80026a0:	4b22      	ldr	r3, [pc, #136]	; (800272c <HAL_RCC_GetSysClockFreq+0xc0>)
 80026a2:	685b      	ldr	r3, [r3, #4]
 80026a4:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80026a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026a8:	220c      	movs	r2, #12
 80026aa:	4013      	ands	r3, r2
 80026ac:	2b04      	cmp	r3, #4
 80026ae:	d002      	beq.n	80026b6 <HAL_RCC_GetSysClockFreq+0x4a>
 80026b0:	2b08      	cmp	r3, #8
 80026b2:	d003      	beq.n	80026bc <HAL_RCC_GetSysClockFreq+0x50>
 80026b4:	e02d      	b.n	8002712 <HAL_RCC_GetSysClockFreq+0xa6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80026b6:	4b1e      	ldr	r3, [pc, #120]	; (8002730 <HAL_RCC_GetSysClockFreq+0xc4>)
 80026b8:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80026ba:	e02d      	b.n	8002718 <HAL_RCC_GetSysClockFreq+0xac>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 80026bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026be:	0c9b      	lsrs	r3, r3, #18
 80026c0:	220f      	movs	r2, #15
 80026c2:	4013      	ands	r3, r2
 80026c4:	2214      	movs	r2, #20
 80026c6:	18ba      	adds	r2, r7, r2
 80026c8:	5cd3      	ldrb	r3, [r2, r3]
 80026ca:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 80026cc:	4b17      	ldr	r3, [pc, #92]	; (800272c <HAL_RCC_GetSysClockFreq+0xc0>)
 80026ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026d0:	220f      	movs	r2, #15
 80026d2:	4013      	ands	r3, r2
 80026d4:	1d3a      	adds	r2, r7, #4
 80026d6:	5cd3      	ldrb	r3, [r2, r3]
 80026d8:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80026da:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80026dc:	2380      	movs	r3, #128	; 0x80
 80026de:	025b      	lsls	r3, r3, #9
 80026e0:	4013      	ands	r3, r2
 80026e2:	d009      	beq.n	80026f8 <HAL_RCC_GetSysClockFreq+0x8c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80026e4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80026e6:	4812      	ldr	r0, [pc, #72]	; (8002730 <HAL_RCC_GetSysClockFreq+0xc4>)
 80026e8:	f7fd fd0e 	bl	8000108 <__udivsi3>
 80026ec:	0003      	movs	r3, r0
 80026ee:	001a      	movs	r2, r3
 80026f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026f2:	4353      	muls	r3, r2
 80026f4:	637b      	str	r3, [r7, #52]	; 0x34
 80026f6:	e009      	b.n	800270c <HAL_RCC_GetSysClockFreq+0xa0>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80026f8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80026fa:	000a      	movs	r2, r1
 80026fc:	0152      	lsls	r2, r2, #5
 80026fe:	1a52      	subs	r2, r2, r1
 8002700:	0193      	lsls	r3, r2, #6
 8002702:	1a9b      	subs	r3, r3, r2
 8002704:	00db      	lsls	r3, r3, #3
 8002706:	185b      	adds	r3, r3, r1
 8002708:	021b      	lsls	r3, r3, #8
 800270a:	637b      	str	r3, [r7, #52]	; 0x34
#endif
      }
      sysclockfreq = pllclk;
 800270c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800270e:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002710:	e002      	b.n	8002718 <HAL_RCC_GetSysClockFreq+0xac>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002712:	4b07      	ldr	r3, [pc, #28]	; (8002730 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002714:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002716:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8002718:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 800271a:	0018      	movs	r0, r3
 800271c:	46bd      	mov	sp, r7
 800271e:	b00f      	add	sp, #60	; 0x3c
 8002720:	bd90      	pop	{r4, r7, pc}
 8002722:	46c0      	nop			; (mov r8, r8)
 8002724:	08003350 	.word	0x08003350
 8002728:	08003360 	.word	0x08003360
 800272c:	40021000 	.word	0x40021000
 8002730:	007a1200 	.word	0x007a1200

08002734 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002734:	b580      	push	{r7, lr}
 8002736:	b082      	sub	sp, #8
 8002738:	af00      	add	r7, sp, #0
 800273a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	2b00      	cmp	r3, #0
 8002740:	d101      	bne.n	8002746 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002742:	2301      	movs	r3, #1
 8002744:	e01e      	b.n	8002784 <HAL_TIM_Base_Init+0x50>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	223d      	movs	r2, #61	; 0x3d
 800274a:	5c9b      	ldrb	r3, [r3, r2]
 800274c:	b2db      	uxtb	r3, r3
 800274e:	2b00      	cmp	r3, #0
 8002750:	d107      	bne.n	8002762 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	223c      	movs	r2, #60	; 0x3c
 8002756:	2100      	movs	r1, #0
 8002758:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	0018      	movs	r0, r3
 800275e:	f7fe f9bf 	bl	8000ae0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	223d      	movs	r2, #61	; 0x3d
 8002766:	2102      	movs	r1, #2
 8002768:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681a      	ldr	r2, [r3, #0]
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	3304      	adds	r3, #4
 8002772:	0019      	movs	r1, r3
 8002774:	0010      	movs	r0, r2
 8002776:	f000 f9f9 	bl	8002b6c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	223d      	movs	r2, #61	; 0x3d
 800277e:	2101      	movs	r1, #1
 8002780:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002782:	2300      	movs	r3, #0
}
 8002784:	0018      	movs	r0, r3
 8002786:	46bd      	mov	sp, r7
 8002788:	b002      	add	sp, #8
 800278a:	bd80      	pop	{r7, pc}

0800278c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800278c:	b580      	push	{r7, lr}
 800278e:	b082      	sub	sp, #8
 8002790:	af00      	add	r7, sp, #0
 8002792:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	2b00      	cmp	r3, #0
 8002798:	d101      	bne.n	800279e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800279a:	2301      	movs	r3, #1
 800279c:	e01e      	b.n	80027dc <HAL_TIM_PWM_Init+0x50>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	223d      	movs	r2, #61	; 0x3d
 80027a2:	5c9b      	ldrb	r3, [r3, r2]
 80027a4:	b2db      	uxtb	r3, r3
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d107      	bne.n	80027ba <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	223c      	movs	r2, #60	; 0x3c
 80027ae:	2100      	movs	r1, #0
 80027b0:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	0018      	movs	r0, r3
 80027b6:	f000 f815 	bl	80027e4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	223d      	movs	r2, #61	; 0x3d
 80027be:	2102      	movs	r1, #2
 80027c0:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681a      	ldr	r2, [r3, #0]
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	3304      	adds	r3, #4
 80027ca:	0019      	movs	r1, r3
 80027cc:	0010      	movs	r0, r2
 80027ce:	f000 f9cd 	bl	8002b6c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	223d      	movs	r2, #61	; 0x3d
 80027d6:	2101      	movs	r1, #1
 80027d8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80027da:	2300      	movs	r3, #0
}
 80027dc:	0018      	movs	r0, r3
 80027de:	46bd      	mov	sp, r7
 80027e0:	b002      	add	sp, #8
 80027e2:	bd80      	pop	{r7, pc}

080027e4 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80027e4:	b580      	push	{r7, lr}
 80027e6:	b082      	sub	sp, #8
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80027ec:	46c0      	nop			; (mov r8, r8)
 80027ee:	46bd      	mov	sp, r7
 80027f0:	b002      	add	sp, #8
 80027f2:	bd80      	pop	{r7, pc}

080027f4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80027f4:	b580      	push	{r7, lr}
 80027f6:	b084      	sub	sp, #16
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	6078      	str	r0, [r7, #4]
 80027fc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	6839      	ldr	r1, [r7, #0]
 8002804:	2201      	movs	r2, #1
 8002806:	0018      	movs	r0, r3
 8002808:	f000 fc96 	bl	8003138 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	4a18      	ldr	r2, [pc, #96]	; (8002874 <HAL_TIM_PWM_Start+0x80>)
 8002812:	4293      	cmp	r3, r2
 8002814:	d009      	beq.n	800282a <HAL_TIM_PWM_Start+0x36>
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	4a17      	ldr	r2, [pc, #92]	; (8002878 <HAL_TIM_PWM_Start+0x84>)
 800281c:	4293      	cmp	r3, r2
 800281e:	d004      	beq.n	800282a <HAL_TIM_PWM_Start+0x36>
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	4a15      	ldr	r2, [pc, #84]	; (800287c <HAL_TIM_PWM_Start+0x88>)
 8002826:	4293      	cmp	r3, r2
 8002828:	d101      	bne.n	800282e <HAL_TIM_PWM_Start+0x3a>
 800282a:	2301      	movs	r3, #1
 800282c:	e000      	b.n	8002830 <HAL_TIM_PWM_Start+0x3c>
 800282e:	2300      	movs	r3, #0
 8002830:	2b00      	cmp	r3, #0
 8002832:	d008      	beq.n	8002846 <HAL_TIM_PWM_Start+0x52>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	2180      	movs	r1, #128	; 0x80
 8002840:	0209      	lsls	r1, r1, #8
 8002842:	430a      	orrs	r2, r1
 8002844:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	689b      	ldr	r3, [r3, #8]
 800284c:	2207      	movs	r2, #7
 800284e:	4013      	ands	r3, r2
 8002850:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	2b06      	cmp	r3, #6
 8002856:	d007      	beq.n	8002868 <HAL_TIM_PWM_Start+0x74>
  {
    __HAL_TIM_ENABLE(htim);
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	681a      	ldr	r2, [r3, #0]
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	2101      	movs	r1, #1
 8002864:	430a      	orrs	r2, r1
 8002866:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002868:	2300      	movs	r3, #0
}
 800286a:	0018      	movs	r0, r3
 800286c:	46bd      	mov	sp, r7
 800286e:	b004      	add	sp, #16
 8002870:	bd80      	pop	{r7, pc}
 8002872:	46c0      	nop			; (mov r8, r8)
 8002874:	40012c00 	.word	0x40012c00
 8002878:	40014400 	.word	0x40014400
 800287c:	40014800 	.word	0x40014800

08002880 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002880:	b580      	push	{r7, lr}
 8002882:	b084      	sub	sp, #16
 8002884:	af00      	add	r7, sp, #0
 8002886:	60f8      	str	r0, [r7, #12]
 8002888:	60b9      	str	r1, [r7, #8]
 800288a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	223c      	movs	r2, #60	; 0x3c
 8002890:	5c9b      	ldrb	r3, [r3, r2]
 8002892:	2b01      	cmp	r3, #1
 8002894:	d101      	bne.n	800289a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8002896:	2302      	movs	r3, #2
 8002898:	e0a4      	b.n	80029e4 <HAL_TIM_PWM_ConfigChannel+0x164>
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	223c      	movs	r2, #60	; 0x3c
 800289e:	2101      	movs	r1, #1
 80028a0:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	223d      	movs	r2, #61	; 0x3d
 80028a6:	2102      	movs	r1, #2
 80028a8:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	2b04      	cmp	r3, #4
 80028ae:	d029      	beq.n	8002904 <HAL_TIM_PWM_ConfigChannel+0x84>
 80028b0:	d802      	bhi.n	80028b8 <HAL_TIM_PWM_ConfigChannel+0x38>
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d005      	beq.n	80028c2 <HAL_TIM_PWM_ConfigChannel+0x42>
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
      break;
    }

    default:
      break;
 80028b6:	e08c      	b.n	80029d2 <HAL_TIM_PWM_ConfigChannel+0x152>
  switch (Channel)
 80028b8:	2b08      	cmp	r3, #8
 80028ba:	d046      	beq.n	800294a <HAL_TIM_PWM_ConfigChannel+0xca>
 80028bc:	2b0c      	cmp	r3, #12
 80028be:	d065      	beq.n	800298c <HAL_TIM_PWM_ConfigChannel+0x10c>
      break;
 80028c0:	e087      	b.n	80029d2 <HAL_TIM_PWM_ConfigChannel+0x152>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	68ba      	ldr	r2, [r7, #8]
 80028c8:	0011      	movs	r1, r2
 80028ca:	0018      	movs	r0, r3
 80028cc:	f000 f9ba 	bl	8002c44 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	699a      	ldr	r2, [r3, #24]
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	2108      	movs	r1, #8
 80028dc:	430a      	orrs	r2, r1
 80028de:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	699a      	ldr	r2, [r3, #24]
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	2104      	movs	r1, #4
 80028ec:	438a      	bics	r2, r1
 80028ee:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	6999      	ldr	r1, [r3, #24]
 80028f6:	68bb      	ldr	r3, [r7, #8]
 80028f8:	691a      	ldr	r2, [r3, #16]
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	430a      	orrs	r2, r1
 8002900:	619a      	str	r2, [r3, #24]
      break;
 8002902:	e066      	b.n	80029d2 <HAL_TIM_PWM_ConfigChannel+0x152>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	68ba      	ldr	r2, [r7, #8]
 800290a:	0011      	movs	r1, r2
 800290c:	0018      	movs	r0, r3
 800290e:	f000 fa17 	bl	8002d40 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	699a      	ldr	r2, [r3, #24]
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	2180      	movs	r1, #128	; 0x80
 800291e:	0109      	lsls	r1, r1, #4
 8002920:	430a      	orrs	r2, r1
 8002922:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	699a      	ldr	r2, [r3, #24]
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	492f      	ldr	r1, [pc, #188]	; (80029ec <HAL_TIM_PWM_ConfigChannel+0x16c>)
 8002930:	400a      	ands	r2, r1
 8002932:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	6999      	ldr	r1, [r3, #24]
 800293a:	68bb      	ldr	r3, [r7, #8]
 800293c:	691b      	ldr	r3, [r3, #16]
 800293e:	021a      	lsls	r2, r3, #8
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	430a      	orrs	r2, r1
 8002946:	619a      	str	r2, [r3, #24]
      break;
 8002948:	e043      	b.n	80029d2 <HAL_TIM_PWM_ConfigChannel+0x152>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	68ba      	ldr	r2, [r7, #8]
 8002950:	0011      	movs	r1, r2
 8002952:	0018      	movs	r0, r3
 8002954:	f000 fa72 	bl	8002e3c <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	69da      	ldr	r2, [r3, #28]
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	2108      	movs	r1, #8
 8002964:	430a      	orrs	r2, r1
 8002966:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	69da      	ldr	r2, [r3, #28]
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	2104      	movs	r1, #4
 8002974:	438a      	bics	r2, r1
 8002976:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	69d9      	ldr	r1, [r3, #28]
 800297e:	68bb      	ldr	r3, [r7, #8]
 8002980:	691a      	ldr	r2, [r3, #16]
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	430a      	orrs	r2, r1
 8002988:	61da      	str	r2, [r3, #28]
      break;
 800298a:	e022      	b.n	80029d2 <HAL_TIM_PWM_ConfigChannel+0x152>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	68ba      	ldr	r2, [r7, #8]
 8002992:	0011      	movs	r1, r2
 8002994:	0018      	movs	r0, r3
 8002996:	f000 fad1 	bl	8002f3c <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	69da      	ldr	r2, [r3, #28]
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	2180      	movs	r1, #128	; 0x80
 80029a6:	0109      	lsls	r1, r1, #4
 80029a8:	430a      	orrs	r2, r1
 80029aa:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	69da      	ldr	r2, [r3, #28]
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	490d      	ldr	r1, [pc, #52]	; (80029ec <HAL_TIM_PWM_ConfigChannel+0x16c>)
 80029b8:	400a      	ands	r2, r1
 80029ba:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	69d9      	ldr	r1, [r3, #28]
 80029c2:	68bb      	ldr	r3, [r7, #8]
 80029c4:	691b      	ldr	r3, [r3, #16]
 80029c6:	021a      	lsls	r2, r3, #8
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	430a      	orrs	r2, r1
 80029ce:	61da      	str	r2, [r3, #28]
      break;
 80029d0:	46c0      	nop			; (mov r8, r8)
  }

  htim->State = HAL_TIM_STATE_READY;
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	223d      	movs	r2, #61	; 0x3d
 80029d6:	2101      	movs	r1, #1
 80029d8:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	223c      	movs	r2, #60	; 0x3c
 80029de:	2100      	movs	r1, #0
 80029e0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80029e2:	2300      	movs	r3, #0
}
 80029e4:	0018      	movs	r0, r3
 80029e6:	46bd      	mov	sp, r7
 80029e8:	b004      	add	sp, #16
 80029ea:	bd80      	pop	{r7, pc}
 80029ec:	fffffbff 	.word	0xfffffbff

080029f0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80029f0:	b580      	push	{r7, lr}
 80029f2:	b084      	sub	sp, #16
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	6078      	str	r0, [r7, #4]
 80029f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	223c      	movs	r2, #60	; 0x3c
 80029fe:	5c9b      	ldrb	r3, [r3, r2]
 8002a00:	2b01      	cmp	r3, #1
 8002a02:	d101      	bne.n	8002a08 <HAL_TIM_ConfigClockSource+0x18>
 8002a04:	2302      	movs	r3, #2
 8002a06:	e0ab      	b.n	8002b60 <HAL_TIM_ConfigClockSource+0x170>
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	223c      	movs	r2, #60	; 0x3c
 8002a0c:	2101      	movs	r1, #1
 8002a0e:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	223d      	movs	r2, #61	; 0x3d
 8002a14:	2102      	movs	r1, #2
 8002a16:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	689b      	ldr	r3, [r3, #8]
 8002a1e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	2277      	movs	r2, #119	; 0x77
 8002a24:	4393      	bics	r3, r2
 8002a26:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	4a4f      	ldr	r2, [pc, #316]	; (8002b68 <HAL_TIM_ConfigClockSource+0x178>)
 8002a2c:	4013      	ands	r3, r2
 8002a2e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	68fa      	ldr	r2, [r7, #12]
 8002a36:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002a38:	683b      	ldr	r3, [r7, #0]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	2b40      	cmp	r3, #64	; 0x40
 8002a3e:	d100      	bne.n	8002a42 <HAL_TIM_ConfigClockSource+0x52>
 8002a40:	e06b      	b.n	8002b1a <HAL_TIM_ConfigClockSource+0x12a>
 8002a42:	d80e      	bhi.n	8002a62 <HAL_TIM_ConfigClockSource+0x72>
 8002a44:	2b10      	cmp	r3, #16
 8002a46:	d100      	bne.n	8002a4a <HAL_TIM_ConfigClockSource+0x5a>
 8002a48:	e077      	b.n	8002b3a <HAL_TIM_ConfigClockSource+0x14a>
 8002a4a:	d803      	bhi.n	8002a54 <HAL_TIM_ConfigClockSource+0x64>
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d100      	bne.n	8002a52 <HAL_TIM_ConfigClockSource+0x62>
 8002a50:	e073      	b.n	8002b3a <HAL_TIM_ConfigClockSource+0x14a>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8002a52:	e07c      	b.n	8002b4e <HAL_TIM_ConfigClockSource+0x15e>
  switch (sClockSourceConfig->ClockSource)
 8002a54:	2b20      	cmp	r3, #32
 8002a56:	d100      	bne.n	8002a5a <HAL_TIM_ConfigClockSource+0x6a>
 8002a58:	e06f      	b.n	8002b3a <HAL_TIM_ConfigClockSource+0x14a>
 8002a5a:	2b30      	cmp	r3, #48	; 0x30
 8002a5c:	d100      	bne.n	8002a60 <HAL_TIM_ConfigClockSource+0x70>
 8002a5e:	e06c      	b.n	8002b3a <HAL_TIM_ConfigClockSource+0x14a>
      break;
 8002a60:	e075      	b.n	8002b4e <HAL_TIM_ConfigClockSource+0x15e>
  switch (sClockSourceConfig->ClockSource)
 8002a62:	2b70      	cmp	r3, #112	; 0x70
 8002a64:	d00e      	beq.n	8002a84 <HAL_TIM_ConfigClockSource+0x94>
 8002a66:	d804      	bhi.n	8002a72 <HAL_TIM_ConfigClockSource+0x82>
 8002a68:	2b50      	cmp	r3, #80	; 0x50
 8002a6a:	d036      	beq.n	8002ada <HAL_TIM_ConfigClockSource+0xea>
 8002a6c:	2b60      	cmp	r3, #96	; 0x60
 8002a6e:	d044      	beq.n	8002afa <HAL_TIM_ConfigClockSource+0x10a>
      break;
 8002a70:	e06d      	b.n	8002b4e <HAL_TIM_ConfigClockSource+0x15e>
  switch (sClockSourceConfig->ClockSource)
 8002a72:	2280      	movs	r2, #128	; 0x80
 8002a74:	0152      	lsls	r2, r2, #5
 8002a76:	4293      	cmp	r3, r2
 8002a78:	d068      	beq.n	8002b4c <HAL_TIM_ConfigClockSource+0x15c>
 8002a7a:	2280      	movs	r2, #128	; 0x80
 8002a7c:	0192      	lsls	r2, r2, #6
 8002a7e:	4293      	cmp	r3, r2
 8002a80:	d017      	beq.n	8002ab2 <HAL_TIM_ConfigClockSource+0xc2>
      break;
 8002a82:	e064      	b.n	8002b4e <HAL_TIM_ConfigClockSource+0x15e>
      TIM_ETR_SetConfig(htim->Instance,
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	6818      	ldr	r0, [r3, #0]
 8002a88:	683b      	ldr	r3, [r7, #0]
 8002a8a:	6899      	ldr	r1, [r3, #8]
 8002a8c:	683b      	ldr	r3, [r7, #0]
 8002a8e:	685a      	ldr	r2, [r3, #4]
 8002a90:	683b      	ldr	r3, [r7, #0]
 8002a92:	68db      	ldr	r3, [r3, #12]
 8002a94:	f000 fb30 	bl	80030f8 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	689b      	ldr	r3, [r3, #8]
 8002a9e:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	2277      	movs	r2, #119	; 0x77
 8002aa4:	4313      	orrs	r3, r2
 8002aa6:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	68fa      	ldr	r2, [r7, #12]
 8002aae:	609a      	str	r2, [r3, #8]
      break;
 8002ab0:	e04d      	b.n	8002b4e <HAL_TIM_ConfigClockSource+0x15e>
      TIM_ETR_SetConfig(htim->Instance,
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	6818      	ldr	r0, [r3, #0]
 8002ab6:	683b      	ldr	r3, [r7, #0]
 8002ab8:	6899      	ldr	r1, [r3, #8]
 8002aba:	683b      	ldr	r3, [r7, #0]
 8002abc:	685a      	ldr	r2, [r3, #4]
 8002abe:	683b      	ldr	r3, [r7, #0]
 8002ac0:	68db      	ldr	r3, [r3, #12]
 8002ac2:	f000 fb19 	bl	80030f8 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	689a      	ldr	r2, [r3, #8]
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	2180      	movs	r1, #128	; 0x80
 8002ad2:	01c9      	lsls	r1, r1, #7
 8002ad4:	430a      	orrs	r2, r1
 8002ad6:	609a      	str	r2, [r3, #8]
      break;
 8002ad8:	e039      	b.n	8002b4e <HAL_TIM_ConfigClockSource+0x15e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	6818      	ldr	r0, [r3, #0]
 8002ade:	683b      	ldr	r3, [r7, #0]
 8002ae0:	6859      	ldr	r1, [r3, #4]
 8002ae2:	683b      	ldr	r3, [r7, #0]
 8002ae4:	68db      	ldr	r3, [r3, #12]
 8002ae6:	001a      	movs	r2, r3
 8002ae8:	f000 fa8c 	bl	8003004 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	2150      	movs	r1, #80	; 0x50
 8002af2:	0018      	movs	r0, r3
 8002af4:	f000 fae6 	bl	80030c4 <TIM_ITRx_SetConfig>
      break;
 8002af8:	e029      	b.n	8002b4e <HAL_TIM_ConfigClockSource+0x15e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	6818      	ldr	r0, [r3, #0]
 8002afe:	683b      	ldr	r3, [r7, #0]
 8002b00:	6859      	ldr	r1, [r3, #4]
 8002b02:	683b      	ldr	r3, [r7, #0]
 8002b04:	68db      	ldr	r3, [r3, #12]
 8002b06:	001a      	movs	r2, r3
 8002b08:	f000 faaa 	bl	8003060 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	2160      	movs	r1, #96	; 0x60
 8002b12:	0018      	movs	r0, r3
 8002b14:	f000 fad6 	bl	80030c4 <TIM_ITRx_SetConfig>
      break;
 8002b18:	e019      	b.n	8002b4e <HAL_TIM_ConfigClockSource+0x15e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	6818      	ldr	r0, [r3, #0]
 8002b1e:	683b      	ldr	r3, [r7, #0]
 8002b20:	6859      	ldr	r1, [r3, #4]
 8002b22:	683b      	ldr	r3, [r7, #0]
 8002b24:	68db      	ldr	r3, [r3, #12]
 8002b26:	001a      	movs	r2, r3
 8002b28:	f000 fa6c 	bl	8003004 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	2140      	movs	r1, #64	; 0x40
 8002b32:	0018      	movs	r0, r3
 8002b34:	f000 fac6 	bl	80030c4 <TIM_ITRx_SetConfig>
      break;
 8002b38:	e009      	b.n	8002b4e <HAL_TIM_ConfigClockSource+0x15e>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681a      	ldr	r2, [r3, #0]
 8002b3e:	683b      	ldr	r3, [r7, #0]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	0019      	movs	r1, r3
 8002b44:	0010      	movs	r0, r2
 8002b46:	f000 fabd 	bl	80030c4 <TIM_ITRx_SetConfig>
      break;
 8002b4a:	e000      	b.n	8002b4e <HAL_TIM_ConfigClockSource+0x15e>
      break;
 8002b4c:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	223d      	movs	r2, #61	; 0x3d
 8002b52:	2101      	movs	r1, #1
 8002b54:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	223c      	movs	r2, #60	; 0x3c
 8002b5a:	2100      	movs	r1, #0
 8002b5c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002b5e:	2300      	movs	r3, #0
}
 8002b60:	0018      	movs	r0, r3
 8002b62:	46bd      	mov	sp, r7
 8002b64:	b004      	add	sp, #16
 8002b66:	bd80      	pop	{r7, pc}
 8002b68:	ffff00ff 	.word	0xffff00ff

08002b6c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002b6c:	b580      	push	{r7, lr}
 8002b6e:	b084      	sub	sp, #16
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	6078      	str	r0, [r7, #4]
 8002b74:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	4a2b      	ldr	r2, [pc, #172]	; (8002c2c <TIM_Base_SetConfig+0xc0>)
 8002b80:	4293      	cmp	r3, r2
 8002b82:	d003      	beq.n	8002b8c <TIM_Base_SetConfig+0x20>
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	4a2a      	ldr	r2, [pc, #168]	; (8002c30 <TIM_Base_SetConfig+0xc4>)
 8002b88:	4293      	cmp	r3, r2
 8002b8a:	d108      	bne.n	8002b9e <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	2270      	movs	r2, #112	; 0x70
 8002b90:	4393      	bics	r3, r2
 8002b92:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002b94:	683b      	ldr	r3, [r7, #0]
 8002b96:	685b      	ldr	r3, [r3, #4]
 8002b98:	68fa      	ldr	r2, [r7, #12]
 8002b9a:	4313      	orrs	r3, r2
 8002b9c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	4a22      	ldr	r2, [pc, #136]	; (8002c2c <TIM_Base_SetConfig+0xc0>)
 8002ba2:	4293      	cmp	r3, r2
 8002ba4:	d00f      	beq.n	8002bc6 <TIM_Base_SetConfig+0x5a>
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	4a21      	ldr	r2, [pc, #132]	; (8002c30 <TIM_Base_SetConfig+0xc4>)
 8002baa:	4293      	cmp	r3, r2
 8002bac:	d00b      	beq.n	8002bc6 <TIM_Base_SetConfig+0x5a>
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	4a20      	ldr	r2, [pc, #128]	; (8002c34 <TIM_Base_SetConfig+0xc8>)
 8002bb2:	4293      	cmp	r3, r2
 8002bb4:	d007      	beq.n	8002bc6 <TIM_Base_SetConfig+0x5a>
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	4a1f      	ldr	r2, [pc, #124]	; (8002c38 <TIM_Base_SetConfig+0xcc>)
 8002bba:	4293      	cmp	r3, r2
 8002bbc:	d003      	beq.n	8002bc6 <TIM_Base_SetConfig+0x5a>
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	4a1e      	ldr	r2, [pc, #120]	; (8002c3c <TIM_Base_SetConfig+0xd0>)
 8002bc2:	4293      	cmp	r3, r2
 8002bc4:	d108      	bne.n	8002bd8 <TIM_Base_SetConfig+0x6c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	4a1d      	ldr	r2, [pc, #116]	; (8002c40 <TIM_Base_SetConfig+0xd4>)
 8002bca:	4013      	ands	r3, r2
 8002bcc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002bce:	683b      	ldr	r3, [r7, #0]
 8002bd0:	68db      	ldr	r3, [r3, #12]
 8002bd2:	68fa      	ldr	r2, [r7, #12]
 8002bd4:	4313      	orrs	r3, r2
 8002bd6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	2280      	movs	r2, #128	; 0x80
 8002bdc:	4393      	bics	r3, r2
 8002bde:	001a      	movs	r2, r3
 8002be0:	683b      	ldr	r3, [r7, #0]
 8002be2:	695b      	ldr	r3, [r3, #20]
 8002be4:	4313      	orrs	r3, r2
 8002be6:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	68fa      	ldr	r2, [r7, #12]
 8002bec:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002bee:	683b      	ldr	r3, [r7, #0]
 8002bf0:	689a      	ldr	r2, [r3, #8]
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002bf6:	683b      	ldr	r3, [r7, #0]
 8002bf8:	681a      	ldr	r2, [r3, #0]
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	4a0a      	ldr	r2, [pc, #40]	; (8002c2c <TIM_Base_SetConfig+0xc0>)
 8002c02:	4293      	cmp	r3, r2
 8002c04:	d007      	beq.n	8002c16 <TIM_Base_SetConfig+0xaa>
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	4a0b      	ldr	r2, [pc, #44]	; (8002c38 <TIM_Base_SetConfig+0xcc>)
 8002c0a:	4293      	cmp	r3, r2
 8002c0c:	d003      	beq.n	8002c16 <TIM_Base_SetConfig+0xaa>
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	4a0a      	ldr	r2, [pc, #40]	; (8002c3c <TIM_Base_SetConfig+0xd0>)
 8002c12:	4293      	cmp	r3, r2
 8002c14:	d103      	bne.n	8002c1e <TIM_Base_SetConfig+0xb2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002c16:	683b      	ldr	r3, [r7, #0]
 8002c18:	691a      	ldr	r2, [r3, #16]
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	2201      	movs	r2, #1
 8002c22:	615a      	str	r2, [r3, #20]
}
 8002c24:	46c0      	nop			; (mov r8, r8)
 8002c26:	46bd      	mov	sp, r7
 8002c28:	b004      	add	sp, #16
 8002c2a:	bd80      	pop	{r7, pc}
 8002c2c:	40012c00 	.word	0x40012c00
 8002c30:	40000400 	.word	0x40000400
 8002c34:	40002000 	.word	0x40002000
 8002c38:	40014400 	.word	0x40014400
 8002c3c:	40014800 	.word	0x40014800
 8002c40:	fffffcff 	.word	0xfffffcff

08002c44 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002c44:	b580      	push	{r7, lr}
 8002c46:	b086      	sub	sp, #24
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	6078      	str	r0, [r7, #4]
 8002c4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	6a1b      	ldr	r3, [r3, #32]
 8002c52:	2201      	movs	r2, #1
 8002c54:	4393      	bics	r3, r2
 8002c56:	001a      	movs	r2, r3
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	6a1b      	ldr	r3, [r3, #32]
 8002c60:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	685b      	ldr	r3, [r3, #4]
 8002c66:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	699b      	ldr	r3, [r3, #24]
 8002c6c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	2270      	movs	r2, #112	; 0x70
 8002c72:	4393      	bics	r3, r2
 8002c74:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	2203      	movs	r2, #3
 8002c7a:	4393      	bics	r3, r2
 8002c7c:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002c7e:	683b      	ldr	r3, [r7, #0]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	68fa      	ldr	r2, [r7, #12]
 8002c84:	4313      	orrs	r3, r2
 8002c86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002c88:	697b      	ldr	r3, [r7, #20]
 8002c8a:	2202      	movs	r2, #2
 8002c8c:	4393      	bics	r3, r2
 8002c8e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002c90:	683b      	ldr	r3, [r7, #0]
 8002c92:	689b      	ldr	r3, [r3, #8]
 8002c94:	697a      	ldr	r2, [r7, #20]
 8002c96:	4313      	orrs	r3, r2
 8002c98:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	4a23      	ldr	r2, [pc, #140]	; (8002d2c <TIM_OC1_SetConfig+0xe8>)
 8002c9e:	4293      	cmp	r3, r2
 8002ca0:	d007      	beq.n	8002cb2 <TIM_OC1_SetConfig+0x6e>
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	4a22      	ldr	r2, [pc, #136]	; (8002d30 <TIM_OC1_SetConfig+0xec>)
 8002ca6:	4293      	cmp	r3, r2
 8002ca8:	d003      	beq.n	8002cb2 <TIM_OC1_SetConfig+0x6e>
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	4a21      	ldr	r2, [pc, #132]	; (8002d34 <TIM_OC1_SetConfig+0xf0>)
 8002cae:	4293      	cmp	r3, r2
 8002cb0:	d10c      	bne.n	8002ccc <TIM_OC1_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002cb2:	697b      	ldr	r3, [r7, #20]
 8002cb4:	2208      	movs	r2, #8
 8002cb6:	4393      	bics	r3, r2
 8002cb8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002cba:	683b      	ldr	r3, [r7, #0]
 8002cbc:	68db      	ldr	r3, [r3, #12]
 8002cbe:	697a      	ldr	r2, [r7, #20]
 8002cc0:	4313      	orrs	r3, r2
 8002cc2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002cc4:	697b      	ldr	r3, [r7, #20]
 8002cc6:	2204      	movs	r2, #4
 8002cc8:	4393      	bics	r3, r2
 8002cca:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	4a17      	ldr	r2, [pc, #92]	; (8002d2c <TIM_OC1_SetConfig+0xe8>)
 8002cd0:	4293      	cmp	r3, r2
 8002cd2:	d007      	beq.n	8002ce4 <TIM_OC1_SetConfig+0xa0>
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	4a16      	ldr	r2, [pc, #88]	; (8002d30 <TIM_OC1_SetConfig+0xec>)
 8002cd8:	4293      	cmp	r3, r2
 8002cda:	d003      	beq.n	8002ce4 <TIM_OC1_SetConfig+0xa0>
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	4a15      	ldr	r2, [pc, #84]	; (8002d34 <TIM_OC1_SetConfig+0xf0>)
 8002ce0:	4293      	cmp	r3, r2
 8002ce2:	d111      	bne.n	8002d08 <TIM_OC1_SetConfig+0xc4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002ce4:	693b      	ldr	r3, [r7, #16]
 8002ce6:	4a14      	ldr	r2, [pc, #80]	; (8002d38 <TIM_OC1_SetConfig+0xf4>)
 8002ce8:	4013      	ands	r3, r2
 8002cea:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002cec:	693b      	ldr	r3, [r7, #16]
 8002cee:	4a13      	ldr	r2, [pc, #76]	; (8002d3c <TIM_OC1_SetConfig+0xf8>)
 8002cf0:	4013      	ands	r3, r2
 8002cf2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002cf4:	683b      	ldr	r3, [r7, #0]
 8002cf6:	695b      	ldr	r3, [r3, #20]
 8002cf8:	693a      	ldr	r2, [r7, #16]
 8002cfa:	4313      	orrs	r3, r2
 8002cfc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002cfe:	683b      	ldr	r3, [r7, #0]
 8002d00:	699b      	ldr	r3, [r3, #24]
 8002d02:	693a      	ldr	r2, [r7, #16]
 8002d04:	4313      	orrs	r3, r2
 8002d06:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	693a      	ldr	r2, [r7, #16]
 8002d0c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	68fa      	ldr	r2, [r7, #12]
 8002d12:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002d14:	683b      	ldr	r3, [r7, #0]
 8002d16:	685a      	ldr	r2, [r3, #4]
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	697a      	ldr	r2, [r7, #20]
 8002d20:	621a      	str	r2, [r3, #32]
}
 8002d22:	46c0      	nop			; (mov r8, r8)
 8002d24:	46bd      	mov	sp, r7
 8002d26:	b006      	add	sp, #24
 8002d28:	bd80      	pop	{r7, pc}
 8002d2a:	46c0      	nop			; (mov r8, r8)
 8002d2c:	40012c00 	.word	0x40012c00
 8002d30:	40014400 	.word	0x40014400
 8002d34:	40014800 	.word	0x40014800
 8002d38:	fffffeff 	.word	0xfffffeff
 8002d3c:	fffffdff 	.word	0xfffffdff

08002d40 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002d40:	b580      	push	{r7, lr}
 8002d42:	b086      	sub	sp, #24
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	6078      	str	r0, [r7, #4]
 8002d48:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	6a1b      	ldr	r3, [r3, #32]
 8002d4e:	2210      	movs	r2, #16
 8002d50:	4393      	bics	r3, r2
 8002d52:	001a      	movs	r2, r3
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	6a1b      	ldr	r3, [r3, #32]
 8002d5c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	685b      	ldr	r3, [r3, #4]
 8002d62:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	699b      	ldr	r3, [r3, #24]
 8002d68:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	4a2c      	ldr	r2, [pc, #176]	; (8002e20 <TIM_OC2_SetConfig+0xe0>)
 8002d6e:	4013      	ands	r3, r2
 8002d70:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	4a2b      	ldr	r2, [pc, #172]	; (8002e24 <TIM_OC2_SetConfig+0xe4>)
 8002d76:	4013      	ands	r3, r2
 8002d78:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002d7a:	683b      	ldr	r3, [r7, #0]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	021b      	lsls	r3, r3, #8
 8002d80:	68fa      	ldr	r2, [r7, #12]
 8002d82:	4313      	orrs	r3, r2
 8002d84:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002d86:	697b      	ldr	r3, [r7, #20]
 8002d88:	2220      	movs	r2, #32
 8002d8a:	4393      	bics	r3, r2
 8002d8c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002d8e:	683b      	ldr	r3, [r7, #0]
 8002d90:	689b      	ldr	r3, [r3, #8]
 8002d92:	011b      	lsls	r3, r3, #4
 8002d94:	697a      	ldr	r2, [r7, #20]
 8002d96:	4313      	orrs	r3, r2
 8002d98:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	4a22      	ldr	r2, [pc, #136]	; (8002e28 <TIM_OC2_SetConfig+0xe8>)
 8002d9e:	4293      	cmp	r3, r2
 8002da0:	d10d      	bne.n	8002dbe <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002da2:	697b      	ldr	r3, [r7, #20]
 8002da4:	2280      	movs	r2, #128	; 0x80
 8002da6:	4393      	bics	r3, r2
 8002da8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002daa:	683b      	ldr	r3, [r7, #0]
 8002dac:	68db      	ldr	r3, [r3, #12]
 8002dae:	011b      	lsls	r3, r3, #4
 8002db0:	697a      	ldr	r2, [r7, #20]
 8002db2:	4313      	orrs	r3, r2
 8002db4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002db6:	697b      	ldr	r3, [r7, #20]
 8002db8:	2240      	movs	r2, #64	; 0x40
 8002dba:	4393      	bics	r3, r2
 8002dbc:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	4a19      	ldr	r2, [pc, #100]	; (8002e28 <TIM_OC2_SetConfig+0xe8>)
 8002dc2:	4293      	cmp	r3, r2
 8002dc4:	d007      	beq.n	8002dd6 <TIM_OC2_SetConfig+0x96>
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	4a18      	ldr	r2, [pc, #96]	; (8002e2c <TIM_OC2_SetConfig+0xec>)
 8002dca:	4293      	cmp	r3, r2
 8002dcc:	d003      	beq.n	8002dd6 <TIM_OC2_SetConfig+0x96>
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	4a17      	ldr	r2, [pc, #92]	; (8002e30 <TIM_OC2_SetConfig+0xf0>)
 8002dd2:	4293      	cmp	r3, r2
 8002dd4:	d113      	bne.n	8002dfe <TIM_OC2_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002dd6:	693b      	ldr	r3, [r7, #16]
 8002dd8:	4a16      	ldr	r2, [pc, #88]	; (8002e34 <TIM_OC2_SetConfig+0xf4>)
 8002dda:	4013      	ands	r3, r2
 8002ddc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002dde:	693b      	ldr	r3, [r7, #16]
 8002de0:	4a15      	ldr	r2, [pc, #84]	; (8002e38 <TIM_OC2_SetConfig+0xf8>)
 8002de2:	4013      	ands	r3, r2
 8002de4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002de6:	683b      	ldr	r3, [r7, #0]
 8002de8:	695b      	ldr	r3, [r3, #20]
 8002dea:	009b      	lsls	r3, r3, #2
 8002dec:	693a      	ldr	r2, [r7, #16]
 8002dee:	4313      	orrs	r3, r2
 8002df0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002df2:	683b      	ldr	r3, [r7, #0]
 8002df4:	699b      	ldr	r3, [r3, #24]
 8002df6:	009b      	lsls	r3, r3, #2
 8002df8:	693a      	ldr	r2, [r7, #16]
 8002dfa:	4313      	orrs	r3, r2
 8002dfc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	693a      	ldr	r2, [r7, #16]
 8002e02:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	68fa      	ldr	r2, [r7, #12]
 8002e08:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002e0a:	683b      	ldr	r3, [r7, #0]
 8002e0c:	685a      	ldr	r2, [r3, #4]
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	697a      	ldr	r2, [r7, #20]
 8002e16:	621a      	str	r2, [r3, #32]
}
 8002e18:	46c0      	nop			; (mov r8, r8)
 8002e1a:	46bd      	mov	sp, r7
 8002e1c:	b006      	add	sp, #24
 8002e1e:	bd80      	pop	{r7, pc}
 8002e20:	ffff8fff 	.word	0xffff8fff
 8002e24:	fffffcff 	.word	0xfffffcff
 8002e28:	40012c00 	.word	0x40012c00
 8002e2c:	40014400 	.word	0x40014400
 8002e30:	40014800 	.word	0x40014800
 8002e34:	fffffbff 	.word	0xfffffbff
 8002e38:	fffff7ff 	.word	0xfffff7ff

08002e3c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002e3c:	b580      	push	{r7, lr}
 8002e3e:	b086      	sub	sp, #24
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	6078      	str	r0, [r7, #4]
 8002e44:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	6a1b      	ldr	r3, [r3, #32]
 8002e4a:	4a33      	ldr	r2, [pc, #204]	; (8002f18 <TIM_OC3_SetConfig+0xdc>)
 8002e4c:	401a      	ands	r2, r3
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	6a1b      	ldr	r3, [r3, #32]
 8002e56:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	685b      	ldr	r3, [r3, #4]
 8002e5c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	69db      	ldr	r3, [r3, #28]
 8002e62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	2270      	movs	r2, #112	; 0x70
 8002e68:	4393      	bics	r3, r2
 8002e6a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	2203      	movs	r2, #3
 8002e70:	4393      	bics	r3, r2
 8002e72:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002e74:	683b      	ldr	r3, [r7, #0]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	68fa      	ldr	r2, [r7, #12]
 8002e7a:	4313      	orrs	r3, r2
 8002e7c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002e7e:	697b      	ldr	r3, [r7, #20]
 8002e80:	4a26      	ldr	r2, [pc, #152]	; (8002f1c <TIM_OC3_SetConfig+0xe0>)
 8002e82:	4013      	ands	r3, r2
 8002e84:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002e86:	683b      	ldr	r3, [r7, #0]
 8002e88:	689b      	ldr	r3, [r3, #8]
 8002e8a:	021b      	lsls	r3, r3, #8
 8002e8c:	697a      	ldr	r2, [r7, #20]
 8002e8e:	4313      	orrs	r3, r2
 8002e90:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	4a22      	ldr	r2, [pc, #136]	; (8002f20 <TIM_OC3_SetConfig+0xe4>)
 8002e96:	4293      	cmp	r3, r2
 8002e98:	d10d      	bne.n	8002eb6 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002e9a:	697b      	ldr	r3, [r7, #20]
 8002e9c:	4a21      	ldr	r2, [pc, #132]	; (8002f24 <TIM_OC3_SetConfig+0xe8>)
 8002e9e:	4013      	ands	r3, r2
 8002ea0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002ea2:	683b      	ldr	r3, [r7, #0]
 8002ea4:	68db      	ldr	r3, [r3, #12]
 8002ea6:	021b      	lsls	r3, r3, #8
 8002ea8:	697a      	ldr	r2, [r7, #20]
 8002eaa:	4313      	orrs	r3, r2
 8002eac:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002eae:	697b      	ldr	r3, [r7, #20]
 8002eb0:	4a1d      	ldr	r2, [pc, #116]	; (8002f28 <TIM_OC3_SetConfig+0xec>)
 8002eb2:	4013      	ands	r3, r2
 8002eb4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	4a19      	ldr	r2, [pc, #100]	; (8002f20 <TIM_OC3_SetConfig+0xe4>)
 8002eba:	4293      	cmp	r3, r2
 8002ebc:	d007      	beq.n	8002ece <TIM_OC3_SetConfig+0x92>
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	4a1a      	ldr	r2, [pc, #104]	; (8002f2c <TIM_OC3_SetConfig+0xf0>)
 8002ec2:	4293      	cmp	r3, r2
 8002ec4:	d003      	beq.n	8002ece <TIM_OC3_SetConfig+0x92>
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	4a19      	ldr	r2, [pc, #100]	; (8002f30 <TIM_OC3_SetConfig+0xf4>)
 8002eca:	4293      	cmp	r3, r2
 8002ecc:	d113      	bne.n	8002ef6 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002ece:	693b      	ldr	r3, [r7, #16]
 8002ed0:	4a18      	ldr	r2, [pc, #96]	; (8002f34 <TIM_OC3_SetConfig+0xf8>)
 8002ed2:	4013      	ands	r3, r2
 8002ed4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002ed6:	693b      	ldr	r3, [r7, #16]
 8002ed8:	4a17      	ldr	r2, [pc, #92]	; (8002f38 <TIM_OC3_SetConfig+0xfc>)
 8002eda:	4013      	ands	r3, r2
 8002edc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002ede:	683b      	ldr	r3, [r7, #0]
 8002ee0:	695b      	ldr	r3, [r3, #20]
 8002ee2:	011b      	lsls	r3, r3, #4
 8002ee4:	693a      	ldr	r2, [r7, #16]
 8002ee6:	4313      	orrs	r3, r2
 8002ee8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002eea:	683b      	ldr	r3, [r7, #0]
 8002eec:	699b      	ldr	r3, [r3, #24]
 8002eee:	011b      	lsls	r3, r3, #4
 8002ef0:	693a      	ldr	r2, [r7, #16]
 8002ef2:	4313      	orrs	r3, r2
 8002ef4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	693a      	ldr	r2, [r7, #16]
 8002efa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	68fa      	ldr	r2, [r7, #12]
 8002f00:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002f02:	683b      	ldr	r3, [r7, #0]
 8002f04:	685a      	ldr	r2, [r3, #4]
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	697a      	ldr	r2, [r7, #20]
 8002f0e:	621a      	str	r2, [r3, #32]
}
 8002f10:	46c0      	nop			; (mov r8, r8)
 8002f12:	46bd      	mov	sp, r7
 8002f14:	b006      	add	sp, #24
 8002f16:	bd80      	pop	{r7, pc}
 8002f18:	fffffeff 	.word	0xfffffeff
 8002f1c:	fffffdff 	.word	0xfffffdff
 8002f20:	40012c00 	.word	0x40012c00
 8002f24:	fffff7ff 	.word	0xfffff7ff
 8002f28:	fffffbff 	.word	0xfffffbff
 8002f2c:	40014400 	.word	0x40014400
 8002f30:	40014800 	.word	0x40014800
 8002f34:	ffffefff 	.word	0xffffefff
 8002f38:	ffffdfff 	.word	0xffffdfff

08002f3c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002f3c:	b580      	push	{r7, lr}
 8002f3e:	b086      	sub	sp, #24
 8002f40:	af00      	add	r7, sp, #0
 8002f42:	6078      	str	r0, [r7, #4]
 8002f44:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	6a1b      	ldr	r3, [r3, #32]
 8002f4a:	4a26      	ldr	r2, [pc, #152]	; (8002fe4 <TIM_OC4_SetConfig+0xa8>)
 8002f4c:	401a      	ands	r2, r3
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	6a1b      	ldr	r3, [r3, #32]
 8002f56:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	685b      	ldr	r3, [r3, #4]
 8002f5c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	69db      	ldr	r3, [r3, #28]
 8002f62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	4a20      	ldr	r2, [pc, #128]	; (8002fe8 <TIM_OC4_SetConfig+0xac>)
 8002f68:	4013      	ands	r3, r2
 8002f6a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	4a1f      	ldr	r2, [pc, #124]	; (8002fec <TIM_OC4_SetConfig+0xb0>)
 8002f70:	4013      	ands	r3, r2
 8002f72:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002f74:	683b      	ldr	r3, [r7, #0]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	021b      	lsls	r3, r3, #8
 8002f7a:	68fa      	ldr	r2, [r7, #12]
 8002f7c:	4313      	orrs	r3, r2
 8002f7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002f80:	693b      	ldr	r3, [r7, #16]
 8002f82:	4a1b      	ldr	r2, [pc, #108]	; (8002ff0 <TIM_OC4_SetConfig+0xb4>)
 8002f84:	4013      	ands	r3, r2
 8002f86:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002f88:	683b      	ldr	r3, [r7, #0]
 8002f8a:	689b      	ldr	r3, [r3, #8]
 8002f8c:	031b      	lsls	r3, r3, #12
 8002f8e:	693a      	ldr	r2, [r7, #16]
 8002f90:	4313      	orrs	r3, r2
 8002f92:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	4a17      	ldr	r2, [pc, #92]	; (8002ff4 <TIM_OC4_SetConfig+0xb8>)
 8002f98:	4293      	cmp	r3, r2
 8002f9a:	d007      	beq.n	8002fac <TIM_OC4_SetConfig+0x70>
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	4a16      	ldr	r2, [pc, #88]	; (8002ff8 <TIM_OC4_SetConfig+0xbc>)
 8002fa0:	4293      	cmp	r3, r2
 8002fa2:	d003      	beq.n	8002fac <TIM_OC4_SetConfig+0x70>
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	4a15      	ldr	r2, [pc, #84]	; (8002ffc <TIM_OC4_SetConfig+0xc0>)
 8002fa8:	4293      	cmp	r3, r2
 8002faa:	d109      	bne.n	8002fc0 <TIM_OC4_SetConfig+0x84>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002fac:	697b      	ldr	r3, [r7, #20]
 8002fae:	4a14      	ldr	r2, [pc, #80]	; (8003000 <TIM_OC4_SetConfig+0xc4>)
 8002fb0:	4013      	ands	r3, r2
 8002fb2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002fb4:	683b      	ldr	r3, [r7, #0]
 8002fb6:	695b      	ldr	r3, [r3, #20]
 8002fb8:	019b      	lsls	r3, r3, #6
 8002fba:	697a      	ldr	r2, [r7, #20]
 8002fbc:	4313      	orrs	r3, r2
 8002fbe:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	697a      	ldr	r2, [r7, #20]
 8002fc4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	68fa      	ldr	r2, [r7, #12]
 8002fca:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002fcc:	683b      	ldr	r3, [r7, #0]
 8002fce:	685a      	ldr	r2, [r3, #4]
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	693a      	ldr	r2, [r7, #16]
 8002fd8:	621a      	str	r2, [r3, #32]
}
 8002fda:	46c0      	nop			; (mov r8, r8)
 8002fdc:	46bd      	mov	sp, r7
 8002fde:	b006      	add	sp, #24
 8002fe0:	bd80      	pop	{r7, pc}
 8002fe2:	46c0      	nop			; (mov r8, r8)
 8002fe4:	ffffefff 	.word	0xffffefff
 8002fe8:	ffff8fff 	.word	0xffff8fff
 8002fec:	fffffcff 	.word	0xfffffcff
 8002ff0:	ffffdfff 	.word	0xffffdfff
 8002ff4:	40012c00 	.word	0x40012c00
 8002ff8:	40014400 	.word	0x40014400
 8002ffc:	40014800 	.word	0x40014800
 8003000:	ffffbfff 	.word	0xffffbfff

08003004 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003004:	b580      	push	{r7, lr}
 8003006:	b086      	sub	sp, #24
 8003008:	af00      	add	r7, sp, #0
 800300a:	60f8      	str	r0, [r7, #12]
 800300c:	60b9      	str	r1, [r7, #8]
 800300e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	6a1b      	ldr	r3, [r3, #32]
 8003014:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	6a1b      	ldr	r3, [r3, #32]
 800301a:	2201      	movs	r2, #1
 800301c:	4393      	bics	r3, r2
 800301e:	001a      	movs	r2, r3
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	699b      	ldr	r3, [r3, #24]
 8003028:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800302a:	693b      	ldr	r3, [r7, #16]
 800302c:	22f0      	movs	r2, #240	; 0xf0
 800302e:	4393      	bics	r3, r2
 8003030:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	011b      	lsls	r3, r3, #4
 8003036:	693a      	ldr	r2, [r7, #16]
 8003038:	4313      	orrs	r3, r2
 800303a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800303c:	697b      	ldr	r3, [r7, #20]
 800303e:	220a      	movs	r2, #10
 8003040:	4393      	bics	r3, r2
 8003042:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003044:	697a      	ldr	r2, [r7, #20]
 8003046:	68bb      	ldr	r3, [r7, #8]
 8003048:	4313      	orrs	r3, r2
 800304a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	693a      	ldr	r2, [r7, #16]
 8003050:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	697a      	ldr	r2, [r7, #20]
 8003056:	621a      	str	r2, [r3, #32]
}
 8003058:	46c0      	nop			; (mov r8, r8)
 800305a:	46bd      	mov	sp, r7
 800305c:	b006      	add	sp, #24
 800305e:	bd80      	pop	{r7, pc}

08003060 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003060:	b580      	push	{r7, lr}
 8003062:	b086      	sub	sp, #24
 8003064:	af00      	add	r7, sp, #0
 8003066:	60f8      	str	r0, [r7, #12]
 8003068:	60b9      	str	r1, [r7, #8]
 800306a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	6a1b      	ldr	r3, [r3, #32]
 8003070:	2210      	movs	r2, #16
 8003072:	4393      	bics	r3, r2
 8003074:	001a      	movs	r2, r3
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	699b      	ldr	r3, [r3, #24]
 800307e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	6a1b      	ldr	r3, [r3, #32]
 8003084:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003086:	697b      	ldr	r3, [r7, #20]
 8003088:	4a0d      	ldr	r2, [pc, #52]	; (80030c0 <TIM_TI2_ConfigInputStage+0x60>)
 800308a:	4013      	ands	r3, r2
 800308c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	031b      	lsls	r3, r3, #12
 8003092:	697a      	ldr	r2, [r7, #20]
 8003094:	4313      	orrs	r3, r2
 8003096:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003098:	693b      	ldr	r3, [r7, #16]
 800309a:	22a0      	movs	r2, #160	; 0xa0
 800309c:	4393      	bics	r3, r2
 800309e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80030a0:	68bb      	ldr	r3, [r7, #8]
 80030a2:	011b      	lsls	r3, r3, #4
 80030a4:	693a      	ldr	r2, [r7, #16]
 80030a6:	4313      	orrs	r3, r2
 80030a8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	697a      	ldr	r2, [r7, #20]
 80030ae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	693a      	ldr	r2, [r7, #16]
 80030b4:	621a      	str	r2, [r3, #32]
}
 80030b6:	46c0      	nop			; (mov r8, r8)
 80030b8:	46bd      	mov	sp, r7
 80030ba:	b006      	add	sp, #24
 80030bc:	bd80      	pop	{r7, pc}
 80030be:	46c0      	nop			; (mov r8, r8)
 80030c0:	ffff0fff 	.word	0xffff0fff

080030c4 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80030c4:	b580      	push	{r7, lr}
 80030c6:	b084      	sub	sp, #16
 80030c8:	af00      	add	r7, sp, #0
 80030ca:	6078      	str	r0, [r7, #4]
 80030cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	689b      	ldr	r3, [r3, #8]
 80030d2:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	2270      	movs	r2, #112	; 0x70
 80030d8:	4393      	bics	r3, r2
 80030da:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80030dc:	683a      	ldr	r2, [r7, #0]
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	4313      	orrs	r3, r2
 80030e2:	2207      	movs	r2, #7
 80030e4:	4313      	orrs	r3, r2
 80030e6:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	68fa      	ldr	r2, [r7, #12]
 80030ec:	609a      	str	r2, [r3, #8]
}
 80030ee:	46c0      	nop			; (mov r8, r8)
 80030f0:	46bd      	mov	sp, r7
 80030f2:	b004      	add	sp, #16
 80030f4:	bd80      	pop	{r7, pc}
	...

080030f8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80030f8:	b580      	push	{r7, lr}
 80030fa:	b086      	sub	sp, #24
 80030fc:	af00      	add	r7, sp, #0
 80030fe:	60f8      	str	r0, [r7, #12]
 8003100:	60b9      	str	r1, [r7, #8]
 8003102:	607a      	str	r2, [r7, #4]
 8003104:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	689b      	ldr	r3, [r3, #8]
 800310a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800310c:	697b      	ldr	r3, [r7, #20]
 800310e:	4a09      	ldr	r2, [pc, #36]	; (8003134 <TIM_ETR_SetConfig+0x3c>)
 8003110:	4013      	ands	r3, r2
 8003112:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003114:	683b      	ldr	r3, [r7, #0]
 8003116:	021a      	lsls	r2, r3, #8
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	431a      	orrs	r2, r3
 800311c:	68bb      	ldr	r3, [r7, #8]
 800311e:	4313      	orrs	r3, r2
 8003120:	697a      	ldr	r2, [r7, #20]
 8003122:	4313      	orrs	r3, r2
 8003124:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	697a      	ldr	r2, [r7, #20]
 800312a:	609a      	str	r2, [r3, #8]
}
 800312c:	46c0      	nop			; (mov r8, r8)
 800312e:	46bd      	mov	sp, r7
 8003130:	b006      	add	sp, #24
 8003132:	bd80      	pop	{r7, pc}
 8003134:	ffff00ff 	.word	0xffff00ff

08003138 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003138:	b580      	push	{r7, lr}
 800313a:	b086      	sub	sp, #24
 800313c:	af00      	add	r7, sp, #0
 800313e:	60f8      	str	r0, [r7, #12]
 8003140:	60b9      	str	r1, [r7, #8]
 8003142:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003144:	68bb      	ldr	r3, [r7, #8]
 8003146:	221f      	movs	r2, #31
 8003148:	4013      	ands	r3, r2
 800314a:	2201      	movs	r2, #1
 800314c:	409a      	lsls	r2, r3
 800314e:	0013      	movs	r3, r2
 8003150:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	6a1b      	ldr	r3, [r3, #32]
 8003156:	697a      	ldr	r2, [r7, #20]
 8003158:	43d2      	mvns	r2, r2
 800315a:	401a      	ands	r2, r3
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	6a1a      	ldr	r2, [r3, #32]
 8003164:	68bb      	ldr	r3, [r7, #8]
 8003166:	211f      	movs	r1, #31
 8003168:	400b      	ands	r3, r1
 800316a:	6879      	ldr	r1, [r7, #4]
 800316c:	4099      	lsls	r1, r3
 800316e:	000b      	movs	r3, r1
 8003170:	431a      	orrs	r2, r3
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	621a      	str	r2, [r3, #32]
}
 8003176:	46c0      	nop			; (mov r8, r8)
 8003178:	46bd      	mov	sp, r7
 800317a:	b006      	add	sp, #24
 800317c:	bd80      	pop	{r7, pc}
	...

08003180 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003180:	b580      	push	{r7, lr}
 8003182:	b084      	sub	sp, #16
 8003184:	af00      	add	r7, sp, #0
 8003186:	6078      	str	r0, [r7, #4]
 8003188:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	223c      	movs	r2, #60	; 0x3c
 800318e:	5c9b      	ldrb	r3, [r3, r2]
 8003190:	2b01      	cmp	r3, #1
 8003192:	d101      	bne.n	8003198 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003194:	2302      	movs	r3, #2
 8003196:	e03c      	b.n	8003212 <HAL_TIMEx_MasterConfigSynchronization+0x92>
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	223c      	movs	r2, #60	; 0x3c
 800319c:	2101      	movs	r1, #1
 800319e:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	223d      	movs	r2, #61	; 0x3d
 80031a4:	2102      	movs	r1, #2
 80031a6:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	685b      	ldr	r3, [r3, #4]
 80031ae:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	689b      	ldr	r3, [r3, #8]
 80031b6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	2270      	movs	r2, #112	; 0x70
 80031bc:	4393      	bics	r3, r2
 80031be:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80031c0:	683b      	ldr	r3, [r7, #0]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	68fa      	ldr	r2, [r7, #12]
 80031c6:	4313      	orrs	r3, r2
 80031c8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	68fa      	ldr	r2, [r7, #12]
 80031d0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	4a11      	ldr	r2, [pc, #68]	; (800321c <HAL_TIMEx_MasterConfigSynchronization+0x9c>)
 80031d8:	4293      	cmp	r3, r2
 80031da:	d004      	beq.n	80031e6 <HAL_TIMEx_MasterConfigSynchronization+0x66>
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	4a0f      	ldr	r2, [pc, #60]	; (8003220 <HAL_TIMEx_MasterConfigSynchronization+0xa0>)
 80031e2:	4293      	cmp	r3, r2
 80031e4:	d10c      	bne.n	8003200 <HAL_TIMEx_MasterConfigSynchronization+0x80>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80031e6:	68bb      	ldr	r3, [r7, #8]
 80031e8:	2280      	movs	r2, #128	; 0x80
 80031ea:	4393      	bics	r3, r2
 80031ec:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80031ee:	683b      	ldr	r3, [r7, #0]
 80031f0:	685b      	ldr	r3, [r3, #4]
 80031f2:	68ba      	ldr	r2, [r7, #8]
 80031f4:	4313      	orrs	r3, r2
 80031f6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	68ba      	ldr	r2, [r7, #8]
 80031fe:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	223d      	movs	r2, #61	; 0x3d
 8003204:	2101      	movs	r1, #1
 8003206:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	223c      	movs	r2, #60	; 0x3c
 800320c:	2100      	movs	r1, #0
 800320e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003210:	2300      	movs	r3, #0
}
 8003212:	0018      	movs	r0, r3
 8003214:	46bd      	mov	sp, r7
 8003216:	b004      	add	sp, #16
 8003218:	bd80      	pop	{r7, pc}
 800321a:	46c0      	nop			; (mov r8, r8)
 800321c:	40012c00 	.word	0x40012c00
 8003220:	40000400 	.word	0x40000400

08003224 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003224:	b580      	push	{r7, lr}
 8003226:	b084      	sub	sp, #16
 8003228:	af00      	add	r7, sp, #0
 800322a:	6078      	str	r0, [r7, #4]
 800322c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800322e:	2300      	movs	r3, #0
 8003230:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	223c      	movs	r2, #60	; 0x3c
 8003236:	5c9b      	ldrb	r3, [r3, r2]
 8003238:	2b01      	cmp	r3, #1
 800323a:	d101      	bne.n	8003240 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800323c:	2302      	movs	r3, #2
 800323e:	e03e      	b.n	80032be <HAL_TIMEx_ConfigBreakDeadTime+0x9a>
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	223c      	movs	r2, #60	; 0x3c
 8003244:	2101      	movs	r1, #1
 8003246:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	22ff      	movs	r2, #255	; 0xff
 800324c:	4393      	bics	r3, r2
 800324e:	001a      	movs	r2, r3
 8003250:	683b      	ldr	r3, [r7, #0]
 8003252:	68db      	ldr	r3, [r3, #12]
 8003254:	4313      	orrs	r3, r2
 8003256:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	4a1b      	ldr	r2, [pc, #108]	; (80032c8 <HAL_TIMEx_ConfigBreakDeadTime+0xa4>)
 800325c:	401a      	ands	r2, r3
 800325e:	683b      	ldr	r3, [r7, #0]
 8003260:	689b      	ldr	r3, [r3, #8]
 8003262:	4313      	orrs	r3, r2
 8003264:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	4a18      	ldr	r2, [pc, #96]	; (80032cc <HAL_TIMEx_ConfigBreakDeadTime+0xa8>)
 800326a:	401a      	ands	r2, r3
 800326c:	683b      	ldr	r3, [r7, #0]
 800326e:	685b      	ldr	r3, [r3, #4]
 8003270:	4313      	orrs	r3, r2
 8003272:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	4a16      	ldr	r2, [pc, #88]	; (80032d0 <HAL_TIMEx_ConfigBreakDeadTime+0xac>)
 8003278:	401a      	ands	r2, r3
 800327a:	683b      	ldr	r3, [r7, #0]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	4313      	orrs	r3, r2
 8003280:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	4a13      	ldr	r2, [pc, #76]	; (80032d4 <HAL_TIMEx_ConfigBreakDeadTime+0xb0>)
 8003286:	401a      	ands	r2, r3
 8003288:	683b      	ldr	r3, [r7, #0]
 800328a:	691b      	ldr	r3, [r3, #16]
 800328c:	4313      	orrs	r3, r2
 800328e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	4a11      	ldr	r2, [pc, #68]	; (80032d8 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>)
 8003294:	401a      	ands	r2, r3
 8003296:	683b      	ldr	r3, [r7, #0]
 8003298:	695b      	ldr	r3, [r3, #20]
 800329a:	4313      	orrs	r3, r2
 800329c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	4a0e      	ldr	r2, [pc, #56]	; (80032dc <HAL_TIMEx_ConfigBreakDeadTime+0xb8>)
 80032a2:	401a      	ands	r2, r3
 80032a4:	683b      	ldr	r3, [r7, #0]
 80032a6:	69db      	ldr	r3, [r3, #28]
 80032a8:	4313      	orrs	r3, r2
 80032aa:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	68fa      	ldr	r2, [r7, #12]
 80032b2:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	223c      	movs	r2, #60	; 0x3c
 80032b8:	2100      	movs	r1, #0
 80032ba:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80032bc:	2300      	movs	r3, #0
}
 80032be:	0018      	movs	r0, r3
 80032c0:	46bd      	mov	sp, r7
 80032c2:	b004      	add	sp, #16
 80032c4:	bd80      	pop	{r7, pc}
 80032c6:	46c0      	nop			; (mov r8, r8)
 80032c8:	fffffcff 	.word	0xfffffcff
 80032cc:	fffffbff 	.word	0xfffffbff
 80032d0:	fffff7ff 	.word	0xfffff7ff
 80032d4:	ffffefff 	.word	0xffffefff
 80032d8:	ffffdfff 	.word	0xffffdfff
 80032dc:	ffffbfff 	.word	0xffffbfff

080032e0 <__libc_init_array>:
 80032e0:	b570      	push	{r4, r5, r6, lr}
 80032e2:	2600      	movs	r6, #0
 80032e4:	4d0c      	ldr	r5, [pc, #48]	; (8003318 <__libc_init_array+0x38>)
 80032e6:	4c0d      	ldr	r4, [pc, #52]	; (800331c <__libc_init_array+0x3c>)
 80032e8:	1b64      	subs	r4, r4, r5
 80032ea:	10a4      	asrs	r4, r4, #2
 80032ec:	42a6      	cmp	r6, r4
 80032ee:	d109      	bne.n	8003304 <__libc_init_array+0x24>
 80032f0:	2600      	movs	r6, #0
 80032f2:	f000 f821 	bl	8003338 <_init>
 80032f6:	4d0a      	ldr	r5, [pc, #40]	; (8003320 <__libc_init_array+0x40>)
 80032f8:	4c0a      	ldr	r4, [pc, #40]	; (8003324 <__libc_init_array+0x44>)
 80032fa:	1b64      	subs	r4, r4, r5
 80032fc:	10a4      	asrs	r4, r4, #2
 80032fe:	42a6      	cmp	r6, r4
 8003300:	d105      	bne.n	800330e <__libc_init_array+0x2e>
 8003302:	bd70      	pop	{r4, r5, r6, pc}
 8003304:	00b3      	lsls	r3, r6, #2
 8003306:	58eb      	ldr	r3, [r5, r3]
 8003308:	4798      	blx	r3
 800330a:	3601      	adds	r6, #1
 800330c:	e7ee      	b.n	80032ec <__libc_init_array+0xc>
 800330e:	00b3      	lsls	r3, r6, #2
 8003310:	58eb      	ldr	r3, [r5, r3]
 8003312:	4798      	blx	r3
 8003314:	3601      	adds	r6, #1
 8003316:	e7f2      	b.n	80032fe <__libc_init_array+0x1e>
 8003318:	08003380 	.word	0x08003380
 800331c:	08003380 	.word	0x08003380
 8003320:	08003380 	.word	0x08003380
 8003324:	08003384 	.word	0x08003384

08003328 <memset>:
 8003328:	0003      	movs	r3, r0
 800332a:	1812      	adds	r2, r2, r0
 800332c:	4293      	cmp	r3, r2
 800332e:	d100      	bne.n	8003332 <memset+0xa>
 8003330:	4770      	bx	lr
 8003332:	7019      	strb	r1, [r3, #0]
 8003334:	3301      	adds	r3, #1
 8003336:	e7f9      	b.n	800332c <memset+0x4>

08003338 <_init>:
 8003338:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800333a:	46c0      	nop			; (mov r8, r8)
 800333c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800333e:	bc08      	pop	{r3}
 8003340:	469e      	mov	lr, r3
 8003342:	4770      	bx	lr

08003344 <_fini>:
 8003344:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003346:	46c0      	nop			; (mov r8, r8)
 8003348:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800334a:	bc08      	pop	{r3}
 800334c:	469e      	mov	lr, r3
 800334e:	4770      	bx	lr
